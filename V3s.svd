<?xml version="1.0" encoding="utf-8"?>
<device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="1.3" xsi:noNamespaceSchemaLocation="CMSIS-SVD.xsd">
  <vendor>Allwinner</vendor>
  <vendorID>sunxi</vendorID>
  <name>V3s</name>
  <series>V3s</series>
  <version>0.1</version>
  <description>V3s</description>
  <licenseText>questionable</licenseText>
  <cpu>
    <name>ARM Cortex-A7 MP1</name>
    <revision>0</revision>
    <endian>little</endian>
    <mpuPresent>true</mpuPresent>
    <fpuPresent>false</fpuPresent>
    <nvicPrioBits>0</nvicPrioBits>
    <vendorSystickConfig>false</vendorSystickConfig>
  </cpu>
  <addressUnitBits>8</addressUnitBits>
  <width>64</width>
  <size>32</size>
  <access>read-write</access>
  <resetMask>0xFFFFFFFF</resetMask>
  <peripherals>
    <peripheral>
      <name>AC</name>
      <description>AC</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C22C00</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>AC_ADC_CNT</name>
          <description>ADC RX FIFO Counter Register</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RX_CNT</name>
              <description>RX Sample Counter The audio sample number of writing into RXFIFO. When one sample is written by Digital Audio Engine, the RX sample counter register increases by one. The RX sample counter register can be set to any initial valve at any time. After been updated by the initial value, the counter register should count on base of this initial value Notes: It is used for Audio/ Video Synchronization </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_CTR</name>
          <description>ADC DAP Control Register</description>
          <addressOffset>0x70</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xC73FF3FF</resetMask>
          <fields>
            <field>
              <name>ADAP_EN</name>
              <description>DAP for ADC enable 0 : bypass      
1: enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_START</name>
              <description>DAP for ADC start up 0 : disable      
1: start up </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>start</name>
                  <description>start up</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ENADC_DRC</name>
              <description>DRC for ADC enable 0 : bypass   1 : enable </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADC_DRC_EN</name>
              <description>ADC DRC function enable 0 : disable   1 : enable </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADC_DRC_HPF_EN</name>
              <description>ADC DRC HPF function enable 0 : disable   1 : enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_LSATU_FLAG</name>
              <description>Left channel AGC saturation flag 0 : no saturation      
1: saturation </description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>saturation</name>
                  <description>saturation</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_LNOI_FLAG</name>
              <description>Left channel AGC noise-threshold flag  </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ADAP_LCHAN_GAIN</name>
              <description>Left channel Gain applied by AGC (7.1format 2s component(-20dB  40dB), 0.5dB/ step)  0x50 : 40dB 0x4F : 39.5dB --------------- 0x00 : 00dB 0xFF : -0.5dB </description>
              <bitRange>[19:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ADAP_RSATU_FLAG</name>
              <description>Right AGC saturation flag 0 : no saturation      
1: saturation </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>saturation</name>
                  <description>saturation</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_RNOI_FLAG</name>
              <description>Right channel AGC noise-threshold flag  </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ADAP_LCHAN_GAIN</name>
              <description>Right Channel Gain applied by AGC (7.1format 2s component)(0.5dB step   0x50 : 40dB 0x4F : 39.5dB --------------- 0x00 : 00dB 0xFF : -0.5dB </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_HPFC</name>
          <description>AC_ADC_DAP_HPFC</description>
          <addressOffset>0x90</addressOffset>
          <resetValue>0xFFFAC1</resetValue>
          <resetMask>0x7FFFFFF</resetMask>
          <fields>
            <field>
              <name>ADAP_HPFC</name>
              <description>HPF coefficient setting (3.24fomat) </description>
              <bitRange>[26:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_LAC</name>
          <description>ADC DAP Left Average Coef Register</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x51EB8</resetValue>
          <resetMask>0x7FFFFFF</resetMask>
          <fields>
            <field>
              <name>ADAP_LAC</name>
              <description>Average level coefficient setting(3.24format 2s component)  </description>
              <bitRange>[26:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_LCTR</name>
          <description>ADC DAP Left Control Register</description>
          <addressOffset>0x74</addressOffset>
          <resetValue>0x1F7000</resetValue>
          <resetMask>0xFF73FF</resetMask>
          <fields>
            <field>
              <name>ADAP_LNOI_SET</name>
              <description>(-86dB) ADAP_LNOI_SET. Left channel noise threshold setting 0x00 : -24dB 0x01 : -26dB 0x02 : -28dB ---------------------- 
0x1D: -82dB 
0x1E: -84dB 
0x1F: -86dB </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_minus_82dB</name>
                  <description>-82dB</description>
                  <value>0x1D</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_minus_84dB</name>
                  <description>-84dB</description>
                  <value>0x1E</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_minus_86dB</name>
                  <description>-86dB</description>
                  <value>0x1F</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AAGC_LCHAN_EN</name>
              <description>AAGC_LCHAN_EN. Left AGC function enable  0:disable     
1: enable </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_LHPF_EN</name>
              <description>ADAP_LHPF_EN. Left HPF enable  
0: disable     
1: enable </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_LNOI_DET</name>
              <description>ADAP_LNOI_DET. Left Noise detect enable  
0: disable     
1: enable </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_LCHAN_HYS</name>
              <description>ADAP_LCHAN_HYS. Left Hysteresis setting 00 : 1dB 01 : 2dB 10 : 4dB 11 : disable </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_LNOI_DEB</name>
              <description>ADAP_LNOI_DEB. Left Noise debounce time 0000:0/fs 0001:4/fs 0010:8/fs ------------ 1111 :16*4096/fs T=2(N+1)/fs ,except N=0 </description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_LSIG_DEB</name>
              <description>ADAP_LSIG_DEB. Left Signal debounce time 0000:0/fs 0001:4/fs 0010:8/fs ------------ 1111 :16*4096/fs T=2(N+1)/fs ,except N=0 </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_LDAT</name>
          <description>ADC DAP Left Decay and Attack Time Register</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x1F</resetValue>
          <resetMask>0x7FFF7FFF</resetMask>
          <fields>
            <field>
              <name>ADAP_LATT_SET_LEFT_ATTACK_TIME_COEFFICIENT</name>
              <description>ADAP_LATT_SET Left attack time coefficient setting 0000   : 1x32/fs 0001   : 2x32/fs ------------------------ 7FFF  : 215 x32/fs T=(n+1)*32*fs When the gain decreases, the actual gain will decrease 0.5dB at every attack time. </description>
              <bitRange>[30:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_LDEC_SET_LEFT_DECAY_TIME</name>
              <description>(32x32fs) ADAP_LDEC_SET Left decay time coefficient setting  0000  : 1x32/fs 0001  : 2x32/fs ------------------------ 7FFF  : 215 x32/fs T=(n+1)*32/fs When the gain increases, the actual gain will increase 0.5dB at every decay time. </description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_LINAC</name>
          <description>AC_ADC_DAP_LINAC</description>
          <addressOffset>0x94</addressOffset>
          <resetValue>0x51EB8</resetValue>
          <resetMask>0x7FFFFFF</resetMask>
          <fields>
            <field>
              <name>ADAP_LINAC</name>
              <description>Left input signal average filter coefficient to check noise or not (the coefficientis 3.24 format 2s complement)  always the same as the left output signal average filter's </description>
              <bitRange>[26:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_OPT</name>
          <description>AC_ADC_DAP_OPT</description>
          <addressOffset>0x9C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x737</resetMask>
          <fields>
            <field>
              <name>LEFT_ENERGY_DEFAULT_VALUE</name>
              <description>Left energy default value setting (include the input and output) 0 : min 1 : max </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LEFT_CHANNEL_GAIN_HYSTERSIS</name>
              <description>Left channel gain hystersis setting. The different between target level and the signal level must larger than the hystersis when the gain change.  00 : 0.4375db 01 : 0.9375db 10 : 1.9375db 11 : 3db </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INPUT_SIGNAL_AVERAGE_FILTER_COEFFICIENT</name>
              <description>The input signal average filter coefficient setting 0 : is the reg94/reg98 1 : is the reg80/reg88; </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AGC_OUTPUT_WHEN_THE_CHANNEL</name>
              <description>AGC output when the channel in noise state 0 : output is zero 1 : output is the input data </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RIGHT_ENERGY_DEFAULT_VALUE</name>
              <description>Right energy default value setting (include the input and output) 0 : min 1 : max </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RIGHT_CHANNEL_GAIN_HYSTERESIS</name>
              <description>Right channel gain hysteresis setting. The different between target level and the signal level must larger than the hysteresis when the gain change.  00 : 0.4375db 01 : 0.9375db 10 : 1.9375db 11 : 3db </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_PARA</name>
          <description>ADC DAP Parameter Register</description>
          <addressOffset>0x7C</addressOffset>
          <resetValue>0x2C2C2828</resetValue>
          <resetMask>0x3F3FFFFF</resetMask>
          <fields>
            <field>
              <name>ADAP_LTARG_SET</name>
              <description>Left channel target level setting (-1dB -- -30dB). (6.0format 2s component)  </description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_RTARG_SET</name>
              <description>Right channel target level setting (-1dB -- -30dB). (6.0format 2s component)  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_LGAIN_MAX</name>
              <description>Left channel max gain setting (0-40dB). (7.1format 2s component)  </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_RGAIN_MAX</name>
              <description>Right channel max gain setting (0-40dB). (7.1format 2s component)  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_RAC</name>
          <description>ADC DAP Right Average Coef Register</description>
          <addressOffset>0x88</addressOffset>
          <resetValue>0x51EB8</resetValue>
          <resetMask>0x7FFFFFF</resetMask>
          <fields>
            <field>
              <name>ADAP_RAC</name>
              <description>Average level coefficient setting(3.24fomat)  </description>
              <bitRange>[26:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_RCTR</name>
          <description>ADC DAP Right Control Register</description>
          <addressOffset>0x78</addressOffset>
          <resetValue>0x1F7000</resetValue>
          <resetMask>0x1F73FF</resetMask>
          <fields>
            <field>
              <name>ADAP_RNOI_SET</name>
              <description>(-86dB) ADAP_RNOI_SET. Right channel noise threshold setting 0x00 : -24dB 0x01 : -26dB 0x02 : -28dB ---------------------- 
0x1D: -82dB 
0x1E: -84dB 
0x1F: -86dB </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_minus_82dB</name>
                  <description>-82dB</description>
                  <value>0x1D</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_minus_84dB</name>
                  <description>-84dB</description>
                  <value>0x1E</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_minus_86dB</name>
                  <description>-86dB</description>
                  <value>0x1F</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AAGC_RCHAN_EN</name>
              <description>AAGC_RCHAN_EN. Right AGC enable  0:disable   1:enable </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_RHPF_EN</name>
              <description>ADAP_RHPF_EN. Right HPF enable 
0: disable   
1: enable </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_RNOI_DET</name>
              <description>ADAP_RNOI_DET. Right Noise detect enable 
0: disable   1:enable </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADAP_RCHAN_HYS</name>
              <description>ADAP_RCHAN_HYS. Right Hysteresis setting 00 : 1dB 01 : 2dB 10 : 4dB 11 : disable; </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_RNOI_DEB</name>
              <description>ADAP_RNOI_DEB. Right Noise debounce time 0000:0/fs 0001:4/fs 0010:8/fs ------------ 1111 16*4096/fs T=2(N+1)/fs ,except N=0 </description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_RSIG_DEB</name>
              <description>ADAP_RSIG_DEB. Right Signal debounce time 0000:0/fs 0001:4/fs 0010:8/fs ------------ 1111 16*4096/fs T=2(N+1)/fs ,except N=0 </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_RDAT</name>
          <description>ADC DAP Right Decay and Attack Time Register</description>
          <addressOffset>0x8C</addressOffset>
          <resetValue>0x1F</resetValue>
          <resetMask>0x7FFF7FFF</resetMask>
          <fields>
            <field>
              <name>ADAP_RATT_SET</name>
              <description>Right attack time coefficient setting 0000  : 1x32/fs 0001  : 2x32/fs ------------------------ 7FFF  : 215 x32/fs T=(n+1)*32/fs When the gain decreases, the actual gain will decrease 0.5dB at every attack time. </description>
              <bitRange>[30:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADAP_RDEC_SET</name>
              <description>Right decay time coefficient setting  0000  : 1x32/fs 0001  : 2x32/fs ------------------------ 7FFF  : 215x32/fs T=(n+1)*32/fs When the gain increases, the actual gain will increase 0.5dB at every decay time. </description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DAP_RNAC</name>
          <description>AC_ADC_DAP_RNAC</description>
          <addressOffset>0x98</addressOffset>
          <resetValue>0x51EB8</resetValue>
          <resetMask>0x7FFFFFF</resetMask>
          <fields>
            <field>
              <name>ADAP_RINAC</name>
              <description>Right input signal average filter coefficient to check noise or not (the coefficientis 3.24 format 2s complement)  always the same as the left output signal average filter's </description>
              <bitRange>[26:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DG</name>
          <description>ADC Debug Register</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1000000</resetMask>
          <fields>
            <field>
              <name>AD_SWP</name>
              <description>ADC Output Channel Swap Enable (for digital filter) 
0: Disable 
1: Enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_CTRL</name>
          <description>ADC DRC Control Register</description>
          <addressOffset>0x208</addressOffset>
          <resetValue>0x80</resetValue>
          <resetMask>0xBFFF</resetMask>
          <fields>
            <field>
              <name>DRC_DELAY_BUFFER_DATA_OUTPUT</name>
              <description>DRC delay buffer data output state when drc delay function is enble and the drc funciton disable. After disable drc function and this bit go to 0, the user should write the drc delay function bit to 0; 0 : not complete 1 : is complete </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SIGNAL_DELAY_TIME</name>
              <description>Signal delay time setting 6'h00 : (8x1)fs 6'h01 : (8x2)fs 6'h02 : (8x3)fs ---------------------------------------- 6'h2e : (8*47)fs 6'h2f : (8*48)fs 6'h30 -- 6'h3f : (8*48)fs Delay time = 8*(n+1)fs, n&lt;6'h30; When the delay function is disable, the signal delay time is unused. </description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DELAY_BUFFER_USE_OR_NOT</name>
              <description>The delay buffer use or not when the drc disable and the drc buffer data output completely 0 : don't use the buffer  1 : use the buffer  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_GAIN_MAX_LIMIT_ENABLE</name>
              <description>DRC gain max limit enable 0 : disable 1 : enable </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_GAIN_MIN_LIMIT_ENABLE</name>
              <description>DRC gain min limit enable. when this fuction enable, it will overwrite the noise detect funciton. 0 : disable 1 : enable </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONTROL_THE_DRC_TO_DETECT</name>
              <description>Control the drc to detect noise when ET enable  0 : disable 1 : enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SIGNAL_FUNCTION_SELECT</name>
              <description>Signal function Select 0 : RMS filter 1 : Peak filter When Signal function Select Peak filter, the RMS parameter is unused. (AC_DRC_LRMSHAT / AC_DRC_LRMSLAT / AC_DRC_LRMSHAT / AC_DRC_LRMSLAT) When Signal function Select RMS filter, the Peak filter parameter is unused.(AC_DRC_LPFHAT / AC_DRC_LPFLAT / AC_DRC_RPFHAT / AC_DRC_RPFLAT / AC_DRC_LPFHRT / AC_DRC_LPFLRT / AC_DRC_RPFHRT / AC_DRC_RPFLRT) </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DELAY_FUNCTION_ENABLE</name>
              <description>Delay function enable 0 : disable 1 : enable When the Delay function enable is disable, the Signal delay time is unused. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_LT_ENABLE</name>
              <description>DRC LT enable 0 : disable 1 : enable When the DRC LT is disable the LT, Kl and OPL parameter is unused. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_ET_ENABLE</name>
              <description>DRC ET enable 0 : disable 1 : enable When the DRC ET is disable the ET, Ke and OPE parameter is unused. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_EPSHC</name>
          <description>ADC DRC Expander Smooth Time High Coef Register</description>
          <addressOffset>0x2AC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE</name>
              <description>The gain smooth filter release and attack time parameter setting in expander region, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (30ms) </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_EPSLC</name>
          <description>ADC DRC Expander Smooth Time Low Coef Register    0x2B4</description>
          <addressOffset>0x2B0</addressOffset>
          <resetValue>0x640C</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE</name>
              <description>The gain smooth filter release and attack time parameter setting in expander region, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (30ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HCT</name>
          <description>ADC DRC Compressor Theshold High Setting Register</description>
          <addressOffset>0x23C</addressOffset>
          <resetValue>0x6A4</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_THRESHOLD</name>
              <description>The compressor threshold setting, which set by the equation that CTin = -CT/6.0206. The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HET</name>
          <description>ADC DRC Expander Theshold High Setting Register</description>
          <addressOffset>0x26C</addressOffset>
          <resetValue>0xBA0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_THRESHOLD</name>
              <description>The expander threshold setting, which set by the equation that ETin = -ET/6.0206, The format is 8.24. (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HHPFC</name>
          <description>ADC DRC High HPF Coef Register</description>
          <addressOffset>0x200</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>HPF</name>
              <description>coefficient setting and the data is 3.24 format.  </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HKC</name>
          <description>ADC DRC Compressor Slope High Setting Register</description>
          <addressOffset>0x244</addressOffset>
          <resetValue>0x80</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_SLOPE</name>
              <description>The slope of the compressor which determine by the equation that Kc = 1/R, there, R is the ratio of the compressor, which always is interger. The format is 8.24. (2 : 1) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HKE</name>
          <description>ADC DRC Expander Slope High Setting Register</description>
          <addressOffset>0x274</addressOffset>
          <resetValue>0x500</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_SLOPE</name>
              <description>The slope of the expander which determine by the equation that Ke = 1/R, there, R is the ratio of the expander, which always is interger and the ke must larger than 50. The format is 8.24. (1:5) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HKN</name>
          <description>ADC DRC Linear Slope High Setting Register</description>
          <addressOffset>0x284</addressOffset>
          <resetValue>0x100</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>LINEAR_SLOPE</name>
              <description>The slope of the linear which determine by the equation that Kn = 1/R, there, R is the ratio of the linear, which always is interger . The format is 8.24. (1:1) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HKl</name>
          <description>ADC DRC Limiter Slope High Setting Register</description>
          <addressOffset>0x25C</addressOffset>
          <resetValue>0x5</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_SLOPE</name>
              <description>The slope of the limiter which determine by the equation that Kl = 1/R, there, R is the ratio of the limiter, which always is interger. The format is 8.24. (50 :1) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HLT</name>
          <description>ADC DRC Limiter Theshold High Setting Register</description>
          <addressOffset>0x254</addressOffset>
          <resetValue>0x1A9</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_THRESHOLD</name>
              <description>The limiter threshold setting, which set by the equation that LTin = -LT/6.0206, The format is 8.24. (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HOPC</name>
          <description>ADC DRC Compressor High Output at Compressor Threshold  Register</description>
          <addressOffset>0x24C</addressOffset>
          <resetValue>0xF95B</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_OUTPUT</name>
              <description>The output of the compressor which determine by the equation -OPC/6.0206 The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HOPE</name>
          <description>ADC DRC Expander High Output at Expander Threshold</description>
          <addressOffset>0x27C</addressOffset>
          <resetValue>0xF45F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_OUTPUT</name>
              <description>The output of the expander which determine by equation OPE/6.0206. The format is 8.24  (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HOPL</name>
          <description>ADC DRC Limiter High Output at Limiter Threshold</description>
          <addressOffset>0x264</addressOffset>
          <resetValue>0xFBD8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_OUTPUT</name>
              <description>The output of the limiter which determine by equation OPT/6.0206. The format is 8.24  (-25dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HPFHGAIN</name>
          <description>ADC DRC HPF Gain High</description>
          <addressOffset>0x2B8</addressOffset>
          <resetValue>0x100</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>HPF_COEFFICIENT_GAIN</name>
              <description>The gain of the hpf coefficient setting which format is 3.24.(gain = 1) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_HPFLGAIN</name>
          <description>ADC DRC HPF Gain Low</description>
          <addressOffset>0x2BC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>HPF_COEFFICIENT_GAIN</name>
              <description>The gain of the hpf coefficient setting which format is 3.24.(gain = 1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LCT</name>
          <description>ADC DRC Compressor Slope High Setting Register</description>
          <addressOffset>0x240</addressOffset>
          <resetValue>0xD3C0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_THRESHOLD</name>
              <description>The compressor threshold setting, which set by the equation that CTin = -CT/6.0206. The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LET</name>
          <description>ADC DRC Expander Theshold Low Setting Register</description>
          <addressOffset>0x270</addressOffset>
          <resetValue>0x7291</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_THRESHOLD</name>
              <description>The expander threshold setting, which set by the equation that ETin = -ET/6.0206, The format is 8.24. (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LHPFC</name>
          <description>ADC DRC Low HPF Coef Register</description>
          <addressOffset>0x204</addressOffset>
          <resetValue>0xFAC1</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>HPF</name>
              <description>coefficient setting and the data is 3.24 format. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LKC</name>
          <description>ADC DRC Compressor Slope Low Setting Register</description>
          <addressOffset>0x248</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_SLOPE</name>
              <description>The slope of the compressor which determine by the equation that Kc = 1/R, there, R is the ratio of the compressor, which always is interger. The format is 8.24. (2 : 1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LKE</name>
          <description>ADC DRC Expander Slope Low Setting Register</description>
          <addressOffset>0x278</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_SLOPE</name>
              <description>The slope of the expander which determine by the equation that Ke = 1/R, there, R is the ratio of the expander, which always is interger and the ke must larger than 50. The format is 8.24. (1:5) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LKN</name>
          <description>ADC DRC Linear Slope Low Setting Register</description>
          <addressOffset>0x288</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LINEAR_SLOPE</name>
              <description>The slope of the linear which determine by the equation that Kn = 1/R, there, R is the ratio of the linear, which always is interger . The format is 8.24. (1:1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LKl</name>
          <description>ADC DRC Limiter Slope Low Setting Register</description>
          <addressOffset>0x260</addressOffset>
          <resetValue>0x1EB8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_SLOPE</name>
              <description>The slope of the limiter which determine by the equation that Kl = 1/R, there, R is the ratio of the limiter, which always is interger. The format is 8.24. (50 :1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LLT</name>
          <description>ADC DRC Limiter Theshold Low Setting Register</description>
          <addressOffset>0x258</addressOffset>
          <resetValue>0x34F0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_THRESHOLD</name>
              <description>The limiter threshold setting, which set by the equation that LTin = -LT/6.0206, The format is 8.24. (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LOPC</name>
          <description>ADC DRC Compressor Low Output at Compressor Threshold  Register</description>
          <addressOffset>0x250</addressOffset>
          <resetValue>0x2C3F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_OUTPUT</name>
              <description>The output of the compressor which determine by the equation OPC/6.0206 The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LOPE</name>
          <description>ADC DRC Expander Low Output at Expander Threshold</description>
          <addressOffset>0x280</addressOffset>
          <resetValue>0x8D6E</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_OUTPUT</name>
              <description>The output of the expander which determine by equation OPE/6.0206. The format is 8.24  (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LOPL</name>
          <description>ADC DRC Limiter Low Output at Limiter Threshold</description>
          <addressOffset>0x268</addressOffset>
          <resetValue>0xFBA7</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_OUTPUT</name>
              <description>The output of the limiter which determine by equation OPT/6.0206. The format is 8.24  (-25dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LPFHAT</name>
          <description>ADC DRC Left Peak Filter High Attack Time Coef Register</description>
          <addressOffset>0x20C</addressOffset>
          <resetValue>0xB</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms)  </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LPFHRT</name>
          <description>ADC DRC Left Peak Filter High Release Time Coef Register</description>
          <addressOffset>0x21C</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_RELEASE_TIME</name>
              <description>The left peak filter release time parameter setting, which determine by the equation that RT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LPFLAT</name>
          <description>ADC DRC Left Peak Filter Low Attack Time Coef Register</description>
          <addressOffset>0x210</addressOffset>
          <resetValue>0x77BF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LPFLRT</name>
          <description>ADC DRC Left Peak Filter Low Release Time Coef Register</description>
          <addressOffset>0x220</addressOffset>
          <resetValue>0xE1F8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_RELEASE_TIME</name>
              <description>The left peak filter release time parameter setting, which determine by the equation that RT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LRMSHAT</name>
          <description>ADC DRC Left RMS Filter High Coef Register</description>
          <addressOffset>0x22C</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The left RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.    (10ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_LRMSLAT</name>
          <description>ADC DRC Left RMS Filter Low Coef Register</description>
          <addressOffset>0x230</addressOffset>
          <resetValue>0x2BAF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The left RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.   (10ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_MNGHS</name>
          <description>AC_ADC_DRC_MNGHS</description>
          <addressOffset>0x2A4</addressOffset>
          <resetValue>0xF95B</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MIN_GAIN</name>
              <description>The min gain setting which determine by equation MXG/6.0206. The format is 8.24 and must -60dB MNG  -30dB  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_MNGLS</name>
          <description>ADC DRC MIN Gain High Setting Register</description>
          <addressOffset>0x2A8</addressOffset>
          <resetValue>0x2C3F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MIN_GAIN</name>
              <description>The min gain setting which determine by equation MNG/6.0206. The format is 8.24 and must -60dB MNG  -30dB  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_MXGHS</name>
          <description>ADC DRC MAX Gain High Setting Register</description>
          <addressOffset>0x29C</addressOffset>
          <resetValue>0xFE56</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MAX_GAIN</name>
              <description>The max gain setting which determine by equation MXG/6.0206. The format is 8.24 and must -20dB &lt;MXG&lt; 30dB (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_MXGLS</name>
          <description>ADC DRC MIN Gain Low Setting Register</description>
          <addressOffset>0x2A0</addressOffset>
          <resetValue>0xCB0F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MAX_GAIN</name>
              <description>The max gain setting which determine by equation MXG/6.0206. The format is 8.24 and must -20dB &lt;MXG &lt; 30dB (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_RPFHAT</name>
          <description>ADC DRC Right Peak Filter High Attack Time Coef Register</description>
          <addressOffset>0x214</addressOffset>
          <resetValue>0xB</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_RPFHRT</name>
          <description>ADC DRC Right Peak filter High Release Time Coef Register</description>
          <addressOffset>0x224</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that RT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_RPFLAT</name>
          <description>ADC DRC Peak Filter Low Attack Time Coef Register</description>
          <addressOffset>0x218</addressOffset>
          <resetValue>0x77BF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_RPFLRT</name>
          <description>ADC DRC Right Peak filter Low Release Time Coef Register</description>
          <addressOffset>0x228</addressOffset>
          <resetValue>0xE1F8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_RELEASE_TIME</name>
              <description>The left peak filter release time parameter setting, which determine by the equation that AT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_RRMSHAT</name>
          <description>ADC DRC Right RMS Filter High Coef Register</description>
          <addressOffset>0x234</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>RIGHT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The right RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.    (10ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_RRMSLAT</name>
          <description>ADC DRC Right RMS Filter Low Coef Register</description>
          <addressOffset>0x238</addressOffset>
          <resetValue>0x2BAF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>RIGHT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The right RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.   (10ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_SFHAT</name>
          <description>ADC DRC Smooth filter Gain High Attack Time Coef Register</description>
          <addressOffset>0x28C</addressOffset>
          <resetValue>0x2</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>SMOOTH_FILTER_ATTACK_TIME</name>
              <description>The smooth filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tr). The format is 3.24. (5ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_SFHRT</name>
          <description>ADC  DRC  Smooth  filter  Gain  High  Release  Time  Coef  Register</description>
          <addressOffset>0x294</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE_TIME</name>
              <description>The gain smooth filter release time parameter setting, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (200ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_SFLAT</name>
          <description>ADC DRC Smooth filter Gain Low Attack Time Coef Register</description>
          <addressOffset>0x290</addressOffset>
          <resetValue>0x5600</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>SMOOTH_FILTER_ATTACK_TIME</name>
              <description>The smooth filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tr). The format is 3.24. (5ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_DRC_SFLRT</name>
          <description>ADC DRC Smooth filter Gain Low Release Time Coef Register</description>
          <addressOffset>0x298</addressOffset>
          <resetValue>0xF04</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE_TIME</name>
              <description>The gain smooth filter release time parameter setting, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (200ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_FIFOC</name>
          <description>ADC FIFO Control Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0xF00</resetValue>
          <resetMask>0xF1071FDB</resetMask>
          <fields>
            <field>
              <name>ADFS</name>
              <description>Sample Rate of ADC 
000: 48KHz 
010: 24KHz 
100: 12KHz 
110: Reserved 
001: 32KHz 
011: 16KHz 
101: 8KHz 
111: Reserved 44.1KHz/22.05KHz/11.025KHz can be supported by Audio PLL Configure Bit </description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_48KHz</name>
                  <description>48KHz</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_24KHz</name>
                  <description>24KHz</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_12KHz</name>
                  <description>12KHz</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_16KHz</name>
                  <description>16KHz</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8KHz</name>
                  <description>8KHz</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved 44.1KHz/22.05KHz/11.025KHz can be supported by Audio PLL Configure Bit</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_AD</name>
              <description>ADC Digital Part Enable 
0: Disable 
1: Enable </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_MODE</name>
              <description>RX FIFO Output Mode (Mode 0, 1) 
0: Expanding `0` at LSB of TX FIFO register 
1: Expanding received sample sign bit at MSB of TX FIFO register For 24-bits received audio sample: Mode 0: RXDATA[31:0] = {FIFO_O[23:0], 8`h0} Mode 1: Reserved For 16-bits received audio sample: Mode 0: RXDATA[31:0] = {FIFO_O[23:8], 16`h0} Mode 1: RXDATA[31:0] = {16{FIFO_O[23]}, FIFO_O[23:8]} </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Expanding_`0`</name>
                  <description>Expanding `0` at LSB of TX FIFO register</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Expanding_received_sample</name>
                  <description>Expanding received sample sign bit at MSB of TX FIFO register For 24-bits received audio sample: Mode 0: RXDATA[31:0] = {FIFO_O[23:0], 8`h0} Mode 1: Reserved For 16-bits received audio sample: Mode 0: RXDATA[31:0] = {FIFO_O[23:8], 16`h0} Mode 1: RXDATA[31:0] = {16{FIFO_O[23]}, FIFO_O[23:8]}</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADCFDT</name>
              <description>ADC FIFO Delay Time For writing Data after EN_AD 00:5ms 01:10ms 10:20ms 11:30ms </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADCDFEN</name>
              <description>ADC FIFO Delay Function For writing Data after EN_AD 
0: Disable 
1: Enable </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TRG_LEVEL</name>
              <description>RX FIFO Trigger Level (RXTL[4:0]) Interrupt and DMA request trigger level for RX FIFO normal condition IRQ/DRQ Generated when WLEVEL &gt; RXTL[4:0] Notes: WLEVEL represents the number of valid samples in the RX FIFO </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADC_MONO_EN</name>
              <description>ADC Mono Enable 
0: Stereo, 16 levels FIFO 
1: mono, 32 levels FIFO When set to `1`, Only left channel samples are recorded </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stereo</name>
                  <description>Stereo, 16 levels FIFO</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>mono</name>
                  <description>mono, 32 levels FIFO When set to `1`, Only left channel samples are recorded</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_SAMPLE_BITS</name>
              <description>Receiving Audio Sample Resolution 
0: 16 bits 
1: 24 bits </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_16_bits</name>
                  <description>16 bits</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_24_bits</name>
                  <description>24 bits</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC_DRQ_EN</name>
              <description>ADC FIFO Data Available DRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC_IRQ_EN</name>
              <description>ADC FIFO Data Available IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC_OVERRUN_IRQ_EN</name>
              <description>ADC FIFO Over Run IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC_FIFO_FLUSH</name>
              <description>ADC FIFO Flush Write `1` to flush TX FIFO, self clear to `0` </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_FIFOS</name>
          <description>ADC FIFO Status Register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x803F0A</resetMask>
          <fields>
            <field>
              <name>RXA</name>
              <description>RX FIFO Available 
0: No available data in RX FIFO 
1: More than one sample in RX FIFO (&gt;= 1 word) </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_available</name>
                  <description>No available data in RX FIFO</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>More</name>
                  <description>More than one sample in RX FIFO (&gt;= 1 word)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RXA_CNT</name>
              <description>RX FIFO Available Sample Word Counter </description>
              <bitRange>[13:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RXA_INT</name>
              <description>RX FIFO Data Available Pending Interrupt 
0: No Pending IRQ 
1: Data Available Pending IRQ Write `1` to clear this interrupt or automatic clear if interrupt condition fails </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_Pending</name>
                  <description>No Pending IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Data</name>
                  <description>Data Available Pending IRQ Write `1` to clear this interrupt or automatic clear if interrupt condition fails</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RXO_INT</name>
              <description>RX FIFO Overrun Pending Interrupt 
0: No Pending IRQ 
1: FIFO Overrun Pending IRQ Write `1` to clear this interrupt </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_Pending</name>
                  <description>No Pending IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO</name>
                  <description>FIFO Overrun Pending IRQ Write `1` to clear this interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_ADC_RXDATA</name>
          <description>ADC RX Data Register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RX_DATA</name>
              <description>RX Sample Host can get one sample by reading this register. The left channel sample data is first and then the right channel sample. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_CNT</name>
          <description>DAC TX FIFO Counter Register</description>
          <addressOffset>0x40</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TX_CNT</name>
              <description>TX Sample Counter The audio sample number of sending into TXFIFO. When one sample is put into TXFIFO by DMA or by host IO, the TX sample counter register increases by one. The TX sample counter register can be set to any initial valve at any time. After been updated by the initial value, the counter register should count on base of this initial value Notes: It is used for Audio/ Video Synchronization </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DAP_CTR</name>
          <description>DAC DAP Control Register</description>
          <addressOffset>0x60</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8000C000</resetMask>
          <fields>
            <field>
              <name>DDAP</name>
              <description>_EN DAP for dac Enable 0 : bypass 1 : enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DDAP_DRC_EN</name>
              <description>DRC enable control 0:disable 1:enable </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DDAP_HPF_EN</name>
              <description>HPF enable control 0:disable 1:enable </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DG</name>
          <description>DAC Debug Register</description>
          <addressOffset>0x48</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF40</resetMask>
          <fields>
            <field>
              <name>DAC_MODU_SELECT</name>
              <description>DAC Modulator Debug 
0: DAC Modulator Normal Mode 
1: DAC Modulator Debug Mode </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DAC_Modulator_Normal</name>
                  <description>DAC Modulator Normal Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC_Modulator_Debug</name>
                  <description>DAC Modulator Debug Mode</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DAC_PATTERN_SELECT</name>
              <description>DAC Pattern Select 
00: Normal (Audio Sample from TX FIFO) 
01: -6 dB Sin wave 
10: -60 dB Sin wave 
11: silent wave </description>
              <bitRange>[10:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal (Audio Sample from TX FIFO)</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_minus_6_dB</name>
                  <description>-6 dB Sin wave</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_minus_60_dB</name>
                  <description>-60 dB Sin wave</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>silent</name>
                  <description>silent wave</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CODEC_CLK_SELECT</name>
              <description>CODEC Clock Source Select 
0: CODEC Clock from PLL 
1: CODEC Clock from OSC (For Debug) </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CODEC_Clock_from_PLL</name>
                  <description>CODEC Clock from PLL</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CODEC_Clock_from_OSC</name>
                  <description>CODEC Clock from OSC (For Debug)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DA_SWP</name>
              <description>DAC output channel swap enable 0:Disable 1:Enable </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DPC</name>
          <description>DAC Digital Part Control Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x9E07F000</resetMask>
          <fields>
            <field>
              <name>EN_DAC</name>
              <description>DAC Digital Part Enable 0 : Disable 1 : Enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MODQU</name>
              <description>Internal DAC Quantization Levels Levels=[7*(21+MODQU[3:0])]/128 Default levels=7*21/128=1.15 </description>
              <bitRange>[28:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HPF_EN</name>
              <description>High Pass Filter Enable 
0: Disable 
1: Enable </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DVOL</name>
              <description>Digital volume control: DVC, ATT=DVC[5:0]*(-1.16Db) 64 steps, -1.16Db/step </description>
              <bitRange>[17:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_CTRL</name>
          <description>DAC DRC Control Register</description>
          <addressOffset>0x108</addressOffset>
          <resetValue>0x80</resetValue>
          <resetMask>0xBFFF</resetMask>
          <fields>
            <field>
              <name>DRC_DELAY_BUFFER_DATA_OUTPUT</name>
              <description>DRC delay buffer data output state when drc delay function is enble and the drc funciton disable. After disable drc function and this bit go to 0, the user should write the drc delay function bit to 0; 0 : not complete 1 : is complete </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SIGNAL_DELAY_TIME</name>
              <description>Signal delay time setting 6'h00 : (8x1)fs 6'h01 : (8x2)fs 6'h02 : (8x3)fs ---------------------------------------- 6'h2e : (8*47)fs 6'h2f : (8*48)fs 6'h30 -- 6'h3f : (8*48)fs Delay time = 8*(n+1)fs, n&lt;6'h30; When the delay function is disable, the signal delay time is unused. </description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DELAY_BUFFER_USE_OR_NOT</name>
              <description>The delay buffer use or not when the drc disable and the drc buffer data output completely 0 : don't use the buffer  1 : use the buffer  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_GAIN_MAX_LIMIT_ENABLE</name>
              <description>DRC gain max limit enable 0 : disable 1 : enable </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_GAIN_MIN_LIMIT_ENABLE</name>
              <description>DRC gain min limit enable. when this fuction enable, it will overwrite the noise detect funciton. 0 : disable 1 : enable </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONTROL_THE_DRC_TO_DETECT</name>
              <description>Control the drc to detect noise when ET enable  0 : disable 1 : enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SIGNAL_FUNCTION_SELECT</name>
              <description>Signal function Select 0 : RMS filter 1 : Peak filter When Signal function Select Peak filter, the RMS parameter is unused. (AC_DRC_LRMSHAT / AC_DRC_LRMSLAT / AC_DRC_LRMSHAT / AC_DRC_LRMSLAT) When Signal function Select RMS filter, the Peak filter parameter is unused.(AC_DRC_LPFHAT / AC_DRC_LPFLAT / AC_DRC_RPFHAT / AC_DRC_RPFLAT / AC_DRC_LPFHRT / AC_DRC_LPFLRT / AC_DRC_RPFHRT / AC_DRC_RPFLRT) </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DELAY_FUNCTION_ENABLE</name>
              <description>Delay function enable 0 : disable 1 : enable When the Delay function enable is disable, the Signal delay time is unused. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_LT_ENABLE</name>
              <description>DRC LT enable 0 : disable 1 : enable When the DRC LT is disable the LT, Kl and OPL parameter is unused. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRC_ET_ENABLE</name>
              <description>DRC ET enable 0 : disable 1 : enable When the DRC ET is disable the ET, Ke and OPE parameter is unused. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_EPSHC</name>
          <description>DAC DRC Expander Smooth Time High Coef Register</description>
          <addressOffset>0x1AC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE</name>
              <description>The gain smooth filter release and attack time parameter setting in expander region, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (30ms) </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_EPSLC</name>
          <description>DAC DRC Expander Smooth Time Low Coef Register</description>
          <addressOffset>0x1B0</addressOffset>
          <resetValue>0x640C</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE</name>
              <description>The gain smooth filter release and attack time parameter setting in expander region, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (30ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HCT</name>
          <description>DAC DRC Compressor Theshold High Setting Register</description>
          <addressOffset>0x13C</addressOffset>
          <resetValue>0x6A4</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_THRESHOLD</name>
              <description>The compressor threshold setting, which set by the equation that CTin = -CT/6.0206. The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HET</name>
          <description>DAC DRC Expander Theshold High Setting Register</description>
          <addressOffset>0x16C</addressOffset>
          <resetValue>0xBA0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_THRESHOLD</name>
              <description>The expander threshold setting, which set by the equation that ETin = -ET/6.0206, The format is 8.24. (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HHPFC</name>
          <description>DAC DRC High HPF Coef Register</description>
          <addressOffset>0x100</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>HPF</name>
              <description>coefficient setting and the data is 3.24 format.  </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HKC</name>
          <description>DAC DRC Compressor Slope High Setting Register</description>
          <addressOffset>0x144</addressOffset>
          <resetValue>0x80</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_SLOPE</name>
              <description>The slope of the compressor which determine by the equation that Kc = 1/R, there, R is the ratio of the compressor, which always is interger. The format is 8.24. (2 : 1) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HKE</name>
          <description>DAC DRC Expander Slope High Setting Register</description>
          <addressOffset>0x174</addressOffset>
          <resetValue>0x500</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_SLOPE</name>
              <description>The slope of the expander which determine by the equation that Ke = 1/R, there, R is the ratio of the expander, which always is interger and the ke must larger than 50. The format is 8.24. (1:5) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HKN</name>
          <description>DAC DRC Linear Slope High Setting Register</description>
          <addressOffset>0x184</addressOffset>
          <resetValue>0x100</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>LINEAR_SLOPE</name>
              <description>The slope of the linear which determine by the equation that Kn = 1/R, there, R is the ratio of the linear, which always is interger . The format is 8.24. (1:1) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HKl</name>
          <description>DAC DRC Limiter Slope High Setting Register</description>
          <addressOffset>0x15C</addressOffset>
          <resetValue>0x5</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_SLOPE</name>
              <description>The slope of the limiter which determine by the equation that Kl = 1/R, there, R is the ratio of the limiter, which always is interger. The format is 8.24. (50 :1) </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HLT</name>
          <description>DAC DRC Limiter Theshold High Setting Register</description>
          <addressOffset>0x154</addressOffset>
          <resetValue>0x1A9</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_THRESHOLD</name>
              <description>The limiter threshold setting, which set by the equation that LTin = -LT/6.0206, The format is 8.24. (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HOPC</name>
          <description>DAC DRC Compressor High Output at Compressor Threshold  Register</description>
          <addressOffset>0x14C</addressOffset>
          <resetValue>0xF95B</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_OUTPUT</name>
              <description>The output of the compressor which determine by the equation -OPC/6.0206 The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HOPE</name>
          <description>DAC DRC Expander High Output at Expander Threshold</description>
          <addressOffset>0x17C</addressOffset>
          <resetValue>0xF45F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_OUTPUT</name>
              <description>The output of the expander which determine by equation OPE/6.0206. The format is 8.24  (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HOPL</name>
          <description>DAC DRC Limiter High Output at Limiter Threshold</description>
          <addressOffset>0x164</addressOffset>
          <resetValue>0xFBD8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_OUTPUT</name>
              <description>The output of the limiter which determine by equation OPT/6.0206. The format is 8.24  (-25dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HPFHGAIN</name>
          <description>DAC DRC HPF Gain High</description>
          <addressOffset>0x1B8</addressOffset>
          <resetValue>0x100</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>HPF_COEFFICIENT_GAIN</name>
              <description>The gain of the hpf coefficient setting which format is 3.24.(gain = 1) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_HPFLGAIN</name>
          <description>DAC DRC HPF Gain Low</description>
          <addressOffset>0x1BC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>HPF_COEFFICIENT_GAIN</name>
              <description>The gain of the hpf coefficient setting which format is 3.24.(gain = 1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LCT</name>
          <description>DAC DRC Compressor Slope High Setting Register</description>
          <addressOffset>0x140</addressOffset>
          <resetValue>0xD3C0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_THRESHOLD</name>
              <description>The compressor threshold setting, which set by the equation that CTin = -CT/6.0206. The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LET</name>
          <description>DAC DRC Expander Theshold Low Setting Register</description>
          <addressOffset>0x170</addressOffset>
          <resetValue>0x7291</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_THRESHOLD</name>
              <description>The expander threshold setting, which set by the equation that ETin = -ET/6.0206, The format is 8.24. (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LHPFC</name>
          <description>DAC DRC Low HPF Coef Register</description>
          <addressOffset>0x104</addressOffset>
          <resetValue>0xFAC1</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>HPF</name>
              <description>coefficient setting and the data is 3.24 format. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LKC</name>
          <description>DAC DRC Compressor Slope Low Setting Register</description>
          <addressOffset>0x148</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_SLOPE</name>
              <description>The slope of the compressor which determine by the equation that Kc = 1/R, there, R is the ratio of the compressor, which always is interger. The format is 8.24. (2 : 1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LKE</name>
          <description>DAC DRC Expander Slope Low Setting Register</description>
          <addressOffset>0x178</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_SLOPE</name>
              <description>The slope of the expander which determine by the equation that Ke = 1/R, there, R is the ratio of the expander, which always is interger and the ke must larger than 50. The format is 8.24. (1:5) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LKN</name>
          <description>DAC DRC Linear Slope Low Setting Register</description>
          <addressOffset>0x188</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LINEAR_SLOPE</name>
              <description>The slope of the linear which determine by the equation that Kn = 1/R, there, R is the ratio of the linear, which always is interger . The format is 8.24. (1:1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LKl</name>
          <description>DAC DRC Limiter Slope Low Setting Register</description>
          <addressOffset>0x160</addressOffset>
          <resetValue>0x1EB8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_SLOPE</name>
              <description>The slope of the limiter which determine by the equation that Kl = 1/R, there, R is the ratio of the limiter, which always is interger. The format is 8.24. (50 :1) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LLT</name>
          <description>DAC DRC Limiter Theshold Low Setting Register</description>
          <addressOffset>0x158</addressOffset>
          <resetValue>0x34F0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_THRESHOLD</name>
              <description>The limiter threshold setting, which set by the equation that LTin = -LT/6.0206, The format is 8.24. (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LOPC</name>
          <description>DAC DRC Compressor Low Output at Compressor Threshold  Register</description>
          <addressOffset>0x150</addressOffset>
          <resetValue>0x2C3F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>COMPRESSOR_OUTPUT</name>
              <description>The output of the compressor which determine by the equation OPC/6.0206 The format is 8.24  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LOPE</name>
          <description>DAC DRC Expander Low Output at Expander Threshold</description>
          <addressOffset>0x180</addressOffset>
          <resetValue>0x8D6E</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>EXPANDER_OUTPUT</name>
              <description>The output of the expander which determine by equation OPE/6.0206. The format is 8.24  (-70dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LOPL</name>
          <description>DAC DRC Limiter Low Output at Limiter Threshold</description>
          <addressOffset>0x168</addressOffset>
          <resetValue>0xFBA7</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LIMITER_OUTPUT</name>
              <description>The output of the limiter which determine by equation OPT/6.0206. The format is 8.24  (-25dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LPFHAT</name>
          <description>DAC DRC Left Peak Filter High Attack Time Coef Register</description>
          <addressOffset>0x10C</addressOffset>
          <resetValue>0xB</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms)  </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LPFHRT</name>
          <description>DAC DRC Left Peak Filter High Release Time Coef Register</description>
          <addressOffset>0x11C</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_RELEASE_TIME</name>
              <description>The left peak filter release time parameter setting, which determine by the equation that RT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LPFLAT</name>
          <description>DAC DRC Left Peak Filter Low Attack Time Coef Register</description>
          <addressOffset>0x110</addressOffset>
          <resetValue>0x77BF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LPFLRT</name>
          <description>DAC DRC Left Peak Filter Low Release Time Coef Register</description>
          <addressOffset>0x120</addressOffset>
          <resetValue>0xE1F8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_RELEASE_TIME</name>
              <description>The left peak filter release time parameter setting, which determine by the equation that RT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LRMSHAT</name>
          <description>DAC DRC Left RMS Filter High Coef Register</description>
          <addressOffset>0x12C</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The left RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.    (10ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_LRMSLAT</name>
          <description>DAC DRC Left RMS Filter Low Coef Register</description>
          <addressOffset>0x130</addressOffset>
          <resetValue>0x2BAF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The left RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.   (10ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_MNGHS</name>
          <description>DAC DRC MIN Gain High Setting Register</description>
          <addressOffset>0x1A4</addressOffset>
          <resetValue>0xF95B</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MIN_GAIN</name>
              <description>The min gain setting which determine by equation MXG/6.0206. The format is 8.24 and must -60dB MNG  -30dB  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_MNGLS</name>
          <description>DAC DRC MIN Gain Low Setting Register</description>
          <addressOffset>0x1A8</addressOffset>
          <resetValue>0x2C3F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MIN_GAIN</name>
              <description>The min gain setting which determine by equation MNG/6.0206. The format is 8.24 and must -60dB MNG  -30dB  (-40dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_MXGHS</name>
          <description>DAC DRC MAX Gain High Setting Register</description>
          <addressOffset>0x19C</addressOffset>
          <resetValue>0xFE56</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MAX_GAIN</name>
              <description>The max gain setting which determine by equation MXG/6.0206. The format is 8.24 and must -20dB &lt;MXG&lt; 30dB (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_MXGLS</name>
          <description>DAC DRC MAX Gain Low Setting Register</description>
          <addressOffset>0x1A0</addressOffset>
          <resetValue>0xCB0F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MAX_GAIN</name>
              <description>The max gain setting which determine by equation MXG/6.0206. The format is 8.24 and must -20dB &lt;MXG &lt; 30dB (-10dB) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_RPFHAT</name>
          <description>DAC DRC Right Peak Filter High Attack Time Coef Register</description>
          <addressOffset>0x114</addressOffset>
          <resetValue>0xB</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_RPFHRT</name>
          <description>DAC DRC Right Peak filter High Release Time Coef Register</description>
          <addressOffset>0x124</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that RT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_RPFLAT</name>
          <description>DAC DRC Peak Filter Low Attack Time Coef Register</description>
          <addressOffset>0x118</addressOffset>
          <resetValue>0x77BF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_ATTACK_TIME</name>
              <description>The left peak filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/ta). The format is 3.24.   (1ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_RPFLRT</name>
          <description>DAC DRC Right Peak filter Low Release Time Coef Register</description>
          <addressOffset>0x128</addressOffset>
          <resetValue>0xE1F8</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LEFT_PEAK_FILTER_RELEASE_TIME</name>
              <description>The left peak filter release time parameter setting, which determine by the equation that AT = exp(-2.2Ts/tr). The format is 3.24.   (100ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_RRMSHAT</name>
          <description>DAC DRC Right RMS Filter High Coef Register</description>
          <addressOffset>0x134</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>RIGHT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The right RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.    (10ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_RRMSLAT</name>
          <description>DAC DRC Right RMS Filter Low Coef Register</description>
          <addressOffset>0x138</addressOffset>
          <resetValue>0x2BAF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>RIGHT_RMS_FILTER_AVERAGE_TIME</name>
              <description>The right RMS filter average time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tav). The format is 3.24.   (10ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_SFHAT</name>
          <description>DAC DRC Smooth filter Gain High Attack Time Coef Register</description>
          <addressOffset>0x18C</addressOffset>
          <resetValue>0x2</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>SMOOTH_FILTER_ATTACK_TIME</name>
              <description>The smooth filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tr). The format is 3.24. (5ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_SFHRT</name>
          <description>DAC  DRC  Smooth  filter  Gain  High  Release  Time  Coef  Register</description>
          <addressOffset>0x194</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE_TIME</name>
              <description>The gain smooth filter release time parameter setting, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (200ms) </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_SFLAT</name>
          <description>DAC DRC Smooth filter Gain Low Attack Time Coef Register</description>
          <addressOffset>0x190</addressOffset>
          <resetValue>0x5600</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>SMOOTH_FILTER_ATTACK_TIME</name>
              <description>The smooth filter attack time parameter setting, which determine by the equation that AT = 1-exp(-2.2Ts/tr). The format is 3.24. (5ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_DRC_SFLRT</name>
          <description>DAC DRC Smooth filter Gain Low Release Time Coef Register</description>
          <addressOffset>0x198</addressOffset>
          <resetValue>0xF04</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>GAIN_SMOOTH_FILTER_RELEASE_TIME</name>
              <description>The gain smooth filter release time parameter setting, which determine by the equation that RT = 1-exp(-2.2Ts/tr). The format is 3.24. (200ms) </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_FIFOC</name>
          <description>DAC FIFO Control Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0xF00</resetValue>
          <resetMask>0xF7607FFF</resetMask>
          <fields>
            <field>
              <name>DAC_FS</name>
              <description>Sample Rate Of DAC 
000: 48KHz  
010: 24KHz  
100: 12KHz  
110: 192KHz 
001: 32KHz  
011: 16KHz  
101: 8KHz  
111: 96KHz 44.1KHz/22.05KHz/11.025KHz can be supported by Audio PLL Configure Bit </description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_48KHz</name>
                  <description>48KHz</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_24KHz</name>
                  <description>24KHz</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_12KHz</name>
                  <description>12KHz</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_192KHz</name>
                  <description>192KHz</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_16KHz</name>
                  <description>16KHz</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8KHz</name>
                  <description>8KHz</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_96KHz</name>
                  <description>96KHz 44.1KHz/22.05KHz/11.025KHz can be supported by Audio PLL Configure Bit</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FIR_VER</name>
              <description>FIR Version 
0: 64-Tap FIR; 1: 32-Tap FIR </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_64_minus_Tap</name>
                  <description>64-Tap FIR; 1: 32-Tap FIR</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEND_LASAT</name>
              <description>Audio sample select when TX FIFO under run 
0: Sending zero 
1: Sending last audio sample </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Sending_zero</name>
                  <description>Sending zero</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sending_last</name>
                  <description>Sending last audio sample</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_MODE</name>
              <description>For 24-bits transmitted audio sample: 00/10: FIFO_I[23:0] = {TXDATA[31:8]} 01/11: Reserved For 16-bits transmitted audio sample: 00/10: FIFO_I[23:0] = {TXDATA[31:16], 8`b0} 01/11: FIFO_I[23:0] = {TXDATA[15:0], 8`b0} </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DAC_DRQ_CLR_CNT</name>
              <description>When TX FIFO Available Room Less Than Or Equal N, DRQ Request Will Be De-Asserted. N Is Defined Here:  
00: IRQ/DRQ De-Asserted When WLEVEL &gt; TXTL 
01: 4 
10: 8 
11: 16 </description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>IRQ_slash_DRQ</name>
                  <description>IRQ/DRQ De-Asserted When WLEVEL &gt; TXTL</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_4</name>
                  <description>4</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8</name>
                  <description>8</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_16</name>
                  <description>16</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_TRIG_LEVEL</name>
              <description>TX FIFO Empty Trigger Level (TXTL[12:0]) Interrupt and DMA request trigger level for TX FIFO normal condition. IRQ/DRQ Generated when WLEVEL &lt;= TXTL Notes: 1. WLEVEL represents the number of valid samples in the TX FIFO 2. Only TXTL[6:0] valid when TXMODE = 0 </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADDA_LOOP_EN</name>
              <description>ADDA Loop Enable 
0: Disable 
1: Enable </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DAC_MONO_EN</name>
              <description>DAC Mono Enable 
0: Stereo, 64 Levels FIFO 
1: Mono, 128 Levels FIFO When Enabled, L &amp; R Channel Send Same Data </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stereo</name>
                  <description>Stereo, 64 Levels FIFO</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mono</name>
                  <description>Mono, 128 Levels FIFO When Enabled, L &amp; R Channel Send Same Data</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_SAMPLE_BITS</name>
              <description>Transmitting Audio Sample Resolution 
0: 16 bits 
1: 24 bits </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_16_bits</name>
                  <description>16 bits</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_24_bits</name>
                  <description>24 bits</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DAC_DRQ_EN</name>
              <description>DAC FIFO Empty DRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DAC_IRQ_EN</name>
              <description>DAC FIFO Empty IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_UNDERRUN_IRQ_EN</name>
              <description>DAC FIFO Under Run IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_OVERRUN_IRQ_EN</name>
              <description>DAC FIFO Over Run IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_FLUSH</name>
              <description>DAC FIFO Flush Write `1` To Flush TX FIFO, Self Clear to `0` </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_FIFOS</name>
          <description>DAC FIFO Status Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x808008</resetValue>
          <resetMask>0xFFFF0E</resetMask>
          <fields>
            <field>
              <name>TX_EMPTY</name>
              <description>TX FIFO Empty 
0: No room for new sample in TX FIFO 
1: More than one room for new sample in TX FIFO (&gt;= 1 word) </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_room</name>
                  <description>No room for new sample in TX FIFO</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>More</name>
                  <description>More than one room for new sample in TX FIFO (&gt;= 1 word)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TXE_CNT</name>
              <description>TX FIFO Empty Space Word Counter </description>
              <bitRange>[22:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TXE_INT</name>
              <description>TX FIFO Empty Pending Interrupt 
0: No Pending IRQ 
1: FIFO Empty Pending Interrupt Write `1` to clear this interrupt or automatic clear if interrupt condition fails </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_Pending</name>
                  <description>No Pending IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO</name>
                  <description>FIFO Empty Pending Interrupt Write `1` to clear this interrupt or automatic clear if interrupt condition fails</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TXU_INT</name>
              <description>TX FIFO Under run Pending Interrupt 
0: No Pending Interrupt 
1: FIFO Under run Pending Interrupt Write `1` to clear this interrupt </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_Pending</name>
                  <description>No Pending Interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO</name>
                  <description>FIFO Under run Pending Interrupt Write `1` to clear this interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TXO_INT</name>
              <description>TX FIFO Overrun Pending Interrupt 
0: No Pending Interrupt 
1: FIFO Overrun Pending Interrupt Write `1` to clear this interrupt </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_Pending</name>
                  <description>No Pending Interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO</name>
                  <description>FIFO Overrun Pending Interrupt Write `1` to clear this interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_DAC_TXDATA</name>
          <description>DAC TX Data Register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TX_DATA</name>
              <description>Transmitting left, right channel sample data should be written this register one by one. The left channel sample data is first and then the right channel sample </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AC_PR_CFG</name>
          <description>AC Parameter Configuration Register</description>
          <addressOffset>0x400</addressOffset>
          <resetValue>0x10000000</resetValue>
          <resetMask>0x111FFFFF</resetMask>
          <fields>
            <field>
              <name>AC_PR_RST_AC_PR_RESET</name>
              <description>AC_PR_RST AC_PR Reset 
0: Assert 
1: De-assert</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AC_PR_RW_AC_PR_READ_OR</name>
              <description>AC_PR_RW AC_PR Read Or Write 
0: read 
1: write </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>read</name>
                  <description>read</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>write</name>
                  <description>write</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AC_PR_AC_PR_ADDRESS</name>
              <description>AC_PR _ADDR AC_PR Address [4:0] </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADDA_PR_ADDA_PR_WRITE</name>
              <description>ADDA_PR _WDAT ADDA_PR Write Data [7:0] </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ADDA_PR_ADDA_PR_READ</name>
              <description>ADDA_PR _RDAT ADDA_PR Read Data [7:0] </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HMIC_CTRL</name>
          <description>HMIC_CTRL</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>HMIC_M</name>
              <description>Debounce when key down or key up </description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_N</name>
              <description>Debounce when earphone plug in or pull out </description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_DATA_IRQ_MODE</name>
              <description>Hmic Data Irq Mode Select 
0: Hmic data irq once after key down 
1: Hmic data irq from key down, until key up </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Hmic_data_irq_once</name>
                  <description>Hmic data irq once after key down</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Hmic_data_irq_from_key</name>
                  <description>Hmic data irq from key down, until key up</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HMIC_TH1_HYSTERESIS</name>
              <description>Hmic Hysteresis Threshold1 
00: no Hysteresis 
01: Pull Out when Data &lt;= (Hmic_th2-1) 
10: Pull Out when Data &lt;= (Hmic_th2-2) 
11: Pull Out when Data &lt;= (Hmic_th2-3) </description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_PULLOUT_IRQ</name>
              <description>Hmic Earphone Pull out Irq Enable 
00: disable, 11: enable </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_PLUGIN_IRQ</name>
              <description>Hmic Earphone Plug in Irq Enable 
00: disable 11: enable </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_KEYUP_IRQ</name>
              <description>Hmic Key Up Irq Enable 
00: disable 11: enable </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_KEYDOWN_IRQ</name>
              <description>Hmic Key Down Irq Enable 
00: disable 11: enable </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_DATA_IRQ_EN</name>
              <description>Hmic Data Irq Enable 
00: disable 11: enable </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_SAMPLE_SELECT</name>
              <description>Down Sample Setting Select 
00: Down by 1, 128Hz 
01: Down by 2, 64Hz 
10: Down by 4, 32Hz 
11: Down by 8, 16Hz </description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Down_by_1</name>
                  <description>Down by 1, 128Hz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Down_by_2</name>
                  <description>Down by 2, 64Hz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Down_by_4</name>
                  <description>Down by 4, 32Hz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Down_by_8</name>
                  <description>Down by 8, 16Hz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HMIC_TH2_HYSTERESIS</name>
              <description>Hmic Hysteresis Threshold2 
0: no Hysteresis 
1: Key Up when Data &lt;= (Hmic_th2-1) </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_Hysteresis</name>
                  <description>no Hysteresis</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Key</name>
                  <description>Key Up when Data &lt;= (Hmic_th2-1)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HMIC_TH2</name>
              <description>Hmic_th2 for detecting Key down or Key up. </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HMIC_SF</name>
              <description>Hmic Smooth Filter setting 
00: by pass 
01: (x1+x2)/2 
10: (x1+x2+x3+x4)/4 
11: (x1+x2+x3+x4+ x5+x6+x7+x8)/8 </description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>by</name>
                  <description>by pass</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_openingparen_x1_plus_x2_closingparen__slash_2</name>
                  <description>(x1+x2)/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_openingparen_x1_plus_x2_plus_x3_plus_x4_closingparen__slash_4</name>
                  <description>(x1+x2+x3+x4)/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_openingparen_x1_plus_x2_plus_x3_plus_x4_plus_</name>
                  <description>(x1+x2+x3+x4+ x5+x6+x7+x8)/8</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>KEYUP_CLEAR</name>
              <description>Key Up Irq Pending bit auto clear when Key Down Irq 
0: don`t clear   1: auto clear </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>don`t</name>
                  <description>don`t clear</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>auto</name>
                  <description>auto clear</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HMIC_TH1</name>
              <description>Hmic_th1[4:0], detecting eraphone plug in or pull out. </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>CCU</name>
      <description>CCU</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C20000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>AC_DIG_CLK_REG</name>
          <description>AC Digital Clock Register</description>
          <addressOffset>0x140</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80000000</resetMask>
          <fields>
            <field>
              <name>SCLK_1X_GATING</name>
              <description>Gating Special Clock 
0: Clock is OFF 
1: Clock is ON SCLK = PLL_AUDIO Output. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON SCLK = PLL_AUDIO Output.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AHB1_APB1_CFG_REG</name>
          <description>AHB1_APB1_CFG_REG</description>
          <addressOffset>0x54</addressOffset>
          <resetValue>0x1010</resetValue>
          <resetMask>0x33F0</resetMask>
          <fields>
            <field>
              <name>AHB1_CLK_SRC_SEL</name>
              <description>00: LOSC 
01: OSC24M 
10: AXI 
11: PLL_PERIPH0/ AHB1_PRE_DIV </description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOSC</name>
                  <description>LOSC</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AXI</name>
                  <description>AXI</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0_slash_</name>
                  <description>PLL_PERIPH0/ AHB1_PRE_DIV</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>APB1_CLK_RATIO</name>
              <description>APB1 Clock Divide Ratio. APB1 clock source is AHB1 clock. 
00: /2 
01: /2 
10: /4 
11: /8 </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AHB1_PRE_DIV</name>
              <description>AHB1 Clock Pre Divide Ratio  
00: /1 
01: /2 
10: /3 
11: /4 </description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_3</name>
                  <description>/3</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB1_CLK_DIV_RATIO</name>
              <description>AHB1 Clock Divide Ratio. 
00: /1 
01: /2 
10: /4 
11: /8 </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AHB2_CFG_REG</name>
          <description>AHB2 Configuration Register</description>
          <addressOffset>0x5C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <field>
              <name>AHB2_CLK_CFG</name>
              <description>00: AHB1 Clock 
01: PLL_PERIPH0 / 2 
1X: / EMAC,USB OTG_EHCI0/OHCI0 and USB OTG_Device0 default clock source is AHB2 Clock. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>AHB1</name>
                  <description>AHB1 Clock</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0 / 2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_</name>
                  <description>/ EMAC,USB OTG_EHCI0/OHCI0 and USB OTG_Device0 default clock source is AHB2 Clock.</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>APB2_CFG_REG</name>
          <description>APB2_CFG_REG</description>
          <addressOffset>0x58</addressOffset>
          <resetValue>0x1000000</resetValue>
          <resetMask>0x303001F</resetMask>
          <fields>
            <field>
              <name>APB2_CLK_SRC_SEL</name>
              <description>APB2 Clock Source Select 
00: LOSC 
01: OSC24M 
1X: PLL_PERIPH0 This clock is used for some special module apbclk(UART TWI). Because these modules need special clock rate even if the apb1clk changed. </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOSC</name>
                  <description>LOSC</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0 This clock is used for some special module apbclk(UART TWI). Because these modules need special clock rate even if the apb1clk changed.</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_RAT_N</name>
              <description>Clock Pre Divide Ratio (n) The select clock source is pre-divided by 2^n. The divider is 1/2/4/8. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_RAT_M</name>
              <description>Clock Divide Ratio (m) The Pre Divide clock is divided by (m+1). The divider M is from 1 to 32. </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AVS_CLK_REG</name>
          <description>AVS Clock Register</description>
          <addressOffset>0x144</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80000000</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock 
0: Clock is OFF 
1: Clock is ON. SCLK= OSC24M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON. SCLK= OSC24M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_CLK_GATING_REG0</name>
          <description>Bus Clock Gating Register 0</description>
          <addressOffset>0x60</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x251A4760</resetMask>
          <fields>
            <field>
              <name>USB_OTG_OHCI_GATING</name>
              <description>USB OTG_OHCI_GATING. Gating Clock for USB OTG_OHCI 
0: Mask 
1: Pass </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USB_OTG_EHCI_GATING</name>
              <description>USB OTG_EHCI_GATING. Gating Clock For USB OTG_EHCI 
0: Mask 
1: Pass </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USB_OTG_DEVICE_GATING</name>
              <description>USB OTG_Device_GATING. Gating Clock For USB OTG_Device 
0: Mask 
1: Pass </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_GATING</name>
              <description>SPI0_GATING. Gating Clock For SPI0 
0: Mask 
1: Pass </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HSTMR_GATING</name>
              <description>HSTMR_GATING. Gating Clock For High Speed Timer 
0: Mask 
1: Pass </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EMAC_GATING</name>
              <description>EMAC_GATING. Gating Clock For EMAC 
0: Mask 
1: Pass </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DRAM_GATING</name>
              <description>DRAM_GATING. Gating Clock For DRAM 
0: Mask 
1: Pass </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MMC2_GATING</name>
              <description>MMC2_GATING. Gating Clock For MMC2 
0: Mask 
1: Pass </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MMC1_GATING</name>
              <description>MMC1_GATING. Gating Clock For MMC1 
0: Mask 
1: Pass </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MMC0_GATING</name>
              <description>MMC0_GATING. Gating Clock For MMC0 
0: Mask 
1: Pass </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA_GATING</name>
              <description>DMA_GATING. Gating Clock For DMA 
0: Mask 
1: Pass </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CE_GATING</name>
              <description>CE_GATING. Gating Clock For CE. 
0: Mask 
1: Pass </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_CLK_GATING_REG1</name>
          <description>Bus Clock Gating Register 1</description>
          <addressOffset>0x64</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1111</resetMask>
          <fields>
            <field>
              <name>DE_GATING</name>
              <description>0: Mask 
1: Pass. </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI_GATING</name>
              <description>Gating Clock For CSI 
0: Mask 
1: Pass </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON_GATING</name>
              <description>Gating Clock For TCON  
0: Mask 
1: Pass </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VE_GATING</name>
              <description>Gating Clock For VE 
0: Mask 
1: Pass </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_CLK_GATING_REG2</name>
          <description>Bus Clock Gating Register 2</description>
          <addressOffset>0x68</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1021</resetMask>
          <fields>
            <field>
              <name>PIO_GATING</name>
              <description>Gating Clock For PIO  
0: Mask 
1: Pass </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AC_DIG_GATING</name>
              <description>Gating Clock For AC Digital 
0: Mask 
1: Pass </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_CLK_GATING_REG3</name>
          <description>Bus Clock Gating Register 3</description>
          <addressOffset>0x6C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x70003</resetMask>
          <fields>
            <field>
              <name>UART2_GATING</name>
              <description>Gating Clock For UART2 
0: Mask 
1: Pass </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1_GATING</name>
              <description>Gating Clock For UART1  
0: Mask 
1: Pass </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_GATING</name>
              <description>Gating Clock For UART0 
0: Mask 
1: Pass </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TWI1_GATING</name>
              <description>Gating Clock For TWI1 
0: Mask 
1: Pass </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TWI0_GATING</name>
              <description>Gating Clock For TWI0 
0: Mask 
1: Pass </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_CLK_GATING_REG4</name>
          <description>Bus Clock Gating Register4</description>
          <addressOffset>0x70</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x81</resetMask>
          <fields>
            <field>
              <name>DBGSYS_GATING</name>
              <description>Gating Clock For DBGSYS 
0: Mask 
1: Pass </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EPHY_GATING</name>
              <description>Gating Clock For EPHY 
0: Mask 
1: Pass </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_SOFT_RST_REG0</name>
          <description>Bus Software Reset Register 0</description>
          <addressOffset>0x2C0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x251A4760</resetMask>
          <fields>
            <field>
              <name>USB_OTG_OHCI_RST</name>
              <description>USB OTG_OHCI_RST. USB OTG_OHCI Reset Control 
0: Assert 
1: De-assert </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USB_OTG_EHCI_RST</name>
              <description>USB OTG_EHCI_RST. USB OTG_EHCI Reset Control 
0: Assert 
1: De-assert </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USB_OTG_DEVICE_RST</name>
              <description>USB OTG_Device_RST. USB OTG_Device Reset Control 
0: Assert 
1: De-assert </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_RST</name>
              <description>SPI0_RST. SPI0 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HSTMR_RST</name>
              <description>HSTMR_RST. HSTMR Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EMAC_RST</name>
              <description>EMAC_RST. EMAC Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SDRAM_RST</name>
              <description>SDRAM_RST. SDRAM AHB Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SD2_RST</name>
              <description>SD2_RST. SD/MMC2 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SD1_RST</name>
              <description>SD1_RST. SD/MMC1 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SD0_RST</name>
              <description>SD0_RST. SD/MMC0 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA_RST</name>
              <description>DMA_RST. DMA Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CE_RST</name>
              <description>CE_RST. CE Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_SOFT_RST_REG1</name>
          <description>Bus Software Reset Register 1</description>
          <addressOffset>0x2C4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80001111</resetMask>
          <fields>
            <field>
              <name>DBGSYS_RST</name>
              <description>DBGSYS Reset 
0: Assert 
1: De-assert </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DE_RST</name>
              <description>DE Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI_RST</name>
              <description>CSI Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON_RST</name>
              <description>TCON Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VE_RST</name>
              <description>VE Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_SOFT_RST_REG2</name>
          <description>Bus Software Reset Register 2</description>
          <addressOffset>0x2C8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x5</resetMask>
          <fields>
            <field>
              <name>EPHY_RST</name>
              <description>EPHY Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_SOFT_RST_REG3</name>
          <description>Bus Software Reset Register 3</description>
          <addressOffset>0x2D0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1001</resetMask>
          <fields>
            <field>
              <name>AC_DIG_RST</name>
              <description>AC Digital Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUS_SOFT_RST_REG4</name>
          <description>Bus Software Reset Register 4</description>
          <addressOffset>0x2D8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x70003</resetMask>
          <fields>
            <field>
              <name>UART2_RST</name>
              <description>UART2 Reset.               
0: Assert 
1: De-assert </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1_RST</name>
              <description>UART1 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_RST</name>
              <description>UART0 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TWI1_RST</name>
              <description>TWI1 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TWI0_RST</name>
              <description>TWI0 Reset. 
0: Assert 
1: De-assert </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CE_CLK_REG</name>
          <description>CE Clock Register</description>
          <addressOffset>0x9C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8303000F</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock(Max Clock = 200MHz) 
0: Clock is OFF 
1: Clock is ON. SCLK = Clock Source/Divider N/Divider M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON. SCLK = Clock Source/Divider N/Divider M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
00: OSC24M 
01: PLL_PERIPH0 
10: / 
11: / </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0</description>
                  <value>0b01</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_N</name>
              <description>Clock Pre Divide Ratio (n) 
00: /1 
01: /2 
10: /4 
11: /8. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock divide ratio (m) The pre-divided clock is divided by (m+1). The divider M is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CPU_AXI_CFG_REG</name>
          <description>CPU/AXI Configuration Register</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0x10000</resetValue>
          <resetMask>0x30303</resetMask>
          <fields>
            <field>
              <name>CPU_CLK_SRC_SEL</name>
              <description>CPU Clock Source Select. CPU Clock = Clock Source 
00: LOSC 
01: OSC24M 
1X: PLL_CPU If the clock source is changed, at most to wait for 8 present running clock cycles. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOSC</name>
                  <description>LOSC</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_CPU</name>
                  <description>PLL_CPU If the clock source is changed, at most to wait for 8 present running clock cycles.</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CPU_APB_CLK_DIV</name>
              <description>00: /1 
01: /2 
1x: /4 Note: System APB clock source is CPU clock source. </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4 Note: System APB clock source is CPU clock source.</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AXI_CLK_DIV_RATIO</name>
              <description>AXI Clock Divide Ratio. AXI Clock source is CPU clock source. 
00: /1 
01: /2 
10: /3 
11: /4 </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_3</name>
                  <description>/3</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_CLK_REG</name>
          <description>CSI0_CLK_REG</description>
          <addressOffset>0x130</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8000871F</resetMask>
          <fields>
            <field>
              <name>CSI_MISC_SCLK_GATING</name>
              <description>Gating Special Clock 
0: Clock is OFF 
1: Clock is ON SCLK = OSC24M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON SCLK = OSC24M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI0_MCLK_GATING</name>
              <description>Gating Master Clock 
0: Clock is OFF 
1: Clock is ON SCLK =CSI0 Master Clock Source/ CSI0_MCLK_DIV_M. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON SCLK =CSI0 Master Clock Source/ CSI0_MCLK_DIV_M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI0_MCLK_SRC_SEL</name>
              <description>CSI0 Master Clock Source Select 
000: OSC24M
001: PLL_VIDEO 
010: PLL_PERIPH1 
011: PLL_PERIPH0 Others: /  </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_VIDEO</name>
                  <description>PLL_VIDEO</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH1</name>
                  <description>PLL_PERIPH1</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0 Others: /</description>
                  <value>0b011</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI0_MCLK_DIV_M</name>
              <description>CSI0 Master Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider is from 1 to 32. </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI1_CLK_REG</name>
          <description>CSI1_CLK_REG</description>
          <addressOffset>0x134</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x870F871F</resetMask>
          <fields>
            <field>
              <name>CSI_TOP_SCLK_GATING</name>
              <description>Gating Special Clock 
0: Clock is OFF 
1: Clock is ON SCLK = Special Clock Source/CSI_SCLK_DIV_M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON SCLK = Special Clock Source/CSI_SCLK_DIV_M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SCLK_SRC_SEL</name>
              <description>Special Clock Source Select 
000: PLL_VIDEO 
001: PLL_ISP Others: / </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_VIDEO</name>
                  <description>PLL_VIDEO</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_ISP</name>
                  <description>PLL_ISP Others: /</description>
                  <value>0b001</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI_SCLK_DIV_M</name>
              <description>CSI Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider is from 1 to 16. </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CSI1_MCLK_GATING</name>
              <description>Gating Master Clock 
0: Clock is OFF 
1: Clock is ON SCLK =CSI1 Master Clock Source/ CSI1_MCLK_DIV_M. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON SCLK =CSI1 Master Clock Source/ CSI1_MCLK_DIV_M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI1_MCLK_SRC_SEL</name>
              <description>CSI1 Master Clock Source Select 000 OSC24M 
001: PLL_VIDEO 
010: PLL_PERIPH1 
011: PLL_PERIPH0 Others: /  </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_VIDEO</name>
                  <description>PLL_VIDEO</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH1</name>
                  <description>PLL_PERIPH1</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0 Others: /</description>
                  <value>0b011</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI1_MCLK_DIV_M</name>
              <description>CSI1 Master Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider is from 1 to 32. </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DE_CLK_REG</name>
          <description>DE Clock Register</description>
          <addressOffset>0x104</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8700000F</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock 
0: Clock is OFF 
1: Clock is ON This special clock = Clock Source/Divider M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON This special clock = Clock Source/Divider M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
000: PLL_VIDEO 
010: PLL_PERIPH0 Others: / </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_VIDEO</name>
                  <description>PLL_VIDEO</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0 Others: /</description>
                  <value>0b010</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DRAM_CFG_REG</name>
          <description>DRAM Configuration Register</description>
          <addressOffset>0xF4</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0x8031000F</resetMask>
          <fields>
            <field>
              <name>DRAM_CTR_RST</name>
              <description>DRAM Controller Reset For AHB Clock Domain. 
0: Assert 
1: De-assert. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>00: PLL_DDR0 
01: PLL_DDR1 
10: PLL_PERIPH0 (2X) 
11: /</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_DDR0</name>
                  <description>PLL_DDR0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_DDR1</name>
                  <description>PLL_DDR1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0 (2X)</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SDRCLK_UPD</name>
              <description>SDRCLK Configuration Update.  0:Invalid 1:Valid. Note: Set this bit will validate Configuration 0 . It will be auto cleared after the Configuration 0 is valid. The DRAMCLK Source is from PLL_DDR. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DRAM_DIV_M</name>
              <description>DRAMCLK Divider of Configuration. The clock is divided by (m+1). The divider M should be from 2 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DRAM_CLK_GATING_REG</name>
          <description>DRAM Clock Gating Register</description>
          <addressOffset>0x100</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x60003</resetMask>
          <fields>
            <field>
              <name>USB_OTG_OHCI_DCLK_GATING</name>
              <description>USB OTG_OHCI_DCLK_GATING. Gating DRAM Clock For USB OTG_OHCI 
0: Mask 
1: Pass </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USB_OTG_EHCI_DCLK_GATING</name>
              <description>USB OTG_EHCI_DCLK_GATING. Gating DRAM Clock For USB OTG_EHCI  
0: Mask 
1: Pass </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI_DCLK_GATING</name>
              <description>CSI_DCLK_GATING. Gating DRAM Clock For CSI 
0: Mask 
1: Pass </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VE_DCLK_GATING</name>
              <description>VE_DCLK_GATING. Gating DRAM Clock For VE 
0: Mask 
1: Pass </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask</name>
                  <description>Mask</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pass</name>
                  <description>Pass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MBUS_CLK_REG</name>
          <description>MBUS Clock Register</description>
          <addressOffset>0x15C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x83000007</resetMask>
          <fields>
            <field>
              <name>MBUS_SCLK_GATING</name>
              <description>Gating Clock for MBUS 
0: Clock is OFF 
1: Clock is ON. MBUS_CLOCK = Clock Source/Divider M </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON. MBUS_CLOCK = Clock Source/Divider M</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MBUS_SCLK_SRC</name>
              <description>Clock Source Select 
00: OSC24M 
01: PLL_PERIPH0(2X) 
10: PLL_DDR0 
11: /. </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0_openingparen_2X_closingparen_</name>
                  <description>PLL_PERIPH0(2X)</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_DDR0</name>
                  <description>PLL_DDR0</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_</name>
                  <description>/.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MBUS_SCLK_RATIO_M</name>
              <description>Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider M is from 1 to 8. The divide ratio must be changed smoothly. Note: If the clock has been changed ,it must wait for at least 16 cycles. </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MBUS_RST_REG</name>
          <description>MBUS Reset Register</description>
          <addressOffset>0xFC</addressOffset>
          <resetValue>0x80000000</resetValue>
          <resetMask>0x80000000</resetMask>
          <fields>
            <field>
              <name>MBUS_RESET</name>
              <description>0: Reset Mbus Domain 
1: Assert Mbus Domain. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Reset</name>
                  <description>Reset Mbus Domain</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert Mbus Domain.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MIPI_CSI_REG</name>
          <description>MIPI_CSI Register</description>
          <addressOffset>0x16C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8300000F</resetMask>
          <fields>
            <field>
              <name>MIPICSI2_DPHY_CLK_GATING</name>
              <description>Gating Clock For CSI_DPHY 
0: Clock is OFF 
1: Clock is ON SCLK= Clock Source/Divider M </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON SCLK= Clock Source/Divider M</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
00: PLL_VIDEO 
01: PLL_PERIPH0 
10: PLL_ISP 
11: / </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_VIDEO</name>
                  <description>PLL_VIDEO</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_ISP</name>
                  <description>PLL_ISP</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock divide ratio (m) The pre-divided clock is divided by (m+1). The divider is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_AUDIO_BIAS_REG</name>
          <description>PLL_AUDIO Bias Register</description>
          <addressOffset>0x224</addressOffset>
          <resetValue>0x10100000</resetValue>
          <resetMask>0x1F1F0000</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS</name>
              <description>PLL VCO Bias Current[4:0]. </description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CUR</name>
              <description>PLL Bias Current[4:0]. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_AUDIO_CTRL_REG</name>
          <description>PLL_AUDIO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x35514</resetValue>
          <resetMask>0x910F7F1F</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable. The PLL is for Audio. PLL _AUDIO = (24MHz*N)/(M*P) PLL_AUDIO(8X)= (24MHz*N*2)/M PLL_AUDIO(4X)=PLL_AUDIO(8X)/2 PLL_AUDIO(2X)=PLL_AUDIO(4X)/2 The PLL output clock must be in the range of 20MHz~200MHz. Its default is 24.571MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable. The PLL is for Audio. PLL _AUDIO = (24MHz*N)/(M*P) PLL_AUDIO(8X)= (24MHz*N*2)/M PLL_AUDIO(4X)=PLL_AUDIO(8X)/2 PLL_AUDIO(2X)=PLL_AUDIO(4X)/2 The PLL output clock must be in the range of 20MHz~200MHz. Its default is 24.571MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_SDM_EN</name>
              <description>0: Disable 
1: Enable In this case, the PLL_FACTOR_N only low 4 bits are valid (N: The range is from 1 to 16). </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable In this case, the PLL_FACTOR_N only low 4 bits are valid (N: The range is from 1 to 16).</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_POSTDIV_P</name>
              <description>Post-div factor (P= Factor+1) The range is from 1 to 16. </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 ... Factor=127, N=128 </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_PREDIV_M</name>
              <description>PLL Pre-div Factor(M = Factor+1). The range is from 1 to 32. </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_AUDIO_PAT_CTRL_REG</name>
          <description>PLL_AUDIO Pattern Control Register</description>
          <addressOffset>0x284</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave Step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_CPUX_BIAS_REG</name>
          <description>PLL_CPUX_BIAS_REG</description>
          <addressOffset>0x220</addressOffset>
          <resetValue>0x8100200</resetValue>
          <resetMask>0x9F1F070F</resetMask>
          <fields>
            <field>
              <name>VCO_RST</name>
              <description>VCO reset in. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EXG_MODE</name>
              <description>Exchange Mode. Note: CPU PLL source will select PLL_PERIPH0 instead of PLL_CPU </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_VCO_BIAS_CTRL</name>
              <description>PLL VCO Bias Control[3:0]. </description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CUR_CTRL</name>
              <description>PLL Bias Current Control[4:0]. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_LOCK_CTRL</name>
              <description>PLL Lock Time Control[2:0]. </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_DAMP_FACT_CTRL</name>
              <description>PLL Damping Factor Control[3:0]. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_CPU_CTRL_REG</name>
          <description>PLL_CPU Control Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x1000</resetValue>
          <resetMask>0x91031F33</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable The PLL Output= (24MHz*N*K)/(M*P). The PLL output is for the CPUX Clock. Note: The PLL output clock must be in the range of 200MHz~2.6GHz. Its default is 408MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable The PLL Output= (24MHz*N*K)/(M*P). The PLL output is for the CPUX Clock. Note: The PLL output clock must be in the range of 200MHz~2.6GHz. Its default is 408MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CPUX_SDM_EN</name>
              <description>0: Disable 
1: Enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_OUT_EXT_DIVP</name>
              <description>PLL Output external divider P 
00: /1 
01: /2 
10: /4 
11: / Note:The P factor only use in the condition that PLL output less than 288 MHz. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_</name>
                  <description>/ Note:The P factor only use in the condition that PLL output less than 288 MHz.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 Factor=2, N=3 ... Factor=31, N=32 </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_K</name>
              <description>PLL Factor K.(K=Factor + 1 ) The range is from 1 to 4. </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_M</name>
              <description>PLL Factor M. (M=Factor + 1) The range is from 1 to 4. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_CPU_PAT_CTRL_REG</name>
          <description>PLL_CPU Pattern Control Register</description>
          <addressOffset>0x280</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave Step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_CPU_TUN_REG</name>
          <description>PLL_CPU Tuning Register</description>
          <addressOffset>0x250</addressOffset>
          <resetValue>0xA101000</resetValue>
          <resetMask>0xFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PLL_BAND_WID_CTRL</name>
              <description>PLL Band Width Control. 
0: Narrow 
1: Wide </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Narrow</name>
                  <description>Narrow</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Wide</name>
                  <description>Wide</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VCO_GAIN_CTRL_EN</name>
              <description>VCO Gain Control Enable. 
0: Disable 
1: Enable </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VCO_GAIN_CTRL</name>
              <description>VCO Gain Control Bits[2:0]. </description>
              <bitRange>[25:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_INIT_FREQ_CTRL</name>
              <description>PLL Initial Frequency Control[6:0]. </description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>C_OD</name>
              <description>C-Reg-Od For Verify. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>C_B_IN</name>
              <description>C-B-In[6:0] For Verify. </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>C_OD1</name>
              <description>C-Reg-Od1 For Verify. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>C_B_OUT</name>
              <description>C-B-Out[6:0] For Verify. </description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR0_BIAS_REG</name>
          <description>PLL_DDR0 Bias Register</description>
          <addressOffset>0x230</addressOffset>
          <resetValue>0x81104000</resetValue>
          <resetMask>0xF31F700F</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS</name>
              <description>PLL VCO Bias[3:0]. </description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_VCO_GAIN_CTRL_EN</name>
              <description>PLL VCO Gain Control Enable. 
0: Disable 
1: Enable. </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_BANDW_CTRL</name>
              <description>PLL Band Width Control. 
0: Narrow 
1: Wide. </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Narrow</name>
                  <description>Narrow</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Wide</name>
                  <description>Wide.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_BIAS_CUR_CTRL</name>
              <description>PLL Bias Current Control. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_VCO_GAIN_CTRL</name>
              <description>PLL VCO Gain Control Bit[2:0]. </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_DAMP_FACTOR_CTRL</name>
              <description>PLL Damping Factor Control[3:0]. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR0_CTRL_REG</name>
          <description>PLL_DDR0 Control Register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x1000</resetValue>
          <resetMask>0x91101F33</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable Set bit20 to validate the PLL after this bit is set to 1. The PLL Output = (24MHz*N*K)/M. Note: the PLL output clock must be in the range of 200MHz~2.6GHz. Its default is 408MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable Set bit20 to validate the PLL after this bit is set to 1. The PLL Output = (24MHz*N*K)/M. Note: the PLL output clock must be in the range of 200MHz~2.6GHz. Its default is 408MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_SDM_EN</name>
              <description>0: Disable 
1: Enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_DDR_CFG_UPDATE</name>
              <description>PLL_DDR Configuration Update. When PLL_DDR has been changed, this bit should be set to 1 to validate the PLL, otherwise the change would be invalid. And this bit would be cleared automatically after the PLL change is valid. 
0: No effect 
1: Validating the PLL_DDR </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Validating</name>
                  <description>Validating the PLL_DDR</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 Factor=2, N=3 ... Factor=31, N=32 </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_K</name>
              <description>PLL Factor K.(K=Factor + 1 ) The range is from 1 to 4. </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_M</name>
              <description>PLL Factor M.(M = Factor + 1 ) The range is from 1 to 4. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR0_PAT_CTRL_REG</name>
          <description>PLL_DDR0 Pattern Control Register</description>
          <addressOffset>0x290</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR0_TUN_REG</name>
          <description>PLL_DDR0 Tuning Register</description>
          <addressOffset>0x260</addressOffset>
          <resetValue>0x14880000</resetValue>
          <resetMask>0x17FFFFFF</resetMask>
          <fields>
            <field>
              <name>VREG1_OUT_EN</name>
              <description>Vreg1 Out Enable. 
0: Disable 
1: Enable </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_LTIME_CTRL</name>
              <description>PLL Lock Time Control[2:0]. </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VCO_RST</name>
              <description>VCO Reset In. </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_INIT_FREQ_CTRL</name>
              <description>PLL Initial Frequency Control[6:0]. </description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OD1</name>
              <description>Reg-Od1 For Verify. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>B_IN</name>
              <description>B-In[6:0] For Verify. </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OD</name>
              <description>Reg-Od For Verify. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>B_OUT</name>
              <description>B-Out[6:0] For Verify. </description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR1_BIAS_REG</name>
          <description>PLL_DDR1 Bias Register</description>
          <addressOffset>0x24C</addressOffset>
          <resetValue>0x10010000</resetValue>
          <resetMask>0x1F1F0000</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS_CTRL</name>
              <description>PLL VCO Bias Control[4:0]. </description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CUR_CTRL</name>
              <description>PLL Bias Current Control[4:0]. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR1_CTRL_REG</name>
          <description>PLL_DDR1 Control Register</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x1800</resetValue>
          <resetMask>0xD100FF03</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable. The PLL Output = 24MHz*N/M. Its default is 600 MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable. The PLL Output = 24MHz*N/M. Its default is 600 MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SDRPLL_UPD</name>
              <description>SDRPLL Configuration Update.  Note: When PLL_DDR1 has changed, this bit should be set to 1 to validate the PLL, otherwise the change is invalid. It will be auto cleared after the PLL is valid. 
0: No effect 
1: To validate the PLL_DDR1. </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>To_validate</name>
                  <description>To validate the PLL_DDR1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0:Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_SDM_EN</name>
              <description>0: Disable 
1: Enable. </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. (N = Factor + 1 )  The range is from 0 to 127. Note: Bit 15 can not be accessed. </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_M</name>
              <description>PLL Factor M.(M = Factor + 1 ) The range is from 1 to 4. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR1_PAT_CTRL_REG0</name>
          <description>PLL_DDR1 Pattern Control Register0</description>
          <addressOffset>0x2AC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-Delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave Step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR1_PAT_CTRL_REG1</name>
          <description>PLL_DDR1 Pattern Control Register1</description>
          <addressOffset>0x2B0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x111FFFF</resetMask>
          <fields>
            <field>
              <name>DITHER_EN</name>
              <description></description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAC_EN</name>
              <description></description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAC_IN</name>
              <description></description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_DDR_CFG_REG</name>
          <description>PLL_DDR_CFG_REG</description>
          <addressOffset>0xF8</addressOffset>
          <resetValue>0x30</resetValue>
          <resetMask>0x107F</resetMask>
          <fields>
            <field>
              <name>PLL_DDR1_MODE</name>
              <description>0: Normal Mode 
1: Continuously Frequency Scale </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Continuously</name>
                  <description>Continuously Frequency Scale</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_DDR1_PHASE_COMPENSATE</name>
              <description>The value of bit[6:4] is based on 24M clock, then the default PLL_DDR phase compensate is (3/24000000) s. </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_DDR1_STEP</name>
              <description>0000: 0.004MHz/us (576/2^17) 
0001: 0.008MHz/us (576/2^16) 
0010: 0.016MHz/us (576/2^15) 
0011: 0.032MHz/us (576/2^14) 
0100: 0.064MHz/us (576/2^13) 
0101: 0.128MHz/us (576/2^12) 
0110: 0.256MHz/us (576/2^11) 
0111: 0.512MHz/us (576/2^10) 
1000: 1.024MHz/us (576/2^9) 
1001: 2.048MHz/us (576/2^8) Others: 0.004MHz/us (576/2^17) </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_0_point_004MHz_slash_us</name>
                  <description>0.004MHz/us (576/2^17)</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_008MHz_slash_us</name>
                  <description>0.008MHz/us (576/2^16)</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_016MHz_slash_us</name>
                  <description>0.016MHz/us (576/2^15)</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_032MHz_slash_us</name>
                  <description>0.032MHz/us (576/2^14)</description>
                  <value>0b0011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_064MHz_slash_us</name>
                  <description>0.064MHz/us (576/2^13)</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_128MHz_slash_us</name>
                  <description>0.128MHz/us (576/2^12)</description>
                  <value>0b0101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_256MHz_slash_us</name>
                  <description>0.256MHz/us (576/2^11)</description>
                  <value>0b0110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_512MHz_slash_us</name>
                  <description>0.512MHz/us (576/2^10)</description>
                  <value>0b0111</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_024MHz_slash_us</name>
                  <description>1.024MHz/us (576/2^9)</description>
                  <value>0b1000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2_point_048MHz_slash_us</name>
                  <description>2.048MHz/us (576/2^8) Others: 0.004MHz/us (576/2^17)</description>
                  <value>0b1001</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_ISP_BIAS_REG</name>
          <description>PLL_ISP Bias Register</description>
          <addressOffset>0x238</addressOffset>
          <resetValue>0x10100000</resetValue>
          <resetMask>0x1F1F0007</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS_CTRL</name>
              <description>PLL VCO Bias Control[4:0]. </description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CTRL</name>
              <description>PLL Bias Control[4:0]. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_DAMP_FACTOR_CTRL</name>
              <description>PLL Damping Factor Control[2:0]. </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_ISP_CTRL_REG</name>
          <description>PLL_ISP Control Register</description>
          <addressOffset>0x2C</addressOffset>
          <resetValue>0x3006207</resetValue>
          <resetMask>0xD3107F0F</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable In the integer mode,the PLL Output = (24MHz*N)/M. In the fractional mode, the PLL Output is select by bit 25.  Note: In the Clock Control Module, PLL(1X) Output=PLL while PLL(2X) Output=PLL * 2. The PLL output clock must be in the range of 30MHz~600MHz.  Its default is 297MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable In the integer mode,the PLL Output = (24MHz*N)/M. In the fractional mode, the PLL Output is select by bit 25.  Note: In the Clock Control Module, PLL(1X) Output=PLL while PLL(2X) Output=PLL * 2. The PLL output clock must be in the range of 30MHz~600MHz.  Its default is 297MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_MODE</name>
              <description>0: Manual Mode 
1: Auto Mode (Controlled by DE) </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Manual</name>
                  <description>Manual Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Auto</name>
                  <description>Auto Mode (Controlled by DE)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FRAC_CLK_OUT</name>
              <description>PLL clock output when PLL_MODE_SEL=0(PLL_PREDIV_M factor must be set to 0); No meaning when PLL_MODE_SEL =1. 
0: PLL Output=270MHz 
1: PLL Output =297MHz </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_Output_equals_270MHz</name>
                  <description>PLL Output=270MHz</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_Output</name>
                  <description>PLL Output =297MHz</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_MODE_SEL</name>
              <description>0: Fractional Mode 
1: Integer Mode Note: When in Fractional mode, the Per Divider M should be set to 0. </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Fractional</name>
                  <description>Fractional Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Integer</name>
                  <description>Integer Mode Note: When in Fractional mode, the Per Divider M should be set to 0.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_SDM_EN</name>
              <description>0: Disable 
1: Enable </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 Factor=2, N=3 ... Factor=127,N=128 </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_PREDIV_M</name>
              <description>PLL Pre-div Factor(M = Factor+1). The range is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_ISP_PAT_CTRL_REG</name>
          <description>PLL_ISP Pattern Control Register</description>
          <addressOffset>0x298</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_PERIPH0_BIAS_REG</name>
          <description>PLL_PERIPH0 Bias Register</description>
          <addressOffset>0x234</addressOffset>
          <resetValue>0x10100010</resetValue>
          <resetMask>0x1F1F0013</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS</name>
              <description>PLL VCO Bias[4:0]. </description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CUR_CTRL</name>
              <description>PLL Bias Current Control. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BANDW_CTRL</name>
              <description>PLL Band Width Control. 
0: Narrow 
1: Wide </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Narrow</name>
                  <description>Narrow</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Wide</name>
                  <description>Wide</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_DAMP_FACTOR_CTRL</name>
              <description>PLL Damping Factor Control[1:0]. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_PERIPH0_CTRL_REG</name>
          <description>PLL_PERIPH0 Control Register</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x41811</resetValue>
          <resetMask>0x93071F33</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable The PLL Output = 24MHz*N*K/2. Note: The PLL Output should be fixed to 600MHz, it is not recommended to vary this value arbitrarily. In the Clock Control Module, PLL(2X) output= PLL*2 = 24MHz*N*K. The PLL output clock must be in the range of 200MHz~1.8GHz.  Its default is 600MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable The PLL Output = 24MHz*N*K/2. Note: The PLL Output should be fixed to 600MHz, it is not recommended to vary this value arbitrarily. In the Clock Control Module, PLL(2X) output= PLL*2 = 24MHz*N*K. The PLL output clock must be in the range of 200MHz~1.8GHz.  Its default is 600MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_BYPASS_EN</name>
              <description>PLL Output Bypass Enable. 
0: Disable 
1: Enable If the bypass is enabled, the PLL output is 24MHz. </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If the bypass is enabled, the PLL output is 24MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_CLK_OUT_EN</name>
              <description>PLL clock output enable. 
0: Disable 
1: Enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_24M_OUT_EN</name>
              <description>PLL 24MHz Output Enable. 
0: Disable  
1: Enable When 25MHz crystal used, this PLL can output 24MHz. </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable When 25MHz crystal used, this PLL can output 24MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_24M_POST_DIV</name>
              <description>PLL 24M Output Clock Post Divider (When 25MHz crystal used). 1/2/3/4. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 Factor=2, N=3  ... Factor=31, N=32 </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_K</name>
              <description>PLL Factor K.(K=Factor + 1 ) The range is from 1 to 4. </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_M</name>
              <description>PLL Factor M (M = Factor + 1) is only valid in plltest debug. The PLL_PERIPH back door clock output =24MHz*N*K/M. The range is from 1 to 4. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_PERIPH1_BIAS_REG</name>
          <description>PLL_PERIPH1 Bias Register</description>
          <addressOffset>0x244</addressOffset>
          <resetValue>0x10100010</resetValue>
          <resetMask>0x1F1F0013</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS</name>
              <description>PLL VCO Bias[4:0]. </description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CUR_CTRL</name>
              <description>PLL Bias Current Control. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BANDW_CTRL</name>
              <description>PLL Band Width Control. 
0: Narrow 
1: Wide </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Narrow</name>
                  <description>Narrow</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Wide</name>
                  <description>Wide</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_DAMP_FACTOR_CTRL</name>
              <description>PLL Damping Factor Control[1:0]. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_PERIPH1_CTRL_REG</name>
          <description>PLL_PERIPH1 Control Register</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x41811</resetValue>
          <resetMask>0x93171F33</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable The PLL Output = 24MHz*N*K/2. Note: The PLL Output should be fixed to 600MHz, it is not recommended to vary this value arbitrarily. In the Clock Control Module, PLL(2X) output= PLL*2 = 24MHz*N*K. The PLL output clock must be in the range of 200MHz~1.8GHz.  Its default is 600MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable The PLL Output = 24MHz*N*K/2. Note: The PLL Output should be fixed to 600MHz, it is not recommended to vary this value arbitrarily. In the Clock Control Module, PLL(2X) output= PLL*2 = 24MHz*N*K. The PLL output clock must be in the range of 200MHz~1.8GHz.  Its default is 600MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_BYPASS_EN</name>
              <description>PLL Output Bypass Enable. 
0: Disable 
1: Enable If the bypass is enabled, the PLL output is 24MHz. </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If the bypass is enabled, the PLL output is 24MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_CLK_OUT_EN</name>
              <description>PLL clock output enable(Just for the SATA Phy) 
0: Disable 
1: Enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_SDM_EN</name>
              <description>0: Disable 
1: Enable </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_24M_OUT_EN</name>
              <description>PLL 24MHz Output Enable. 
0: Disable  
1: Enable When 25MHz crystal used, this PLL can output 24MHz. </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable When 25MHz crystal used, this PLL can output 24MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_24M_POST_DIV</name>
              <description>PLL 24M Output Clock Post Divider (When 25MHz crystal used). 1/2/3/4. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 Factor=2, N=3  ... Factor=31, N=32 </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_K</name>
              <description>PLL Factor K.(K=Factor + 1 ) The range is from 1 to 4. </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_FACTOR_M</name>
              <description>PLL Factor M (M = Factor + 1) is only valid in plltest debug. The PLL_PERIPH back door clock output =24MHz*N*K/M. The range is from 1 to 4. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_PERIPH1_PAT_CTRL_REG</name>
          <description>PLL_PERIPH1 Pattern Control Register</description>
          <addressOffset>0x2A4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-Delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave Step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_STABLE_TIME_REG0</name>
          <description>PLL Stable Time Register0</description>
          <addressOffset>0x200</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>PLL_LOCK_TIME</name>
              <description>PLL Lock Time (Unit: us). Note: When any PLL (except PLL_CPU) is enabled or changed, the corresponding PLL lock bit will be set after the PLL STABLE Time. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_STABLE_TIME_REG1</name>
          <description>PLL Stable Time Register1</description>
          <addressOffset>0x204</addressOffset>
          <resetValue>0xFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>PLL_CPU_LOCK_TIME</name>
              <description>PLL_CPU Lock Time (Unit: us). Note: When PLL_CPU is enabled or changed, the PLL_CPU lock bit will be set after the PLL_CPU STABLE Time. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_VE_BIAS_REG</name>
          <description>PLL_VE Bias Register</description>
          <addressOffset>0x22C</addressOffset>
          <resetValue>0x10100000</resetValue>
          <resetMask>0x1F1F0007</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS_CTRL</name>
              <description>PLL VCO Bias Control[4:0]. </description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CTRL</name>
              <description>PLL Bias Control[4:0]. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_DAMP_FACTOR_CTRL</name>
              <description>PLL Damping Factor Control[2:0]. </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_VE_CTRL_REG</name>
          <description>PLL_VE Control Register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x3006207</resetValue>
          <resetMask>0x93107F0F</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable In the integer mode, The PLL Output = (24MHz*N)/M. In the fractional mode, the PLL Output is select by bit 25. Note: The PLL output clock must be in the range of 30MHz~600MHz. Its default is 297MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable In the integer mode, The PLL Output = (24MHz*N)/M. In the fractional mode, the PLL Output is select by bit 25. Note: The PLL output clock must be in the range of 30MHz~600MHz. Its default is 297MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FRAC_CLK_OUT</name>
              <description>PLL clock output when PLL_MODE_SEL=0(PLL_PREDIV_M factor must be set to 0); No meaning when PLL_MODE_SEL =1. 
0: PLL Output=270MHz 
1: PLL Output =297MHz </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_Output_equals_270MHz</name>
                  <description>PLL Output=270MHz</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_Output</name>
                  <description>PLL Output =297MHz</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_MODE_SEL</name>
              <description>0: Fractional Mode 
1: Integer Mode Note: When in Fractional mode, the Per Divider M should be set to 0. </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Fractional</name>
                  <description>Fractional Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Integer</name>
                  <description>Integer Mode Note: When in Fractional mode, the Per Divider M should be set to 0.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_SDM_EN</name>
              <description>0: Disable 
1: Enable </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 Factor=2, N=3 ... Factor=31, N=32 ... Factor=127, N=128 </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_PREDIV_M</name>
              <description>PLL Pre Divider (M = Factor+1). The range is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_VE_PAT_CTRL_REG</name>
          <description>PLL_VE Pattern Control Register</description>
          <addressOffset>0x28C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave Step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_VIDEO_BIAS_REG</name>
          <description>PLL_VIDEO Bias Register</description>
          <addressOffset>0x228</addressOffset>
          <resetValue>0x10100000</resetValue>
          <resetMask>0x1F1F0007</resetMask>
          <fields>
            <field>
              <name>PLL_VCO_BIAS_CTRL</name>
              <description>PLL VCO Bias Control[4:0]. </description>
              <bitRange>[28:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_BIAS_CTRL</name>
              <description>PLL Bias Control[4:0]. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_DAMP_FACTOR_CTRL</name>
              <description>PLL Damping Factor Control[2:0]. </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_VIDEO_CTRL_REG</name>
          <description>PLL_VIDEO Control Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x3006207</resetValue>
          <resetMask>0xD3107F0F</resetMask>
          <fields>
            <field>
              <name>PLL_ENABLE</name>
              <description>0: Disable 
1: Enable In the integer mode,the PLL Output = (24MHz*N)/M. In the fractional mode, the PLL Output is select by bit 25.  Note: In the Clock Control Module, PLL(1X) Output=PLL while PLL(2X) Output=PLL * 2. The PLL output clock must be in the range of 30MHz~600MHz.  Its default is 297MHz. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable In the integer mode,the PLL Output = (24MHz*N)/M. In the fractional mode, the PLL Output is select by bit 25.  Note: In the Clock Control Module, PLL(1X) Output=PLL while PLL(2X) Output=PLL * 2. The PLL output clock must be in the range of 30MHz~600MHz.  Its default is 297MHz.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_MODE</name>
              <description>0: Manual Mode 
1: Auto Mode (Controlled by DE) </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Manual</name>
                  <description>Manual Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Auto</name>
                  <description>Auto Mode (Controlled by DE)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOCK</name>
              <description>0: Unlocked 
1: Locked (It indicates that the PLL has been stable.)  </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unlocked</name>
                  <description>Unlocked</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Locked</name>
                  <description>Locked (It indicates that the PLL has been stable.)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FRAC_CLK_OUT</name>
              <description>PLL clock output when PLL_MODE_SEL=0(PLL_PREDIV_M factor must be set to 0); No meaning when PLL_MODE_SEL =1. 
0: PLL Output=270MHz 
1: PLL Output =297MHz </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_Output_equals_270MHz</name>
                  <description>PLL Output=270MHz</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_Output</name>
                  <description>PLL Output =297MHz</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_MODE_SEL</name>
              <description>0: Fractional Mode 
1: Integer Mode Note: When in Fractional mode, the Per Divider M should be set to 0. </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Fractional</name>
                  <description>Fractional Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Integer</name>
                  <description>Integer Mode Note: When in Fractional mode, the Per Divider M should be set to 0.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_SDM_EN</name>
              <description>0: Disable 
1: Enable </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PLL_FACTOR_N</name>
              <description>PLL Factor N. Factor=0, N=1 Factor=1, N=2 Factor=2, N=3 ... Factor=127, N=128 </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PLL_PREDIV_M</name>
              <description>PLL Pre-div Factor(M = Factor+1). The range is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_VIDEO_PAT_CTRL_REG</name>
          <description>PLL_VIDEO Pattern Control Register</description>
          <addressOffset>0x288</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF7FFFF</resetMask>
          <fields>
            <field>
              <name>SIG_DELT_PAT_EN</name>
              <description>Sigma-delta Pattern Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SPR_FREQ_MODE</name>
              <description>Spread Frequency Mode. 
00: DC=0 
01: DC=1 
1X: Triangular </description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DC_equals_0</name>
                  <description>DC=0</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DC_equals_1</name>
                  <description>DC=1</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triangular</name>
                  <description>Triangular</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_STEP</name>
              <description>Wave Step. </description>
              <bitRange>[28:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FREQ</name>
              <description>Frequency. 
00: 31.5KHz 
01: 32KHz 
10: 32.5KHz 
11: 33KHz </description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_31_point_5KHz</name>
                  <description>31.5KHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32KHz</name>
                  <description>32KHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_5KHz</name>
                  <description>32.5KHz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_33KHz</name>
                  <description>33KHz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WAVE_BOT</name>
              <description>Wave Bottom. </description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PS_CNT_REG</name>
          <description>PS Counter Register</description>
          <addressOffset>0x304</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>PS_CNT</name>
              <description>PS Counter. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PS_CTRL_REG</name>
          <description>PS Control Register</description>
          <addressOffset>0x300</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DET_FIN</name>
              <description>Detect Finish. 
0: Unfinished 
1: Finished Set 1 to this bit will clear it. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unfinished</name>
                  <description>Unfinished</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Finished</name>
                  <description>Finished Set 1 to this bit will clear it.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DLY_SEL</name>
              <description>Delay Select 
0: 1 Cycle 
1: 2 Cycles </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1_Cycle</name>
                  <description>1 Cycle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2</name>
                  <description>2 Cycles</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OSC_SEL</name>
              <description>OSC Select. 
00: IDLE 
01: SVT 
10: LVT 
11: ULVT </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>IDLE</name>
                  <description>IDLE</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SVT</name>
                  <description>SVT</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LVT</name>
                  <description>LVT</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ULVT</name>
                  <description>ULVT</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TIME_DET</name>
              <description>Time detect. 
000: 0.5/4 us 
001: 0.5/2 us 
002: 0.5/1 us 
003: 0.5*2us ........... 111:0.5*2^5us </description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_0_point_5_slash_4</name>
                  <description>0.5/4 us</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_5_slash_2</name>
                  <description>0.5/2 us</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_5_slash_1</name>
                  <description>0.5/1 us</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_5_times_2us</name>
                  <description>0.5*2us ........... 111:0.5*2^5us</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MOD_EN</name>
              <description>Module enable. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SDMMC0_CLK_REG</name>
          <description>SDMMC0 Clock Register</description>
          <addressOffset>0x88</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8373070F</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock(Max Clock = 200MHz) 
0: Clock is OFF 
1: Clock is ON. SCLK = Clock Source/Divider N/Divider M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON. SCLK = Clock Source/Divider N/Divider M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
00: OSC24M 
01: PLL_PERIPH0 
10: PLL_PERIPH1 
11: / </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH1</name>
                  <description>PLL_PERIPH1</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SAMPLE_CLK_PHASE_CTR</name>
              <description>Sample Clock Phase Control. The sample clock phase delay is based on the number of source clock that is from 0 to 7. </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_DIV_RATIO_N</name>
              <description>Clock Pre Divide Ratio (n) 
00: /1 
01: /2 
10: /4 
11: /8. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OUTPUT_CLK_PHASE_CTR</name>
              <description>Output Clock Phase Control. The output clock phase delay is based on the number of source clock that is from 0 to 7. </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider M is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDMMC1_CLK_REG</name>
          <description>SDMMC1 Clock Register</description>
          <addressOffset>0x8C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8373070F</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock(Max Clock = 200MHz) 
0: Clock is OFF 
1: Clock is ON. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
00: OSC24M 
01: PLL_PERIPH0 
10: PLL_PERIPH1 
11: / </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH1</name>
                  <description>PLL_PERIPH1</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SAMPLE_CLK_PHASE_CTR</name>
              <description>Sample Clock Phase Control. The sample clock phase delay is based on the number of source clock that is from 0 to 7. </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_DIV_RATIO_N</name>
              <description>Clock Pre-Divide Ratio (n) 
00: /1 
01: /2 
10: /4 
11: /8. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OUTPUT_CLK_PHASE_CTR</name>
              <description>Output Clock Phase Control. The output clock phase delay is based on the number of source clock that is from 0 to 7. </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider M is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDMMC2_CLK_REG</name>
          <description>SDMMC2 Clock Register</description>
          <addressOffset>0x90</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xC373070F</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock(Max Clock = 200MHz) 
0: Clock is OFF 
1: Clock is ON. If SDMMC2 is in old mode, SCLK = Clock Source/Divider N/Divider M. If SDMMC2 is in new mode, SCLK= Clock Source/Divider N/Divider M/2. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON. If SDMMC2 is in old mode, SCLK = Clock Source/Divider N/Divider M. If SDMMC2 is in new mode, SCLK= Clock Source/Divider N/Divider M/2.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MMC2_MODE_SELECT</name>
              <description>0: Old Mode 
1: New Mode. </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Old</name>
                  <description>Old Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>New</name>
                  <description>New Mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
00: OSC24M 
01: PLL_PERIPH0 
10: PLL_PERIPH1 
11: / </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH1</name>
                  <description>PLL_PERIPH1</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_PHASE_CTR</name>
              <description>Sample Clock Phase Control. The sample clock phase delay is based on the number of source clock that is from 0 to 7. </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_DIV_RATIO_N</name>
              <description>Clock Pre Divide Ratio (n) 
00: /1 
01: /2 
10: /4 
11: /8. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OUTPUT_CLK_PHASE_CTR</name>
              <description>Output Clock Phase Control. The output clock phase delay is based on the number of source clock that is from 0 to 7. </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider M is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI0_CLK_REG</name>
          <description>SPI0 Clock Register</description>
          <addressOffset>0xA0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8303000F</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock(Max Clock = 200MHz) 
0: Clock is OFF 
1: Clock is ON. SCLK = Clock Source/Divider N/Divider M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON. SCLK = Clock Source/Divider N/Divider M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
00: OSC24M 
01: PLL_PERIPH0 
10: PLL_PERIPH1 
11: / </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH1</name>
                  <description>PLL_PERIPH1</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_N</name>
              <description>Clock Pre Divide Ratio (n) 
00: /1 
01: /2 
10: /4 
11: /8. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider M is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_CLK_REG</name>
          <description>TCON Clock Register</description>
          <addressOffset>0x118</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8700000F</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING</name>
              <description>Gating Special Clock 
0: Clock is OFF 
1: Clock is ON This special clock = Clock Source/Divider M. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON This special clock = Clock Source/Divider M.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_SRC_SEL</name>
              <description>Clock Source Select 
000: PLL_VIDEO 
001: PLL_PERIPH0 Others: / </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PLL_VIDEO</name>
                  <description>PLL_VIDEO</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PLL_PERIPH0</name>
                  <description>PLL_PERIPH0 Others: /</description>
                  <value>0b001</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_M</name>
              <description>Clock Divide Ratio (m) The pre-divided clock is divided by (m+1). The divider is from 1 to 16. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>USBPHY_CFG_REG</name>
          <description>USBPHY Configuration Register</description>
          <addressOffset>0xCC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x10101</resetMask>
          <fields>
            <field>
              <name>SCLK_GATING_OTG_OHCI0</name>
              <description>Gating Special Clock For USB OTG_OHCI0  
0: Clock is OFF 
1: Clock is ON </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SCLK_GATING_USBPHY0</name>
              <description>Gating Special Clock For USB PHY0 
0: Clock is OFF 
1: Clock is ON </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USBPHY0_RST</name>
              <description>USB PHY0 Reset Control 
0: Assert 
1: De-assert </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>deassert</name>
                  <description>De-assert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>VE_CLK_REG</name>
          <description>VE Clock Register</description>
          <addressOffset>0x13C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80070000</resetMask>
          <fields>
            <field>
              <name>VE_SCLK_GATING</name>
              <description>Gating Special Clock 
0: Clock is OFF 
1: Clock is ON. SCLK = PLL_VE /Divider N. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Clock is OFF</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Clock is ON. SCLK = PLL_VE /Divider N.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DIV_RATIO_N</name>
              <description>Clock Pre Divide Ratio (N) The select clock source is pre-divided by n+1. The divider N is from 1 to 8. </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>EMAC</name>
      <description>EMAC</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C30000</baseAddress>
      <access>read-write</access>
      <registers>
        <cluster>
          <dim>7</dim>
          <dimIncrement>8</dimIncrement>
          <dimIndex>1,2,3,4,5,6,7</dimIndex>
          <name>_x_%s</name>
          <addressOffset>0x58</addressOffset>
          <register>
            <name>ADDRx_HIGH</name>
            <description>ADDRx_HIGH</description>
            <addressOffset>0x0</addressOffset>
            <resetValue>0xFFFF</resetValue>
            <resetMask>0xFF00FFFF</resetMask>
            <fields>
              <field>
                <name>MAC_ADDR_CTL</name>
                <description>0: MAC address x(x: 1~7) is not valid, and it will be ignored by the address filter 
1: MAC address x(x : 1~7) is valid </description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>MAC_address_x_openingparen_x_colon__1_tilde_7_closingparen_</name>
                    <description>MAC address x(x: 1~7) is not valid, and it will be ignored by the address filter</description>
                    <value>0b0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MAC_address_x_openingparen_x_</name>
                    <description>MAC address x(x : 1~7) is valid</description>
                    <value>0b1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>MAC_ADDR_TYPE</name>
                <description>1: MAC address x(x:1~7) used to compare with the source address of the received frame 
0: MAC address x(x:1~7) used to compare with the destination address of the received frame </description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>MAC_address_x_openingparen_x_colon_1_tilde_7_closingparen__used_to_compare_with_the_source</name>
                    <description>MAC address x(x:1~7) used to compare with the source address of the received frame</description>
                    <value>0b1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MAC_address_x_openingparen_x_colon_1_tilde_7_closingparen__used_to_compare_with_the_destination</name>
                    <description>MAC address x(x:1~7) used to compare with the destination address of the received frame</description>
                    <value>0b0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>MAC_ADDR_BYTE_CTL</name>
                <description>MAC address byte control mask. The lower bit of mask controls the lower byte of in MAC address x(x:1~7). When the bit of mask is 1, do not compare the corresponding byte. </description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>MAC_ADDR_X_HIGH</name>
                <description>The upper 16bits of the MAC address x(x:1~7). </description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>ADDRx_LOW</name>
            <description>ADDRx_LOW</description>
            <addressOffset>0x4</addressOffset>
            <resetValue>0xFFFFFFFF</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <field>
                <name>MAC_ADDR_X_LOW</name>
                <description>The lower 32bits of MAC address x(x:1~7). </description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>ADDR0_HIGH</name>
          <description>ADDR0_HIGH</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MAC_ADDR_0_HIGH</name>
              <description>The upper 16bits of the 1 st MAC address. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ADDR0_LOW</name>
          <description>ADDR0_LOW</description>
          <addressOffset>0x54</addressOffset>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>MAC_ADDR_0_LOW</name>
              <description>The lower 32bits of 1 st MAC address. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>BASIC_CTL_0</name>
          <description>Basic Control 0 Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <field>
              <name>SPEED</name>
              <description>00: 1000Mbps 
11: 100Mbps 
10: 10Mbps 
01: Reserved </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1000Mbps</name>
                  <description>1000Mbps</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_100Mbps</name>
                  <description>100Mbps</description>
                  <value>0b11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_10Mbps</name>
                  <description>10Mbps</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOOPBACK</name>
              <description>0: Disable;  
1: Enable; </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable;</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DUPLEX</name>
              <description>0: Half-duplex 
1: Full-duplex </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>half_duplex</name>
                  <description>Half-duplex</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>full_duplex</name>
                  <description>Full-duplex</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BASIC_CTL_1</name>
          <description>Basic Control 1 Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x8000000</resetValue>
          <resetMask>0x3F000003</resetMask>
          <fields>
            <field>
              <name>BURST_LEN</name>
              <description>The burst length of RX and TX DMA transfer.  </description>
              <bitRange>[29:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_TX_PRI</name>
              <description>0: RX DMA and TX DMA have same priority 
1: RX DMA has priority over TX DMA </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_DMA_and</name>
                  <description>RX DMA and TX DMA have same priority</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_DMA</name>
                  <description>RX DMA has priority over TX DMA</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SOFT_RST</name>
              <description>When this bit is set, soft reset all registers and logic. All clock inputs must be valid before soft rest. This bit is cleared internally when the reset operation is completed fully. Before write any register, this bit should read a 0. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_EN</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3F3F</resetMask>
          <fields>
            <field>
              <name>RX_EARLY_INT_EN</name>
              <description>0: Disable early receive interrupt enable 
1: Enable early receive interrupt enable </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable early receive interrupt enable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable early receive interrupt enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_OVERFLOW_INT_EN</name>
              <description>0: Disable overflow interrupt 
1: Enable overflow interrupt </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable overflow interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable overflow interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_TIMEOUT_INT_EN</name>
              <description>0: Disable receive timeout interrupt 
1: Enable receive timeout interrupt </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable receive timeout interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable receive timeout interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DMA_STOPPED_INT_EN</name>
              <description>0: Disable receive DMA FSM stopped interrupt 
1: Enable receive DMA FSM stopped interrupt </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable receive DMA FSM stopped interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable receive DMA FSM stopped interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_BUF_UA_INT_EN</name>
              <description>0: Disable receive buffer unavailable interrupt 
1: Enable receive buffer unavailable interrupt </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable receive buffer unavailable interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable receive buffer unavailable interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_INT_EN</name>
              <description>0: Disable receive interrupt 
1: Enable receive interrupt </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable receive interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable receive interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_EARLY_INT_EN</name>
              <description>0: Disable early transmit interrupt  
1: Enable early transmit interrupt  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable early transmit interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable early transmit interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_UNDERFLOW_INT_EN</name>
              <description>0: Disable underflow interrupt 
1: Enable underflow interrupt </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable underflow interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable underflow interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_TIMEOUT_INT_EN</name>
              <description>0: Disable transmit timeout interrupt 
1: Enable transmit timeout interrupt </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable transmit timeout interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable transmit timeout interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_BUF_UA_INT_EN</name>
              <description>0: Disable transmit buffer available interrupt 
1: Enable transmit buffer available interrupt </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable transmit buffer available interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable transmit buffer available interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DMA_STOPPED_INT_EN</name>
              <description>0: Disable transmit DMA FSM stopped interrupt 
1: Enable transmit DMA FSM stopped interrupt </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable transmit DMA FSM stopped interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable transmit DMA FSM stopped interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_INT_EN</name>
              <description>0: Disable transmit interrupt 
1: Enable transmit interrupt </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable transmit interrupt</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable transmit interrupt</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STA</name>
          <description>Interrupt Status Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x13F3F</resetMask>
          <fields>
            <field>
              <name>RGMII_LINK_STA_INT</name>
              <description>When this bit is asserted, the link status of RGMII interface is changed. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RX_EARLY_INT</name>
              <description>When this bit asserted, the RX DMA had filled the first data buffer of the receive frame.  </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RX_OVERFLOW_INT</name>
              <description>When this bit is asserted, the RX FIFO had an overflow error. </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RX_TIMEOUT_INT</name>
              <description>When this bit asserted, the length of receive frame is greater than 2048 bytes(10240 when JUMBO_FRM_EN is set) </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RX_DMA_STOPPED_INT</name>
              <description>When this bit asserted, the RX DMA FSM is stopped. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RX_BUF_UA</name>
              <description>_INT When this asserted, the RX DMA can`t acquire next RX descriptor and RX DMA FSM is suspended. The ownership of next RX descriptor should be changed to RX DMA. The RX DMA FSM will resume when write to DMA_RX_START bit or next receive frame is coming. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RX_INT</name>
              <description>When this bit is asserted, a frame reception is completed. The RX DMA FSM remains in the running state. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TX_EARLY_INT</name>
              <description>When this bit asserted , the frame is transmitted to FIFO totally. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TX_UNDERFLOW_INT</name>
              <description>When this bit is asserted, the TX FIFO had an underflow error. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TX_TIMEOUT_INT</name>
              <description>When this bit is asserted, the transmitter had been excessively active. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TX_BUF_UA_INT</name>
              <description>When this asserted, the TX DMA can not acquire next TX descriptor and TX DMA FSM is suspended. The ownership of next TX descriptor should be changed to TX DMA. The TX DMA FSM will resume when write to DMA_TX_START bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TX_DMA_STOPPED_INT</name>
              <description>When this bit is asserted, the TX DMA FSM is stopped. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TX_INT</name>
              <description>When this bit is asserted, a frame transmission is completed. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MII_CMD</name>
          <description>Management Interface Command Register</description>
          <addressOffset>0x48</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x71F1F3</resetMask>
          <fields>
            <field>
              <name>MDC_DIV_RATIO_M</name>
              <description>MDC clock divide ration(m). The source of MDC clock is AHB clock. 
000: 16 
001: 32 
010: 64 
011: 128 Others: Reserved </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_16</name>
                  <description>16</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32</name>
                  <description>32</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_64</name>
                  <description>64</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_128</name>
                  <description>128 Others: Reserved</description>
                  <value>0b011</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PHY_ADDR</name>
              <description>Select a PHY device from 32 possible candidates. </description>
              <bitRange>[16:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PHY_REG_ADDR</name>
              <description>Select register in the selected PHY device </description>
              <bitRange>[8:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MII_WR</name>
              <description>0: Read register in selected PHY and return data in EMAC_GMII_DATA 
1: Write register in selected PHY using data in EMAC_GMII_DATA </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Read</name>
                  <description>Read register in selected PHY and return data in EMAC_GMII_DATA</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Write</name>
                  <description>Write register in selected PHY using data in EMAC_GMII_DATA</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MII_BUSY</name>
              <description>This bit indicates that a read or write operation is in progress. When prepared the data and register address for a write operation or the register address for a read operation, set this bit and start to access register in PHY.  When this bit is cleared automatically, the read or write operation is over and the data in EMAC_GMII_DATA is valid for a read operation. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MII_DATA</name>
          <description>Management Interface Data Register</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>MII_DATA</name>
              <description>The 16-bit data to be written to or read from the register in the selected PHY. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RGMII_STA</name>
          <description>RGMII Status Register</description>
          <addressOffset>0xD0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <field>
              <name>RGMII_LINK</name>
              <description>The link status of RGMII interface 
0: down 
1: up </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>down</name>
                  <description>down</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>up</name>
                  <description>up</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RGMII_LINK_SPD</name>
              <description>The link speed of RGMII interface 
00: 2.5 MHz  
01: 25 MHz 
10: 125 MHz </description>
              <bitRange>[2:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_2_point_5</name>
                  <description>2.5 MHz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_25</name>
                  <description>25 MHz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_125</name>
                  <description>125 MHz</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RGMII_LINK_MD</name>
              <description>The link Mode of RGMII interface 
0: Half-Duplex 
1: Full-Duplex </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>half_Duplex</name>
                  <description>Half-Duplex</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>full_Duplex</name>
                  <description>Full-Duplex</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_CTL_0</name>
          <description>Receive Control 0 Register</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF8030000</resetMask>
          <fields>
            <field>
              <name>RX_EN</name>
              <description>Enable receiver  
0: Disable receiver after current reception 
1: Enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable receiver after current reception</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FRM_LEN_CTL</name>
              <description>0: Allow to receive frames less than or equal to 2,048 bytes (10,240 if JUMBO_FRM_EN is set) and cuts off any bytes received after that 
1: Allow to receive frames of up to 16,384 bytes </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Allow_to_receive_frames_less</name>
                  <description>Allow to receive frames less than or equal to 2,048 bytes (10,240 if JUMBO_FRM_EN is set) and cuts off any bytes received after that</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Allow_to_receive_frames_of</name>
                  <description>Allow to receive frames of up to 16,384 bytes</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>JUMBO_FRM_EN</name>
              <description>When set, allows Jumbo frames of 9,018 bytes without reporting a giant frame error in the receive frame status. </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STRIP_FCS</name>
              <description>When set, strip the Pad/FCS field on received frames only when the length`s field value is less than or equal to 1,500 bytes. </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CHECK_CRC</name>
              <description>When set, calculate CRC and check the IPv4 Header Checksum. </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_PAUSE_FRM_MD</name>
              <description>0: Only detect multicast pause frame specified in the 802.3x standard. 
1: In addition to detect multicast pause frame specified in the 802.3x standard, also detect unicast pause frame with address specified in MAC Address 0 High Register and MAC address 0 Low Register. </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Only_detect</name>
                  <description>Only detect multicast pause frame specified in the 802.3x standard.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>In</name>
                  <description>In addition to detect multicast pause frame specified in the 802.3x standard, also detect unicast pause frame with address specified in MAC Address 0 High Register and MAC address 0 Low Register.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FLOW_CTL_EN</name>
              <description>When set, enable the functionality that decode the received pause frame and disable its transmitter for a specified time by pause frame. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_CTL_1</name>
          <description>Receive Control 1 Register</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xC1F0003F</resetMask>
          <fields>
            <field>
              <name>RX_DMA_START</name>
              <description>When set, the RX DMA will go no to work. It is cleared internally and always read a 0. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_DMA_EN</name>
              <description>0: Stop RX DMA after finish receiving current frame  
1: Start and run RX DMA </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stop</name>
                  <description>Stop RX DMA after finish receiving current frame</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Start_and</name>
                  <description>Start and run RX DMA</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_FLOW_CTL</name>
              <description>0: Disable RX flow control 
1: Enable RX flow control based on RX_FLOW_CTL_TH_DEACT and RX_FLOW_CTL_TH_ACT  </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable RX flow control</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable RX flow control based on RX_FLOW_CTL_TH_DEACT and RX_FLOW_CTL_TH_ACT</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FLOW_CTL_TH_DEACT</name>
              <description>The threshold for deactivating flow control in both half-duplex mode and full-duplex mode 
00: Full minus 1 KB  
01: Full minus 2 KB  
10: Full minus 3 KB  
11: Full minus 4 KB   </description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Full_minus_1</name>
                  <description>Full minus 1 KB</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full_minus_2</name>
                  <description>Full minus 2 KB</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full_minus_3</name>
                  <description>Full minus 3 KB</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full_minus_4</name>
                  <description>Full minus 4 KB</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FLOW_CTL_TH_ACT</name>
              <description>The threshold for activating flow control in both half-duplex mode and full-duplex mode.  
00: Full minus 1 KB  
01: Full minus 2 KB 
10: Full minus 3 KB 
11: Full minus 4 KB  </description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Full_minus_1</name>
                  <description>Full minus 1 KB</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full_minus_2</name>
                  <description>Full minus 2 KB</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full_minus_3</name>
                  <description>Full minus 3 KB</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full_minus_4</name>
                  <description>Full minus 4 KB</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_TH</name>
              <description>The threshold value of RX DMA FIFO. When RX_MD is 0, RX DMA starts to transfer data when the size of received frame in RX DMA FIFO is greater than the threshold. In addition, full frames with a length less than the threshold are transferred automatically.  
00: 64  
01: 32 
10: 96 
11: 128 </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_64</name>
                  <description>64</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32</name>
                  <description>32</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_96</name>
                  <description>96</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_128</name>
                  <description>128</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERR_FRM</name>
              <description>0: RX DMA drops frames with error 
1: RX DMA forwards frames with error </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_DMA_drops</name>
                  <description>RX DMA drops frames with error</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_DMA_forwards</name>
                  <description>RX DMA forwards frames with error</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_RUNT_FRM</name>
              <description>When set, forward undersized frames with no error and length less than 64bytes </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_MD</name>
              <description>0: RX DMA reads data from RX DMA FIFO to host memory after the number of data in RX DAM FIFO is greater than RX_TH 
1: RX DMA reads data from RX DMA FIFO to host memory after a complete frame has been written to RX DMA FIFO </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_DMA_reads_data_from_RX_DMA_FIFO_to_host_memory_after_the_number</name>
                  <description>RX DMA reads data from RX DMA FIFO to host memory after the number of data in RX DAM FIFO is greater than RX_TH</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_DMA_reads_data_from_RX_DMA_FIFO_to_host_memory_after_a_complete</name>
                  <description>RX DMA reads data from RX DMA FIFO to host memory after a complete frame has been written to RX DMA FIFO</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLUSH_RX_FRM</name>
              <description>The functionality that flush the frames when receive descriptors/buffers is unavailable 
0: Enable 
1: Disable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_DMA_CUR_BUF</name>
          <description>RX_DMA_CUR_BUF</description>
          <addressOffset>0xC8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CURRENT_RECEIVE</name>
              <description>The address of current receive DMA buffer </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_DMA_CUR_DESC</name>
          <description>RX_DMA_CUR_DESC</description>
          <addressOffset>0xC4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CURRENT_RECEIVE</name>
              <description>The address of current receive descriptor </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_DMA_LIST</name>
          <description>RX_DMA_LIST</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RX_DESC_LIST</name>
              <description>The base address of receive descriptor list. It must be 3 2-bit aligned. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_DMA_STA</name>
          <description>Receive DMA Status Register</description>
          <addressOffset>0xC0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>RX_DMA_STA</name>
              <description>The state of RX DMA FSM. 
000: STOP: When reset or disable RX DMA;.  
001: RUN_FETCH_DESC: Fetching RX DMA descriptor; 
011: RUN_WAIT_FRM: Waiting for frame.  
100: SUSPEND: RX descriptor unavailable;   
101: RUN_CLOSE_DESC: Closing RX descriptor. 
111: RUN_TRANS_DATA: Passing frame from host memory to RX DMA FIFO;  010, 110: Reserved.  </description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>STOP: When reset or disable RX DMA;.</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_FETCH_DESC</name>
                  <description>RUN_FETCH_DESC: Fetching RX DMA descriptor;</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_WAIT_FRM</name>
                  <description>RUN_WAIT_FRM: Waiting for frame.</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SUSPEND</name>
                  <description>SUSPEND: RX descriptor unavailable;</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_CLOSE_DESC</name>
                  <description>RUN_CLOSE_DESC: Closing RX descriptor.</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_TRANS_DATA</name>
                  <description>RUN_TRANS_DATA: Passing frame from host memory to RX DMA FIFO;  010, 110: Reserved.</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_FRM_FLT</name>
          <description>Receive Frame Filter Register</description>
          <addressOffset>0x38</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80033373</resetMask>
          <fields>
            <field>
              <name>DIS_ADDR_FILTER</name>
              <description>0: Enable address filter 
1: Disable address filter  </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable address filter</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable address filter</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DIS_BROADCAST</name>
              <description>0: Receive all broadcast frames 
1: Drop all broadcast frames </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive</name>
                  <description>Receive all broadcast frames</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Drop</name>
                  <description>Drop all broadcast frames</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ALL_MULTICAST</name>
              <description>0: Filter multicast frame according to HASH_MULTICAST 
1: Receive all multicast frames </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Filter</name>
                  <description>Filter multicast frame according to HASH_MULTICAST</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive</name>
                  <description>Receive all multicast frames</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTL_FRM_FILTER</name>
              <description>00, 01: Drop all control frames 
10: Receive all control frames 
11: Receive all control frames when pass the address filter </description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HASH_MULTICAST</name>
              <description>0: Filter multicast frames by comparing the DA field with the values in DA MAC address registers 
1: Filter multicast frames according to the hash table </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Filter_multicast_frames_by</name>
                  <description>Filter multicast frames by comparing the DA field with the values in DA MAC address registers</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Filter_multicast_frames_according</name>
                  <description>Filter multicast frames according to the hash table</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HASH_UNICAST</name>
              <description>0: Filter unicast frames by comparing the DA field with the values in DA MAC address registers 
1: Filter unicast frames according to the hash table </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Filter_unicast_frames_by</name>
                  <description>Filter unicast frames by comparing the DA field with the values in DA MAC address registers</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Filter_unicast_frames_according</name>
                  <description>Filter unicast frames according to the hash table</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SA_FILTER_EN</name>
              <description>0: Receive frames and update the result of SA filter 
1: Update the result of SA filter. In addition, if the SA field of received frame does not match the values in SA MAC address registers, drop this frame. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive</name>
                  <description>Receive frames and update the result of SA filter</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Update</name>
                  <description>Update the result of SA filter. In addition, if the SA field of received frame does not match the values in SA MAC address registers, drop this frame.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SA_INV_FILTER</name>
              <description>0: When the SA field of current frame matches the values in SA MAC address registers, it passes the SA filter 
1: When the SA filed of current frame does not match the values in SA MAC address registers,, it passes the SA filter </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>When_the_SA_field</name>
                  <description>When the SA field of current frame matches the values in SA MAC address registers, it passes the SA filter</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>When_the_SA_filed</name>
                  <description>When the SA filed of current frame does not match the values in SA MAC address registers,, it passes the SA filter</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DA_INV_FILTER</name>
              <description>0: Normal filtering of frames is performed  
1: Filter both unicast and multicast frames by comparing DA field in inverse filtering mode </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal filtering of frames is performed</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Filter_both</name>
                  <description>Filter both unicast and multicast frames by comparing DA field in inverse filtering mode</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLT_MD</name>
              <description>0: If the HASH_MULTICAST or HASH_UNICAST is set, the frame is passed only when it matches the Hash filter 
1: Receive the frame when it pass the address register filter or the hash filter(set by HASH_MULTICAST or HASH_UNICAST) </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>If</name>
                  <description>If the HASH_MULTICAST or HASH_UNICAST is set, the frame is passed only when it matches the Hash filter</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive</name>
                  <description>Receive the frame when it pass the address register filter or the hash filter(set by HASH_MULTICAST or HASH_UNICAST)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ALL</name>
              <description>0: Receive the frames that pass the SA/DA address filter 
1: Receive all frames and update the result of address filter(pass or fail) in the receive status word </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive_the_frames</name>
                  <description>Receive the frames that pass the SA/DA address filter</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_all</name>
                  <description>Receive all frames and update the result of address filter(pass or fail) in the receive status word</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_HASH_0</name>
          <description>Hash Table 0 Register</description>
          <addressOffset>0x40</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>HASH_TAB_0</name>
              <description>The upper 32 bits of Hash t able for receive frame filter. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_HASH_1</name>
          <description>Hash Table 1 Register</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>HASH_TAB_1</name>
              <description>The lower 32 bits of Hash table for receive frame filter. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_CTL_0</name>
          <description>Transmit Control 0 Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xC0000000</resetMask>
          <fields>
            <field>
              <name>TX_EN</name>
              <description>Enable transmitter. 
0: Disable transmitter after current transmission 
1: Enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable transmitter after current transmission</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FRM_LEN_CTL</name>
              <description>0: Allow to transmit frames no more than 2,048 bytes (10,240 if JUMBO_FRM_EN is set) and cut off any bytes after that 1:Allow to transmit frames of up to 16,384 bytes </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Allow</name>
                  <description>Allow to transmit frames no more than 2,048 bytes (10,240 if JUMBO_FRM_EN is set) and cut off any bytes after that 1:Allow to transmit frames of up to 16,384 bytes</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_CTL_1</name>
          <description>Transmit Control 1 Register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xC0000703</resetMask>
          <fields>
            <field>
              <name>TX_DMA_START</name>
              <description>When set this bit, the TX DMA FSM will go no to work. It is cleared internally and always read a 0. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TX_DMA_EN</name>
              <description>0: Stop TX DMA after the completion of current frame transmission. 
1: Start and run TX DMA. </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stop</name>
                  <description>Stop TX DMA after the completion of current frame transmission.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Start_and</name>
                  <description>Start and run TX DMA.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_TH</name>
              <description>The threshold value of TX DMA FIFO. When TX_MD is 0, transmission starts when the size of frame in TX DMA FIFO is greater than the threshold. In addition, full frames with a length less than the threshold are transferred automatically.  
000: 64  
001: 128 
010: 192 
011: 256  Others: Reserved </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_64</name>
                  <description>64</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_128</name>
                  <description>128</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_192</name>
                  <description>192</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_256</name>
                  <description>256</description>
                  <value>0b011</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_MD</name>
              <description>0: Transmission starts after the number of data in TX DAM FIFO is greater than TX_TH 
1: Transmission starts after a full frame located in TX DMA FIFO </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Transmission_starts_after_the_number</name>
                  <description>Transmission starts after the number of data in TX DAM FIFO is greater than TX_TH</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmission_starts_after_a_full</name>
                  <description>Transmission starts after a full frame located in TX DMA FIFO</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLUSH_TX_FIFO</name>
              <description>The functionality that flush the data in the TX FIFO. 
0: Enable 
1: Disable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_DMA_CUR_BUF</name>
          <description>TX_DMA_CUR_BUF</description>
          <addressOffset>0xB8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CURRENT_TRANSMIT</name>
              <description>The address of current transmit DMA buffer </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_DMA_CUR_DESC</name>
          <description>TX_DMA_CUR_DESC</description>
          <addressOffset>0xB4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CURRENT_TRANSMIT</name>
              <description>The address of current transmit descriptor.  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_DMA_LIST</name>
          <description>TX_DMA_LIST</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TX_DESC_LIST</name>
              <description>The base address of transmi t descriptor list. It must be 32-bit aligned. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_DMA_STA</name>
          <description>Transmit DMA Status Register</description>
          <addressOffset>0xB0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>TX_DMA_STA</name>
              <description>The state of Transmit DMA FSM.  
000: STOP: When reset or disable TX DMA; 
001: RUN_FETCH_DESC: Fetching TX DMA descriptor; 
010: RUN_WAIT_STA: Waiting for the status of TX frame; 
011: RUN_TRANS_DATA: Passing frame from host memory to TX DMA FIFO;  
111: RUN_CLOSE_DESC: Closing TX descriptor. 
110: SUSPEND: TX descriptor unavailable or TX DMA FIFO underflow;  100, 101: Reserved; </description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>STOP: When reset or disable TX DMA;</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_FETCH_DESC</name>
                  <description>RUN_FETCH_DESC: Fetching TX DMA descriptor;</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_WAIT_STA</name>
                  <description>RUN_WAIT_STA: Waiting for the status of TX frame;</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_TRANS_DATA</name>
                  <description>RUN_TRANS_DATA: Passing frame from host memory to TX DMA FIFO;</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN_CLOSE_DESC</name>
                  <description>RUN_CLOSE_DESC: Closing TX descriptor.</description>
                  <value>0b111</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SUSPEND</name>
                  <description>SUSPEND: TX descriptor unavailable or TX DMA FIFO underflow;  100, 101: Reserved;</description>
                  <value>0b110</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_FLOW_CTL</name>
          <description>Transmit Flow Control Register</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x803FFFF3</resetMask>
          <fields>
            <field>
              <name>TX_FLOW_CTL_STA</name>
              <description>This bit indicates a pause frame transmission is in progress. When the configuration of flow control is ready, set this bit to transmit a pause frame in full-duplex mode or activate the backpressure function. After completion of transmission, this bit will be cleared automatically. Before write register TX_FLOW_CTRL, this bit must be read as 0. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TX_PAUSE_FRM_SLOT</name>
              <description>The threshold of the pause timer at which the input flow control signal is checked for automatic retransmission of pause frame. The threshold values should be always less than the PAUSE_TIME </description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PAUSE_TIME</name>
              <description>The pause time field in the transmitted control frame.  </description>
              <bitRange>[19:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ZQP_FRM_EN</name>
              <description>When set, enable the functionality to generate Zero-Quanta Pause control frame. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TX_FLOW_CTL_EN</name>
              <description>When set, enable flow control operation to transmit pause frames in full-duplex mode, or enable the back-pressure operation in half-duplex mode. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>RTC</name>
      <description>RTC</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C20400</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>ALARM0_COUNTER_REG</name>
          <description>Alarm 0 Counter Register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>ALARM0_COUNTER</name>
              <description>Alarm 0 Counter is Based on Second. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM0_CUR_VLU_REG</name>
          <description>Alarm 0 Counter Current Value Register</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>ALARM0_CUR_VLU</name>
              <description>Check Alarm 0 Counter Current Values. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM0_ENABLE_REG</name>
          <description>Alarm 0 Enable Register</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>ALM_0_EN</name>
              <description>Alarm 0 Enable. If this bit is set to `1`, the Alarm 0 Counter register`s valid bits will down count to zero, and the alarm pending bit will be set to `1`. 
0: Disable  
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM0_IRQ_EN_REG</name>
          <description>ALARM0_IRQ_EN_REG</description>
          <addressOffset>0x2C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>ALARM0_IRQ_EN</name>
              <description>Alarm 0 IRQ Enable. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM0_IRQ_STA_REG</name>
          <description>Alarm 0 IRQ Status Register</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>ALARM0_IRQ_PEND</name>
              <description>Alarm 0 IRQ Pending bit. 
0: No effect 
1: Pending, alarm 0 counter value is reached If alarm 0 irq enable is set to 1, the pending bit will be sent to the interrupt controller. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, alarm 0 counter value is reached If alarm 0 irq enable is set to 1, the pending bit will be sent to the interrupt controller.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM0_WK_HH_MM_SS</name>
          <description>ALARM0_WK_HH_MM_SS</description>
          <addressOffset>0x40</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HOUR</name>
              <description>Range from 0~23. </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MINUTE</name>
              <description>Range from 0~59. </description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SECOND</name>
              <description>Range from 0~59. </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM1_EN_REG</name>
          <description>ALARM1_EN_REG</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>WK6_ALM1_EN</name>
              <description>Week 6 (Sunday) Alarm 1 Enable. 
0: Disable 
1: Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 6, the week 6 alarm irq pending bit will be set to `1`.  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 6, the week 6 alarm irq pending bit will be set to `1`.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WK5_ALM1_EN</name>
              <description>Week 5 (Saturday) Alarm 1 Enable. 
0: Disable 
1: Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 5, the week 5 alarm irq pending bit will be set to `1`. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 5, the week 5 alarm irq pending bit will be set to `1`.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WK4_ALM1_EN</name>
              <description>Week 4 (Friday) Alarm 1 Enable. 
0: Disable  
1: Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 4, the week 4 alarm irq pending bit will be set to `1`. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 4, the week 4 alarm irq pending bit will be set to `1`.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WK3_ALM1_EN</name>
              <description>Week 3 (Thursday) Alarm 1 Enable. 
0: Disable 
1: Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 3, the week 3 alarm irq pending bit will be set to `1`. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 3, the week 3 alarm irq pending bit will be set to `1`.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WK2_ALM1_EN</name>
              <description>Week 2 (Wednesday) Alarm 1 Enable. 
0: Disable 
1: Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 2, the week 2 alarm irq pending bit will be set to `1`. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 2, the week 2 alarm irq pending bit will be set to `1`.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WK1_ALM1_EN</name>
              <description>Week 1 (Tuesday) Alarm 1 Enable. 
0: Disable 
1: Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 1, the week 1 alarm irq pending bit will be set to `1`. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 1, the week 1 alarm irq pending bit will be set to `1`.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WK0_ALM1_EN</name>
              <description>Week 0 (Monday) Alarm 1 Enable. 
0: Disable 
1: Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 0, the week 0 alarm irq pending bit will be set to `1`. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable If this bit is set to `1`, only when the Alarm 1 Week HH-MM-SS register valid bits is equal to RTC HH-MM-SS register and the register RTC HH-MM-SS bit [31:29] is 0, the week 0 alarm irq pending bit will be set to `1`.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM1_IRQ_EN_REG</name>
          <description>ALARM1_IRQ_EN_REG</description>
          <addressOffset>0x48</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>ALARM1_IRQ_EN</name>
              <description>Alarm 1 IRQ Enable. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM1_IRQ_STA_REG</name>
          <description>Alarm 1 IRQ Status Register</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>ALARM1_WEEK_IRQ_PEND</name>
              <description>Alarm 1 Week (0/1/2/3/4/5/6) IRQ Pending. 
0: No effect 
1: Pending, week counter value is reached If alarm 1 week irq enable is set to 1, the pending bit will be sent to the interrupt controller. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, week counter value is reached If alarm 1 week irq enable is set to 1, the pending bit will be sent to the interrupt controller.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARM_CONFIG_REG</name>
          <description>Alarm Config Register</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>ALARM_WAKEUP</name>
              <description>Configuration of alarm wake up output. 
0: Disable alarm wake up output 
1: Enable alarm wake up output </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable alarm wake up output</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable alarm wake up output</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <dim>8</dim>
          <dimIncrement>4</dimIncrement>
          <name>GP_DATA_REGn[%s]</name>
          <description>GP_DATA_REGn[%s]</description>
          <addressOffset>0x100</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>GP_DATA</name>
              <description>Data [31:0]. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>IC_CHARA_REG</name>
          <description>IC Characteristic Register</description>
          <addressOffset>0x1F0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IC_CHARA</name>
              <description>Key Field. Should be written at value 0x16AA. Writing any other value in this field aborts the write operation. </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ID_DATA</name>
              <description>Return 0x16aa only if the KEY_FIELD is set as 0x16aa when read those bits, otherwise return 0x0. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>LOSC_AUTO_SWT_STA_REG</name>
          <description>LOSC Auto Switch Status Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <field>
              <name>LOSC_AUTO_SWT_PEND</name>
              <description>LOSC auto switch pending. 
0: No effect 
1: Auto switches pending Set 1 to this bit will clear it. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Auto</name>
                  <description>Auto switches pending Set 1 to this bit will clear it.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOSC_SRC_SEL_STA</name>
              <description>Checking LOSC Clock Source Status. `N` is the value of Internal OSC Clock Prescalar register. 
0: Internal 32KHz  
1: External 32.768KHz OSC </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Internal</name>
                  <description>Internal 32KHz</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>External</name>
                  <description>External 32.768KHz OSC</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>LOSC_CTRL_REG</name>
          <description>Low Oscillator Control Register l</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x4000</resetValue>
          <resetMask>0xFFFF438D</resetMask>
          <fields>
            <field>
              <name>KEY_FIELD</name>
              <description>Key Field. This field should be filled with 0x16AA, and then the bit 0 can be written with the new value. </description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>LOSC_AUTO_SWT_EN</name>
              <description>LOSC auto switch enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ALM_DDHHMMSS_ACCE</name>
              <description>ALARM DD-HH-MM-SS access. After writing the ALARM DD-HH-MM-SS register, this bit is set and it will be cleared until the real writing operation is finished. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RTC_HHMMSS_ACCE</name>
              <description>RTC HH-MM-SS access. After writing the RTC HH-MM-SS register, this bit is set and it will be cleared until the real writing operation is finished. After writing the RTC YY-MM-DD register, the YY-MM-DD register will be refreshed for at most one second. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RTC_YYMMDD_ACCE</name>
              <description>RTC YY-MM-DD access. After writing the RTC YY-MM-DD register, this bit is set and it will be cleared until the real writing operation is finished. After writing the RTC YY-MM-DD register, the YY-MM-DD register will be refreshed for at most one second. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EXT_LOSC_GSM</name>
              <description>External 32768Hz Crystal GSM. 00 low 01 10 11 high </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOSC_SRC_SEL</name>
              <description>LOSC Clock source Select. `N` is the value of Internal OSC Clock Prescalar register. 
0: Internal 32KHz, 1: External 32.768KHz OSC. Note: Internal 32KHz is divided from OSC24MHz. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Internal</name>
                  <description>Internal 32KHz, 1: External 32.768KHz OSC. Note: Internal 32KHz is divided from OSC24MHz.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>LOSC_OUT_GATING_REG</name>
          <description>LOSC output gating register</description>
          <addressOffset>0x60</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>LOSC_OUT_GATING</name>
              <description>Configuration of LOSC output, and no LOSC output by default. 
0: Enable LOSC output gating 
1: Disable LOSC output gating </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable LOSC output gating</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable LOSC output gating</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RTC_YY_MM_DD_REG</name>
          <description>RTC Year-Month-Day Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x400000</resetMask>
          <fields>
            <field>
              <name>LEAP</name>
              <description>Leap Year. 
0: not, 1: Leap year. This bit can not set by hardware. It should be set or clear by software. </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_1</name>
                  <description>not, 1: Leap year. This bit can not set by hardware. It should be set or clear by software.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>YEAR</name>
              <description>Year. Range from 0~63. </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MONTH</name>
              <description>Month. Range from 1~12.  </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DAY</name>
              <description>Day. Range from 1~31. </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RTC__HH_MM_SS__REG</name>
          <description>RTC__HH_MM_SS__REG</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xE0000000</resetMask>
          <fields>
            <field>
              <name>WK_NO</name>
              <description>Week number. 
000: Monday 
001: Tuesday 
010: Wednesday 
011: Thursday 
100: Friday 
101: Saturday 
110: Sunday 
111: / </description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Monday</name>
                  <description>Monday</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Tuesday</name>
                  <description>Tuesday</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Wednesday</name>
                  <description>Wednesday</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Thursday</name>
                  <description>Thursday</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Friday</name>
                  <description>Friday</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Saturday</name>
                  <description>Saturday</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sunday</name>
                  <description>Sunday</description>
                  <value>0b110</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HOUR</name>
              <description>Range from 0~23 </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MINUTE</name>
              <description>Range from 0~59  </description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SECOND</name>
              <description>Range from 0~59 </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>VDD_RTC_REG</name>
          <description>VDD RTC Regulate Register</description>
          <addressOffset>0x190</addressOffset>
          <resetValue>0x4</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>VDD_RTC_REGU</name>
              <description>These bits are useful for regulating the RTC_VIO from 0.7v to 1.4v, and the regulation step is 0.1v. 
000: 0.7v 
001: 0.8v 
010: 0.9v 
011: 1.0v 
100: 1.1v 
101: 1.2v 
110: 1.3v 
111: 1.4v </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_0_point_7v</name>
                  <description>0.7v</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_8v</name>
                  <description>0.8v</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0_point_9v</name>
                  <description>0.9v</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_0v</name>
                  <description>1.0v</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_1v</name>
                  <description>1.1v</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_2v</name>
                  <description>1.2v</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_3v</name>
                  <description>1.3v</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_4v</name>
                  <description>1.4v</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>USB OTG_EHCI0/OHCI0</name>
      <description>USB OTG_EHCI0/OHCI0</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C1A000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>ASYNCLISTADDR</name>
          <description>ASYNCLISTADDR</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>LINK</name>
              <description>Link Pointer (LP) This field contains the address of the next asynchronous queue head to be executed.  These bits correspond to memory address signals [31:5], respectively. </description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CAPLENGTH</name>
          <description>CAPLENGTH</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x10</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>CAPLENGTH</name>
              <description>The value in these bits indicates an offset to add to register base to find the beginning of the Operational Register Space. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CONFIGFLAG</name>
          <description>CONFIGFLAG</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>CONFIGURE</name>
              <description>Configure Flag(CF) Host software sets this bit as the last action in its process of configuring the Host Controller. This bit controls the default port-routing control logic as follow: Value Meaning 0 Port routing control logic default-routs each port to an implementation dependent classic host controller. 1 Port routing control logic default-routs all ports to this host controller. The default value of this field is `0`. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>FRINDEX</name>
          <description>FRINDEX</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>FRAME</name>
              <description>Frame Index The value in this register increment at the end of each time frame (e.g. micro-frame).Bits[N:3] are used for the Frame List current index. It Means that each location of the frame list is accessed 8 times(frames or  Micro-frames) before moving to the next index. The following illustrates Values of N based on the value of the Frame List Size field in the USBCMD register. USBCMD[Frame List Size] Number Elements N 00b 1024 12 01b 512 11 10b 256 10 11b Reserved  </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HCCPARAMS</name>
          <description>HCCPARAMS</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x78009</resetMask>
          <fields>
            <field>
              <name>EHCI</name>
              <description>Extended Capabilities Pointer (EECP) This optional field indicates the existence of a capabilities list. A value of 00b indicates no extended capabilities are implemented. A non-zero value in this register indicates the offset in PCI configuration space of the first EHCI extended capabiliby. The pointer value must be 40h or greater if implemented to maintain to consistency of the PCI header defined for this calss of device. The value of this field is always `00b`. </description>
              <bitRange>[18:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ISOCHRONOUS</name>
              <description>Isochronous Scheduling Threshold This field indicates, relative to the current position of the executing host controller, where software can reliably update the isochronous schedule. When bit[7] is zero, the value of the least significant 3 bits indicates the number of micro-frames a host controller can hold a set of isochronous data structures(one or more) before flushing the state. When bit[7] is a one, then host software assumes the host controller may cache an isochronous data structure for an entire frame. </description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ASYNCHRONOUS</name>
              <description>Asynchronous Schedule Park Capability If this bit is set to a one, then the host controller supports the park feature for high-speed queue heads in the Asynchronous Schedule. The feature can be disabled or enabled and set to a specific level by using the Asynchronous Schedule Park Mode Enable and Asynchronous Schedule Park Mode Count fields in the USBCMD register. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PROGRAMMABLE</name>
              <description>Programmable Frame List Flag If this bit is set to a zero, then system software must use a frame list length of 1024 elements with this host controller.The USBCMD register  Frame List Size field is a read-only register and should be set to zero. If set to 1,then system software can specify and use the frame list in the  USBCMD register Frame List Size field to cofigure the host controller. The frame list must always aligned on a 4K page boundary.This requirement ensures that the frame list is always physically contiguous. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HCIVERSION</name>
          <description>HCIVERSION</description>
          <addressOffset>0x2</addressOffset>
          <resetValue>0x100</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>HCIVERSION</name>
              <description>This is a 16-bits register containing a BCD encoding of the EHCI revision number supported by this host controller. The most significant byte of this register represents a major revision and the least significant byte is the minor revision. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HCI_ICR</name>
          <description>HCI_ICR</description>
          <addressOffset>0x800</addressOffset>
          <resetValue>0x10000000</resetValue>
          <resetMask>0x13131F03</resetMask>
          <fields>
            <field>
              <name>DMA</name>
              <description>Transfer Status Enable 
0: Disable 
1: Enable </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OHCI</name>
              <description>count select 
1: Simulation mode, the counters will be much shorter then real time 
0: Normal mode, the counters will count full time </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Simulation</name>
                  <description>Simulation mode, the counters will be much shorter then real time</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal mode, the counters will count full time</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SIMULATION</name>
              <description>Simulation mode 
1: Set PHY in a non-driving mode so the EHCI can detect device connection, this is used only for simulation 
0: No effect </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Set</name>
                  <description>Set PHY in a non-driving mode so the EHCI can detect device connection, this is used only for simulation</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EHCI</name>
              <description>HS force Set 1 to this field force the ehci enter the high speed mode during bus reset. This field only valid when the bit 1 is set. </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HSIC</name>
              <description>Connect detect 1 in this field enable the hsic phy to detect device connect pulse on the bus. </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HSIC</name>
              <description>Connect Interrupt Enable Enable the HSIC connect interrupt. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PP2VBUS</name>
              <description>1: ULPI wrapper interface will automatically set or clear DrvVbus register in ULPI PHY according to the port power status form the root hub 
0: ULPI wrapper will ignore the difference between power status of root hub and ULPI PHY </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ULPI_wrapper_interface</name>
                  <description>ULPI wrapper interface will automatically set or clear DrvVbus register in ULPI PHY according to the port power status form the root hub</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ULPI_wrapper_will_ignore</name>
                  <description>ULPI wrapper will ignore the difference between power status of root hub and ULPI PHY</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB</name>
              <description>Master interface INCR16 enable 
1: Use INCR16 when appropriate 
0: do not use INCR16,use other enabled INCRX or unspecified length burst INCR </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Use_INCR16</name>
                  <description>Use INCR16 when appropriate</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>do_not_use_INCR16_comma_use</name>
                  <description>do not use INCR16,use other enabled INCRX or unspecified length burst INCR</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB</name>
              <description>Master interface INCR8 enable 
1: Use INCR8 when appropriate 
0: do not use INCR8,use other enabled INCRX or unspecified length burst INCR </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Use_INCR8</name>
                  <description>Use INCR8 when appropriate</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>do_not_use_INCR8_comma_use</name>
                  <description>do not use INCR8,use other enabled INCRX or unspecified length burst INCR</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB</name>
              <description>Master interface burst type INCR4 enable 
1: Use INCR4 when appropriate 
0: do not use INCR4,use other enabled INCRX or unspecified length burst INCR </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Use_INCR4</name>
                  <description>Use INCR4 when appropriate</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>do_not_use_INCR4_comma_use</name>
                  <description>do not use INCR4,use other enabled INCRX or unspecified length burst INCR</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB</name>
              <description>Master interface INCRX align enable 
1: start INCRx burst only on burst x-align address 
0: Start burst on any double word boundary Note: This bit must enable if any bit of 11:9 is enabled </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>start_INCRx</name>
                  <description>start INCRx burst only on burst x-align address</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Start_burst</name>
                  <description>Start burst on any double word boundary Note: This bit must enable if any bit of 11:9 is enabled</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HSIC</name>
              <description>Phy Select 0:Select the UTMI Phy for the EHCI 1:Select the HSIC Phy for the EHCI </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ULPI</name>
              <description>bypass enable 
1: Enable UTMI interface, disable ULPI interface 
0: Enable ULPI interface, disable UTMI interface </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable_UTMI</name>
                  <description>Enable UTMI interface, disable ULPI interface</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable_ULPI</name>
                  <description>Enable ULPI interface, disable UTMI interface</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>HCSPARAMS</name>
          <description>HCSPARAMS</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF0FF80</resetMask>
          <fields>
            <field>
              <name>DEBUG_PORT_NUMBER</name>
              <description>Debug Port Number This register identifies which of the host controller ports is the debug port. The value is the port number (one based) of the debug port. This field will always be `0`. </description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>NUMBER_OF_COMPANION</name>
              <description>Number of Companion Controller (N_CC) This field indicates the number of companion controllers associated with this USB2.0 host controller. A zero in this field indicates there are no companion host controllers. And a value larger than zero in this field indicates there are companion USB1.1 host controller(s). This field will always be `0`. </description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>NUMBER_OF_PORT</name>
              <description>Number of  Port per Companion Controller(N_PCC) This field indicates the number of ports supported per companion host controller host controller. It is used to indicate the port routing configuration to system software. This field will always fix with `0`. </description>
              <bitRange>[11:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PORT_ROUTING_RULES</name>
              <description>Port Routing Rules This field indicates the method used by this implementation for how all ports are mapped to companion controllers. The value of this field has the following interpretation: Value Meaning 0 The first N_PCC ports are routed to the lowest numbered function companion host controller, the next N_PCC port are routed to the next lowest function companion controller, and so on.   1 The port routing is explicitly enumerated by the first N_PORTS elements of the HCSP-PORTTOUTE array. This field will always be `0`. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>N_PORTS_THIS</name>
              <description>1 N_PORTS This field specifies the number of physical downstream ports implemented on this host controller. The value of this field determines how many port registers are addressable in the Operational Register Space. Valid values are in the range of 0x1 to 0x0f. This field is always 1. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HCSP_PORTROUTE</name>
          <description>HCSP_PORTROUTE</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HCSP_PORTROUTE</name>
              <description>This optional field is valid only if Port Routing Rules field in HCSPARAMS register is set to a one. This field is used to allow a host controller implementation to explicitly describe to which companion host controller each implemented port is mapped. This field is a 15-element nibble array (each 4 bit is one array element). Each array location corresponds one-to-one with a physical port provided by the host controller (e.g. PORTROUTE [0] corresponds to the first PORTSC port, PORTROUTE [1] to the second PORTSC port, etc.). The value of each element indicates to which of the companion host controllers this port is routed. Only the first N_PORTS elements have valid information. A value of zero indicates that the port is routed to the lowest numbered function companion host controller. A value of one indicates that the port is routed to the next lowest numbered function companion host controller, and so on. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HSIC_CFG</name>
          <description>HSIC_CFG</description>
          <addressOffset>0x820</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFF</resetMask>
          <fields>
            <field>
              <name>SIDDQ</name>
              <description>SIDDQ </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>REF_CLK</name>
              <description>REF CLK </description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BIST_EN</name>
              <description>BIST EN </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP_BACK</name>
              <description>LOOP BACK </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>T_OUT</name>
              <description>T OUT SEL </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>T_CLK</name>
              <description>T CLK </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>T_ADDR</name>
              <description>T ADDR </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>T_DATA</name>
              <description>T DATA </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HSIC_PHY_STATUS</name>
          <description>HSIC_PHY_STATUS</description>
          <addressOffset>0x824</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <field>
              <name>BIST_ERROR</name>
              <description>BIST Error 
0: HSIC BIST Pass 
1: HSIC BIST Fail </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HSIC_BIST_Pass</name>
                  <description>HSIC BIST Pass</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HSIC_BIST_Fail</name>
                  <description>HSIC BIST Fail</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BIST_DONE</name>
              <description>Bist Done 
0: HSIC BIST is in progress 
1: HSIC BIST is done </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>in</name>
                  <description>HSIC BIST is in progress</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>done</name>
                  <description>HSIC BIST is done</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>T_DATA</name>
              <description>T DATA OUT HSIC Test Data Out </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HSIC_STATUS</name>
          <description>HSIC_STATUS</description>
          <addressOffset>0x804</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x10000</resetMask>
          <fields>
            <field>
              <name>HSIC</name>
              <description>Connect Status 1 in this field indicates a device connect pulse being detected on the bus. This field only valid when the EHCI HS force bit and the HSIC Phy Select bit is set. When the HSIC Connect Interrupt Enable is set, 1 in this bit will generate an interrupt to the system. This register is valid on HCI1. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcBulkCurrentED__BCED_</name>
          <description>HcBulkCurrentED__BCED_</description>
          <addressOffset>0x42C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>BULKCURRENTED_31_4</name>
              <description>BulkCurrentED[31:4] This is advanced to the next ED after the HC has served the present one. HC continues processing the list from where it left off in the last Frame. When it reaches the end of the Bulk list, HC checks the ControlListFilled of HcControl. If set, it copies the content of HcBulkHeadED to HcBulkCurrentED and clears the bit. If it is not set, it does nothing. HCD is only allowed to modify this register when the BulkListEnable of HcControl is cleared. When set, the HCD only reads the instantaneous value of this register. This is initially set to zero to indicate the end of the Bulk list. </description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BULK_CURRENT_ED</name>
              <description>BulkCurrentED [3:0] Because the general TD length is 16 bytes, the memory structure for the TD must be aligned to a 16-byte boundary. So the lower bits in the PCED, through bit 0 to bit 3 must be zero in this field. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcBulkHeadED_BHED_</name>
          <description>HcBulkHeadED_BHED_</description>
          <addressOffset>0x428</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>BHED_31_4</name>
              <description>BHED[31:4] The HcBulkHeadED register contains the physical address of the first Endpoint Descriptor of the Bulk list. HC traverses the Bulk list starting with the HcBulkHeadED pointer. The content is loaded from HCCA during the initialization of HC. </description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BHED_3_0</name>
              <description>BHED[3:0] Because the general TD length is 16 bytes, the memory structure for the TD must be aligned to a 16-byte boundary. So the lower bits in the PCED, through bit 0 to bit 3 must be zero in this field. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcCommandStatus</name>
          <description>HcCommandStatus</description>
          <addressOffset>0x408</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3000F</resetMask>
          <fields>
            <field>
              <name>SCHEDULING_OVERRUN_COUNT</name>
              <description>SchedulingOverrunCount These bits are incremented on each scheduling overrun error. It is initialized to 00b and wraps around at 11b. This will be incremented when a scheduling overrun is detected even if SchedulingOverrun in HcInterruptStatus has already been set. This is used by HCD to monitor any persistent scheduling problem. </description>
              <bitRange>[17:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>OWERSHIP_CHANGE_REQUEST</name>
              <description>OwershipChangeRequest This bit is set by an OS HCD to request a change of control of the HC. When set HC will set the OwnershipChange field in HcInterruptStatus. After the changeover, this bit is cleared and remains so until the next request from OS HCD. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BULKL_LIST_FILLED</name>
              <description>BulklListFilled This bit is used to indicate whether there are any TDs on the Bulk list. It is set by HCD whenever it adds a TD to an ED in the Bulk list.  When HC begins to process the head of the Bulk list, it checks BLF. As long as BulkListFilled is 0, HC will not start processing the Bulk list. If BulkListFilled is 1, HC will start processing the Bulk list and will set BF to 0. If HC finds a TD on the list, then HC will set BulkListFilled to 1 causing the Bulk list processing to continue. If no TD is found on the Bulk list, and if HCD does not set BulkListFilled, then BulkListFilled will still be 0 when HC completes processing the Bulk list and Bulk list processing will stop. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONTROL_LIST_FILLED</name>
              <description>ControlListFilled This bit is used to indicate whether there are any TDs on the Control list. It is set by HCD whenever it adds a TD to an ED in the Control list. When HC begins to process the head of the Control list, it checks CLF. As long as ControlListFilled is 0, HC will not start processing the Control list. If CF is 1, HC will start processing the Control list and will set ControlListFilled to 0. If HC finds a TD on the list, then HC will set ControlListFilled to 1 causing the Control list processing to continue. If no TD is found on the Control list, and if the HCD does not set ControlListFilled, then ControlListFilled will still be 0 when HC completes processing the Control list and Control list processing will stop. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HOST_CONTROLLER_RESET</name>
              <description>HostControllerReset This bit is by HCD to initiate a software reset of HC. Regardless of the functional state of HC, it moves to the USBSuspend state in which most of the operational registers are reset except those stated otherwise; e.g, the InteruptRouting field of HcControl, and no Host bus accesses are allowed. This bit is cleared by HC upon the completion of the reset operation. The reset operation must be completed within 10 ms. This bit, when set, should not cause a reset to the Root Hub and no subsequent reset signaling should be asserted to its downstream ports. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcControl</name>
          <description>HcControl</description>
          <addressOffset>0x404</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>REMOTE_WAKEUP_ENABLE</name>
              <description>RemoteWakeupEnable This bit is used by HCD to enable or disable the remote wakeup feature upon the detection of upstream resume signaling. When this bit is set and the ResumeDetected bit in HcInterruptStatus is set, a remote wakeup is signaled to the host system. Setting this bit has no impact on the generation of hardware interrupt. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>REMOTE_WAKEUP_CONNECTED</name>
              <description>RemoteWakeupConnected This bit indicates whether HC supports remote wakeup signaling. If remote wakeup is supported and used by the system, it is the responsibility of system firmware to set this bit during POST. HC clear the bit upon a hardware reset but does not alter it upon a software reset. Remote wakeup signaling of the host system is host-bus-specific and is not described in this specification. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTERRUPT_ROUTING</name>
              <description>InterruptRouting This bit determines the routing of interrupts generated by events registered in HcInterruptStatus. If clear, all interrupt are routed to the normal host bus interrupt mechanism. If set interrupts are routed to the System Management Interrupt. HCD clears this bit upon a hardware reset, but it does not alter this bit upon a software reset. HCD uses this bit as a tag to indicate the ownership of HC. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HOST_CONTROLLER_FUNCTIONAL_STATE</name>
              <description>HostControllerFunctionalState for USB 00b USBReset 01b USBResume 10b USBOperational 11b USBSuspend A transition to USBOperational from another state causes SOF generation to begin 1 ms later. HCD may determine whether HC has begun sending SOFs by reading the StartoFrame field of  HcInterruptStatus. This field may be changed by HC only when in the USBSUSPEND state. HC may move from the USBSUSPEND state to the USBRESUME state after detecting the resume signaling from a downstream port. HC enters USBSUSPEND after a software reset, whereas it enters USBRESET after a hardware reset. The latter also resets the Root Hub and asserts subsequent reset signaling to downstream ports. </description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BULK_LIST_ENABLE</name>
              <description>BulkListEnable This bit is set to enable the processing of the Bulk list in the next Frame. If cleared by HCD, processing of the Bulk list does not occur after the next SOF. HC checks this bit whenever it determines to process the list. When disabled, HCD may modify the list. If HcBulkCurrentED is pointing to an ED to be removed, HCD must advance the pointer by updating HcBulkCurrentED before re-enabling processing of the list. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONTROL_LIST_ENABLE</name>
              <description>ControlListEnable This bit is set to enable the processing of the Control list in the next Frame. If cleared by HCD, processing of the Control list does not occur after the next SOF. HC must check this bit whenever it determines to process the list. When disabled, HCD may modify the list. If HcControlCurrentED is pointing to an ED to be removed, HCD must advance the pointer by updating HcControlCurrentED before re-enabling processing of the list. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ISOCHRONOUS_ENABLE</name>
              <description>IsochronousEnable This bit is used by HCD to enable/disable processing of isochronous EDs. While processing the periodic list in a Frame, HC checks the status of this bit when it finds an Isochronous ED (F=1). If set (enabled), HC continues processing the EDs. If cleared (disabled), HC halts processing of the periodic list (which now contains only isochronous EDs) and begins processing the Bulk/Control lists. Setting this bit is guaranteed to take effect in the next Frame (not the current Frame). </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERIODIC_LIST_ENABLE</name>
              <description>PeriodicListEnable  This bit is set to enable the processing of periodic list in the next Frame. If cleared by HCD, processing of the periodic list does not occur after the next SOF. HC must check this bit before it starts processing the list. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONTROL_BULK_SERVICE_RATIO</name>
              <description>ControlBulkServiceRatio This specifies the service ratio between Control and Bulk EDs. Before processing any of the nonperiodic lists, HC must compare the ratio specified with its internal count on how many nonempty Control EDs have been processed, in determining whether to continue serving another Control ED or switching to Bulk EDs. The internal count will be retained when crossing the frame boundary. In case of reset, HCD is responsible for restoring this value. CBSR No. of Control EDs Over Bulk EDs Served 0                1:1 1                2:1 2                3:1 3                4:1 The default value is 0x0. </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcControlCurrentED_CCED_</name>
          <description>HcControlCurrentED_CCED_</description>
          <addressOffset>0x424</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CCED_31_4</name>
              <description>CCED[31:4] The pointer is advanced to the next ED after serving the present one. HC will continue processing the list from where it left off in the last Frame. When it reaches the end of the Control list, HC checks the ControlListFilled of in HcCommandStatus. If set, it copies the content of HcControlHeadED to HcControlCurrentED and clears the bit. If not set, it does nothing.  HCD is allowed to modify this register only when the ControlListEnable of HcControl is cleared. When set, HCD only reads the instantaneous value of this register. Initially, this is set to zero to indicate the end of the Control list. </description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CCED_3_0</name>
              <description>CCED[3:0] Because the general TD length is 16 bytes, the memory structure for the TD must be aligned to a 16-byte boundary. So the lower bits in the PCED, through bit 0 to bit 3 must be zero in this field. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcControlHeadED_CHED_</name>
          <description>HcControlHeadED_CHED_</description>
          <addressOffset>0x420</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>EHCD_31_4</name>
              <description>EHCD[31:4] The HcControlHeadED register contains the physical address of the first  Endpoint Descriptor of the Control list. HC traverse the Control list starting with the HcControlHeadED pointer. The content is loaded from HCCA during the initialization of HC. </description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EHCD_3_0</name>
              <description>EHCD[3:0] Because the general TD length is 16 bytes, the memory structure for the TD must be aligned to a 16-byte boundary. So the lower bits in the PCED, through bit 0 to bit 3 must be zero in this field. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcDoneHead</name>
          <description>HcDoneHead</description>
          <addressOffset>0x430</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>HCDONEHEAD_31_4</name>
              <description>HcDoneHead[31:4] When a TD is completed, HC writes the content of HcDoneHead to the NextTD field of the TD. HC then overwrites the content of HcDoneHead with the address of this TD. This is set to zero whenever HC writes the content of this register to HCCA. It also sets the WritebackDoneHead of HcInterruptStatus. </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>HCDONEHEAD_3_0</name>
              <description>HcDoneHead[3:0] Because the general TD length is 16 bytes, the memory structure for the TD must be aligned to a 16-byte boundary. So the lower bits in the PCED, through bit 0 to bit 3 must be zero in this field. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcFmInterval_Register</name>
          <description>HcFmInterval_Register</description>
          <addressOffset>0x434</addressOffset>
          <resetValue>0x2EDF</resetValue>
          <resetMask>0xFFFF3FFF</resetMask>
          <fields>
            <field>
              <name>FRAME_INTERVAL_TOGGLER</name>
              <description>FrameIntervalToggler HCD toggles this bit whenever it loads a new value to FrameInterval. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FS_LARGEST_DATA_PACKET</name>
              <description>FSLargestDataPacket This field specifies a value which is loaded into the Largest Data Packet Counter at the beginning of each frame. The counter value represents the largest amount of data in bits which can be sent or received by the HC in a single transaction at any given time without causing scheduling overrun. The field value is calculated by the HCD. </description>
              <bitRange>[30:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAME_INTERVAL</name>
              <description>FrameInterval This specifies the interval between two consecutive SOFs in bit times. The nominal value is set to be 11,999. HCD should store the current value of this field before resetting HC. By setting the HostControllerReset field of HcCommandStatus as this will cause the HC to reset this field to its nominal value. HCD may choose to restore the stored value upon the completion of the Reset sequence. </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcFmNumber</name>
          <description>HcFmNumber</description>
          <addressOffset>0x43C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>FRAME_NUMBER</name>
              <description>FrameNumber This is incremented when HcFmRemaining is re-loaded. It will be rolled over to 0x0 after 0x0ffff. When entering the USBOPERATIONAL state, this will be incremented automatically. The content will be written to HCCA after HC has incremented the FrameNumber at each frame boundary and sent a SOF but before HC reads the first ED in that Frame. After writing to HCCA, HC will set the StartofFrame in HcInterruptStatus. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcFmRemaining</name>
          <description>HcFmRemaining</description>
          <addressOffset>0x438</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80003FFF</resetMask>
          <fields>
            <field>
              <name>FRAME_REMAINING</name>
              <description>FrameRemaining Toggle This bit is loaded from the FrameIntervalToggle field of HcFmInterval whenever FrameRemaining reaches 0. This bit is used by HCD for the synchronization between FrameInterval and FrameRemaining. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FRAM_REMAINING</name>
              <description>FramRemaining This counter is decremented at each bit time. When it reaches zero, it is reset by loading the FrameInterval value specified in HcFmInterval at the next bit time boundary. When entering the USBOPERATIONAL state, HC re-loads the content with the FrameInterval of HcFmInterval and uses the updated value from the next SOF. </description>
              <bitRange>[13:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcHCCA</name>
          <description>HcHCCA</description>
          <addressOffset>0x418</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>HCCA_31_8</name>
              <description>HCCA[31:8] This is the base address of the Host Controller Communication Area. This area is used to hold the control structures and the Interrupt table that are accessed by both the Host Controller and the Host Controller Driver. </description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HCCA_7_0</name>
              <description>HCCA[7:0] The alignment restriction in HcHCCA register is evaluated by examining the number of zeros in the lower order bits. The minimum alignment is 256 bytes, therefore, bits 0 through 7 must always return 0 when read. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcInterruptDisable_Register</name>
          <description>HcInterruptDisable_Register</description>
          <addressOffset>0x414</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8000007F</resetMask>
          <fields>
            <field>
              <name>MASTER_INTERRUPT_ENABLE</name>
              <description>MasterInterruptEnable A written `0` to this field is ignored by HC. A `1` written to this field disables interrupt generation due events specified in the other bits of this register. This field is set after a hardware or software reset. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ROOT_HUB_STATUS_CHANGE</name>
              <description>RootHubStatusChange Interrupt Disable 0 Ignore; 1 Disable interrupt generation due to Root Hub Status Change; </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAME_NUMBER_OVERFLOW</name>
              <description>FrameNumberOverflow Interrupt Disable 0 Ignore; 1 Disable interrupt generation due to Frame Number Over Flow; </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>UNRECOVERABLE_ERROR</name>
              <description>UnrecoverableError Interrupt Disable 0 Ignore; 1 Disable interrupt generation due to Unrecoverable Error; </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESUME_DETECTED</name>
              <description>ResumeDetected Interrupt Disable 0 Ignore; 1 Disable interrupt generation due to Resume Detected; </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STARTOF_FRAME</name>
              <description>StartofFrame Interrupt Disable 0 Ignore; 1 Disable interrupt generation due to Start of  Flame; </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WRITEBACK_DONE_HEAD</name>
              <description>WritebackDoneHead Interrupt Disable 0 Ignore; 1 Disable interrupt generation due to Write back Done Head; </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SCHEDULING_OVERRUN</name>
              <description>SchedulingOverrun Interrupt Disable 0 Ignore; 1 Disable interrupt generation due to Scheduling Overrun; </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcInterruptEnable_Register</name>
          <description>HcInterruptEnable_Register</description>
          <addressOffset>0x410</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x8000007F</resetMask>
          <fields>
            <field>
              <name>MASTER_INTERRUPT_ENABLE</name>
              <description>MasterInterruptEnable A `0` writtern to this field is ignored by HC. A `1` written to this field enables interrupt generation due to events specified in the other bits of this register. This is used by HCD as Master Interrupt Enable. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ROOT_HUB_STATUS_CHANGE</name>
              <description>RootHubStatusChange Interrupt Enable 0 Ignore; 1 Enable interrupt generation due to Root Hub Status Change; </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAME_NUMBER_OVERFLOW</name>
              <description>FrameNumberOverflow Interrupt Enable 0 Ignore; 1 Enable interrupt generation due to Frame Number Over Flow;   </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>UNRECOVERABLE_ERROR</name>
              <description>UnrecoverableError Interrupt Enable 0 Ignore; 1 Enable interrupt generation due to Unrecoverable Error; </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESUME_DETECTED</name>
              <description>ResumeDetected Interrupt Enable 0 Ignore; 1 Enable interrupt generation due to Resume Detected; </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STARTOF_FRAME</name>
              <description>StartofFrame Interrupt Enable 0 Ignore; 1 Enable interrupt generation due to Start of  Flame; </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WRITEBACK_DONE_HEAD</name>
              <description>WritebackDoneHead Interrupt Enable 0 Ignore; 1 Enable interrupt generation due to Write back Done Head; </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SCHEDULING_OVERRUN</name>
              <description>SchedulingOverrun Interrupt Enable 0 Ignore; 1 Enable interrupt generation due to Scheduling Overrun; </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcInterruptStatus</name>
          <description>HcInterruptStatus</description>
          <addressOffset>0x40C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>ROOT_HUB_STATUS_CHANGE</name>
              <description>RootHubStatusChange This bit is set when the content of HcRhStatus or the content of any of HcRhPortStatus[NumberofDownstreamPort] has changed. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAME_NUMBER_OVERFLOW</name>
              <description>FrameNumberOverflow This bit is set when the MSb of HcFmNumber (bit 15) changes value, from 0 to 1 or from 1 to 0, and after HccaFrameNumber has been updated. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>UNRECOVERABLE_ERROR</name>
              <description>UnrecoverableError This bit is set when HC detects a system error not related to USB. HC should not proceed with any processing nor signaling before the system error has been corrected. HCD clears this bit after HC has been reset. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESUME_DETECTED</name>
              <description>ResumeDetected This bit is set when HC detects that a device on the USB is asserting resume signaling. It is the transition from no resume signaling to resume signaling causing this bit to be set. This bit is not set when HCD sets the USBRseume state. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STARTOF_FRAME</name>
              <description>StartofFrame This bit is set by HC at each start of frame and after the update of HccaFrameNumber. HC also generates a SOF token at the same time. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WRITEBACK_DONE_HEAD</name>
              <description>WritebackDoneHead This bit is set immediately after HC has written HcDoneHead to HccaDoneHead. Further updates of the HccaDoneHead will not occur until this bit has been cleared. HCD should only clear this bit after it has saved the content of HccaDoneHead. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SCHEDULING_OVERRUN</name>
              <description>SchedulingOverrun This bit is set when the USB schedule for the current Frame overruns and after the update of HccaFrameNumber. A scheduling overrun will also cause the SchedulingOverrunCount of HcCommandStatus to be Incremented. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcLSThreshold</name>
          <description>HcLSThreshold</description>
          <addressOffset>0x444</addressOffset>
          <resetValue>0x628</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <field>
              <name>LS_THRESHOLD</name>
              <description>LSThreshold This field contains a value which is compared to the FrameRemaining field prior to initiating a Low Speed transaction. The transaction is started only if FrameRemaining  this field. The value is calculated by HCD with the consideration of transmission and setup overhead. </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcPeriodCurrentED</name>
          <description>HcPeriodCurrentED</description>
          <addressOffset>0x41C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PCED_31_4</name>
              <description>PCED[31:4] This is used by HC to point to the head of one of the Periodec list which will be processed in the current Frame. The content of this register is updated by HC after a periodic ED has been processed. HCD may read the content in determining which ED is currently being processed at the time of reading. </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PCED_3_0</name>
              <description>PCED[3:0] Because the general TD length is 16 bytes, the memory structure for the TD must be aligned to a 16-byte boundary. So the lower bits in the PCED, through bit 0 to bit 3 must be zero in this field. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcPeriodicStatus</name>
          <description>HcPeriodicStatus</description>
          <addressOffset>0x440</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>PERIODIC_START</name>
              <description>PeriodicStart After a hardware reset, this field is cleared. This is then set by HCD during the HC initialization. The value is calculated roughly as 10% off from HcFmInterval. A typical value will be 0x2A3F (0x3e67??). When HcFmRemaining reaches the value specified, processing of the periodic lists will have priority over Control/Bulk processing. HC will therefore start processing the Interrupt list after completing the current Control or Bulk transaction that is in progress. </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcRevision</name>
          <description>HcRevision</description>
          <addressOffset>0x400</addressOffset>
          <resetValue>0x10</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>REVISION</name>
              <description>Revision This read-only field contains the BCD representation of the version of the HCI specification that is implemented by this HC. For example, a value of 0x11 corresponds to version 1.1. All of the HC implementations that are compliant with this specification will have a value of 0x10. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcRhDescriptorA</name>
          <description>HcRhDescriptorA</description>
          <addressOffset>0x448</addressOffset>
          <resetValue>0x2001201</resetValue>
          <resetMask>0xFF001FFF</resetMask>
          <fields>
            <field>
              <name>POWERONTOPOWERGOODTIME_THIS_BYTE_SPECIFIES_THE_DURATION</name>
              <description>PowerOnToPowerGoodTime[POTPGT] This byte specifies the duration HCD has to wait before accessing a powered-on port of the Root Hub. It is implementation-specific. The unit of time is 2 ms. The duration is calculated as POTPGT * 2ms. </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NO_OVER_CURRENT_PROTECTION</name>
              <description>NoOverCurrentProtection This bit describes how the overcurrent status for the Root Hub ports are reported. When this bit is cleared, the OverCurrentProtectionMode field specifies global or per-port reporting. 0  Over-current status is reported collectively for all downstream ports. 1 No overcurrent protection supported. </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OVER_CURRENT_PROTECTION_MODE</name>
              <description>OverCurrentProtectionMode This bit describes how the overcurrent status for the Root Hub ports are reported. At reset, these fields should reflect the same mode as PowerSwitchingMode. This field is valid only if the NoOverCurrentProtection field is cleared. 0 Over-current status is reported collectively for all downstream ports. 1 Over-current status is reported on per-port basis. </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DEVICE_TYPE_THIS_BIT_SPECIFIES_THAT</name>
              <description>Device Type This bit specifies that the Root Hub is not a compound device. The Root Hub is not permitted to be a compound device. This field should always read/write 0. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>POWER_SWITCHING_MODE</name>
              <description>PowerSwitchingMode This bit is used to specify how the power switching of the Root Hub ports is controlled. It is implementation-specific. This field is only valid if the NoPowerSwitching field is cleared. 0 All ports are powered at the same time. 1 Each port is powered individually. This mode allows port power to be controlled by either the global switch or per-port switching. If the PortPowerControlMask bit is set, the port responds only to port power commands (Set/ClearPortPower). If the port mask is cleared, then the port is controlled only by the global power switch (Set/ClearGlobalPower). </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NO_POWER_SWITHCING</name>
              <description>NoPowerSwithcing These bits are used to specify whether power switching is supported or ports are always powered. It is implementation-specific. When this bit is cleared, the PowerSwitchingMode specifies global or per-port switching. 0 Ports are power switched. 1 Ports are always powered on when the HC is powered on. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NUMBER_DOWNSTREAM_PORTS</name>
              <description>NumberDownstreamPorts These bits specify the number of downstream ports supported by the Root Hub. It is implementation-specific. The minimum number of ports is 1. The maximum number of ports supported. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcRhDescriptorB_Register</name>
          <description>HcRhDescriptorB_Register</description>
          <addressOffset>0x44C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PORT_POWER_CONTROL_MASK</name>
              <description>PortPowerControlMask Each bit indicates if a port is affected by a global power control command when PowerSwitchingMode is set. When set, the port's power state is only affected by per-port power control (Set/ClearPortPower). When cleared, the port is controlled by the global power switch (Set/ClearGlobalPower). If the device is configured to global switching mode (PowerSwitchingMode = 0 ), this field is not valid. Bit0 Reserved Bit1 Ganged-power mask on Port #1. Bit2 Ganged-power mask on Port #2. ...  Bit15 Ganged-power mask on Port #15. </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DEVICE_REMOVABLE</name>
              <description>DeviceRemovable Each bit is dedicated to a port of the Root Hub. When cleared, the attached device is removable. When set, the attached device is not removable. Bit0 Reserved Bit1 Device attached to Port #1. Bit2 Device attached to Port #2. ...  Bit15 Device attached to Port #15. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcRhPortStatus</name>
          <description>HcRhPortStatus</description>
          <addressOffset>0x454</addressOffset>
          <resetValue>0x100</resetValue>
          <resetMask>0x1F011F</resetMask>
          <fields>
            <field>
              <name>PORT_RESET_STATUS_CHANGE</name>
              <description>PortResetStatusChange This bit is set at the end of the 10-ms port reset signal. The HCD writes a `1` to clear this bit. Writing a `0` has no effect. 0 port reset is not complete 1 port reset is complete </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PORT_OVER_CURRENT_INDICATOR_CHANGE</name>
              <description>PortOverCurrentIndicatorChange This bit is valid only if overcurrent conditions are reported on a per-port basis. This bit is set when Root Hub changes the PortOverCurrentIndicator bit. The HCD writes a `1` to clear this bit. Writing a `0` has no effect. 0 no change in PortOverCurrentIndicator 1 PortOverCurrentIndicator has changed </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PORT_SUSPEND_STATUS_CHANGE</name>
              <description>PortSuspendStatusChange This bit is set when the full resume sequence has been completed. This sequence includes the 20-s resume pulse, LS EOP, and 3-ms resychronization delay. The HCD writes a `1` to clear this bit. Writing a `0` has no effect. This bit is also cleared when ResetStatusChange is set. 0 resume is not completed 1 resume completed </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PORT_ENABLE_STATUS_CHANGE</name>
              <description>PortEnableStatusChange This bit is set when hardware events cause the PortEnableStatus bit to be cleared. Changes from HCD writes do not set this bit. The HCD writes a `1` to clear this bit. Writing a `0` has no effect. 0 no change in PortEnableStatus 1 change in PortEnableStatus </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONNECT_STATUS_CHANGE</name>
              <description>ConnectStatusChange This bit is set whenever a connect or disconnect event occurs. The HCD writes a `1` to clear this bit. Writing a `0` has no effect. If CurrentConnectStatus is cleared when a SetPortReset,SetPortEnable, or SetPortSuspend write occurs, this bit is set to force the driver to re-evaluate the connection status since these writes should not occur if the port is disconnected. 0 no change in PortEnableStatus 1 change in PortEnableStatus  Note: If the DeviceRemovable[NDP] bit is set, this bit is set only after a Root Hub reset to inform the system that the device is attached. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_LOW_SPEED_DEVICE_ATTACHED_W_CLEAR_PORT_POWER</name>
              <description>(read)LowSpeedDeviceAttached This bit indicates the speed of the device attached to this port. When set, a Low Speed device is attached to this port. When clear, a Full Speed device is attached to this port. This field is valid only when the CurrentConnectStatus is set. 0 full speed device attached 1 low speed device attached  (write)ClearPortPower The HCD clears the PortPowerStatus bit by writing a `1` to this bit. Writing a `0` has no effect. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_PORT_POWER_STATUS_W_SET_PORT_POWER</name>
              <description>(read)PortPowerStatus This bit reflects the port`s power status, regardless of the type of power switching implemented. This bit is cleared if an overcurrent condition is detected. HCD sets this bit by writing SetPortPower or SetGlobalPower. HCD clears this bit by writing ClearPortPower or ClearGlobalPower. Which power control switches are enabled is determined by PowerSwitchingMode and PortPortControlMask[NumberDownstreamPort]. In global switching mode(PowerSwitchingMode=0), only Set/ClearGlobalPower controls this bit. In per-port power switching (PowerSwitchingMode=1), if the PortPowerControlMask[NDP] bit for the port is set, only Set/ClearPortPower commands are enabled. If the mask is not set, only Set/ClearGlobalPower commands are enabled. When port power is disabled, CurrentConnectStatus, PortEnableStatus, PortSuspendStatus, and PortResetStatus should be reset. 0 port power is off 1 port power is on  (write)SetPortPower The HCD writes a `1` to set the PortPowerStatus bit. Writing a `0` has no effect.  Note: This bit is always reads `1b` if power switching is not supported. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_PORT_RESET_STATUS_W_SET_PORT_RESET</name>
              <description>(read)PortResetStatus When this bit is set by a write to SetPortReset, port reset signaling is asserted. When reset is completed, this bit is cleared when PortResetStatusChange is set. This bit cannot be set if CurrentConnectStatus is cleared. 0 port reset signal is not active 1 port reset signal is active  (write)SetPortReset The HCD sets the port reset signaling by writing a `1` to this bit. Writing a `0` has no effect. If CurrentConnectStatus is cleared, this write does not set PortResetStatus, but instead sets ConnectStatusChange. This informs the driver that it attempted to reset a disconnected port. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_PORT_OVER_CURRENT_INDICATOR_W_CLEAR_SUSPEND_STATUS</name>
              <description>(read)PortOverCurrentIndicator This bit is only valid when the Root Hub is configured in such a way that overcurrent conditions are reported on a per-port basis. If per-port overcurrent reporting is not supported, this bit is set to 0. If cleared, all power operations are normal for this port. If set, an overcurrent condition exists on this port. This bit always reflects the overcurrent input signal. 0 no overcurrent condition. 1 overcurrent condition detected.  (write)ClearSuspendStatus The HCD writes a `1` to initiate a resume. Writing a `0` has no effect. A resume is initiated only if PortSuspendStatus is set. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_PORT_SUSPEND_STATUS_W_SET_PORT_SUSPEND</name>
              <description>(read)PortSuspendStatus This bit indicates the port is suspended or in the resume sequence. It is set by a SetSuspendState write and cleared when PortSuspendStatusChange is set at the end of the resume interval. This bit cannot be set if CurrentConnectStatus is cleared. This bit is also cleared when PortResetStatusChange is set at the end of the port reset or when the HC is placed in the USBRESUME state. If an upstream resume is in progress, it should propagate to the HC. 0 port is not suspended 1 port is suspended  (write)SetPortSuspend The HCD sets the PortSuspendStatus bit by writing a `1` to this bit. Writing a `0` has no effect. If CurrentConnectStatus is cleared, this write does not set PortSuspendStatus; instead it sets ConnectStatusChange. This informs the driver that it attempted to suspend a disconnected port. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_PORT_ENABLE_STATUS_W_SET_PORT_ENABLE</name>
              <description>(read)PortEnableStatus This bit indicates whether the port is enabled or disabled. The Root Hub may clear this bit when an overcurrent condition, disconnect event, switched-off power, or operational bus error such as babble is detected. This change also causes PortEnabledStatusChange to be set. HCD sets this bit by writing SetPortEnable and clears it by writing ClearPortEnable. This bit cannot be set when CurrentConnectStatus is cleared. This bit is also set, if not already, at the completion of a port reset when ResetStatusChange is set or port suspend when SuspendStatusChange is set. 0 port is disabled 1 port is enabled  (write)SetPortEnable The HCD sets PortEnableStatus by writing a `1`. Writing a `0` has no effect. If CurrentConnectStatus is cleared, this write does not set PortEnableStatus, but instead sets ConnectStatusChange. This informs the driver that it attempted to enable a disconnected Port. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_CURRENT_CONNECT_STATUS_W_CLEAR_PORT_ENABLE</name>
              <description>(read)CurrentConnectStatus This bit reflects the current state of the downstream port. 0 No device connected 1 Device connected (write)ClearPortEnable The HCD writes a `1` to clear the PortEnableStatus bit. Writing `0` has no effect. The CurrentConnectStatus is not affected by any write. Note: This bit is always read `1` when the attached device is nonremovalble(DviceRemoveable[NumberDownstreamPort]). </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HcRhStatus_Register</name>
          <description>HcRhStatus_Register</description>
          <addressOffset>0x450</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80038003</resetMask>
          <fields>
            <field>
              <name>WRITE_A_CLEARS_DEVICEREMOTEWAKEUPENABLE</name>
              <description>(write)ClearRemoteWakeupEnable Write a `1` clears DeviceRemoteWakeupEnable. Write a `0` has no effect. </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>OVER_CURRENT_INDICATOR_CHANG</name>
              <description>OverCurrentIndicatorChang This bit is set by hardware when a change has occurred to the OverCurrentIndicator field of this register. The HCD clears this bit by writing a `1`.Writing a `0` has no effect. </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_LOCAL_POWER_STARTUS_CHANGE_W_SET_GLOBAL_POWER</name>
              <description>(read)LocalPowerStartusChange The Root Hub does not support the local power status features, thus, this bit is always read as `0`. (write)SetGlobalPower In global power mode (PowerSwitchingMode=0), This bit is written to `1` to turn on power to all ports (clear PortPowerStatus). In per-port power mode, it sets PortPowerStatus only on ports whose PortPowerControlMask bit is not set. Writing a `0` has no effect. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R_DEVICE_REMOTE_WAKEUP_ENABLE_W_SET_REMOTE_WAKEUP_ENABLE</name>
              <description>(read)DeviceRemoteWakeupEnable This bit enables a ConnectStatusChange bit as a resume event, causing a USBSUSPEND to USBRESUME state transition and setting the ResumeDetected interrupt. 0 ConnectStatusChange is not a remote wakeup event. 1 ConnectStatusChange is a remote wakeup event.  (write)SetRemoteWakeupEnable Writing a `1` sets DeviceRemoveWakeupEnable. Writing a `0` has no effect. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OVER_CURRENT_INDICATOR</name>
              <description>OverCurrentIndicator This bit reports overcurrent conditions when the global reporting is implemented. When set, an overcurrent condition exists. When cleared, all power operations are normal.  If per-port overcurrent protection is implemented this bit is always `0` </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>R_LOCAL_POWER_STATUS_W_CLEAR_GLOBAL_POWER</name>
              <description>(Read)LocalPowerStatus When read, this bit returns the LocalPowerStatus of the Root Hub. The Root Hub does not support the local power status feature; thus, this bit is always read as `0`. (Write)ClearGlobalPower When write, this bit is operated as the ClearGlobalPower. In global power mode (PowerSwitchingMode=0), This bit is written to `1` to turn off power to all ports (clear PortPowerStatus). In per-port power mode, it clears PortPowerStatus only on ports whose PortPowerControlMask bit is not set. Writing a `0` has no effect. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PERIODICLISTBASE</name>
          <description>PERIODICLISTBASE</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>BASE</name>
              <description>Base Address These bits correspond to memory address signals [31:12], respectively. This register contains the beginning address of the Periodic Frame List in the system memory.  System software loads this register prior to starting the schedule execution by the Host Controller. The memory structure referenced by this physical memory pointer is assumed to be 4-K byte aligned. The contents of this register are combined with the Frame Index Register (FRINDEX) to enable the Host Controller to step through the Periodic Frame List in sequence. </description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PORTSC</name>
          <description>PORTSC</description>
          <addressOffset>0x54</addressOffset>
          <resetValue>0x2000</resetValue>
          <resetMask>0x3FEDFF</resetMask>
          <fields>
            <field>
              <name>WKDSCNNT_E_WRITING</name>
              <description>WKDSCNNT_E Writing this bit to a one enables the port to be sensitive to device disconnects as wake-up events. This field is zero if Port Power is zero. The default value in this field is `0`. </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WKCNNT_E_WRITING</name>
              <description>WKCNNT_E Writing this bit to a one enable the port to be sensitive to device connects as wake-up events. This field is zero if Port Power is zero. The default value in this field is `0`. </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PORT_TEST</name>
              <description>Port Test Control The value in this field specifies the test mode of the port. The encoding of the test mode bits are as follow: Bits Test Mode 0000b The port is NOT operating in a test mode. 0001b Test J_STATE 0010b Test K_STATE 0011b Test SE0_NAK 0100b Test Packet 0101b Test FORCE_ENABLE 0110b - 1111b  Reserved The default value in this field is `0000b`. </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PORT_OWNER</name>
              <description>Port Owner This bit unconditionally goes to a 0b when the Configured bit in the CONFIGFLAG register makes a 0b to 1b transition. This bit unconditionally goes to 1b whenever the Configured bit is zero. System software uses this field to release ownership of the port to selected host controller (in the event that the attached device is not a high-speed device).Software writes a one to this bit when the attached device is not a high-speed device. A one in this bit means that a companion host controller owns and controls the port. Default Value = 1b. </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LINE_STATUS</name>
              <description>Line Status These bits reflect the current logical levels of the D+ (bit11) and D-(bit10) signal lines. These bits are used for detection of low-speed USB devices prior to port reset and enable sequence. This read only field is valid only when the port enable bit is zero and the current connect status bit is set to a one. The encoding of the bits are: Bit[11:10] USB State Interpretation 00b SE0 Not Low-speed device, perform EHCI reset. 10b J-state Not Low-speed device, perform EHCI reset. 01b K-state Low-speed device, release ownership of port. 11b Undefined Not Low-speed device, perform EHCI reset. This value of this field is undefined if Port Power is zero. </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PORT_RESET</name>
              <description>Port Reset 1=Port is in Reset. 0=Port is not in Reset. Default value = 0. When software writes a one to this bit (from a zero), the bus reset sequence as defined in the USB Specification Revision 2.0 is started. Software writes a zero to this bit to terminate the bus reset sequence. Software must keep this bit at a one long enough to ensure the reset sequence, as specified in the USB Specification Revision 2.0, completes. Notes: when software writes this bit to a one , it must also write a zero to the Port Enable bit. Note that when software writes a zero to this bit there may be a delay before the bit status changes to a zero. The bit status will not read as a zero until after the reset has completed. If the port is in high-speed mode after reset is complete, the host controller will automatically enable this port (e.g. set the Port Enable bit to a one). A host controller must terminate the reset and stabilize the state of the port within 2 milliseconds of software transitioning this bit from a one to a zero. For example: if the port detects that the attached device is high-speed during reset, then the host controller must have the port in the enabled state with 2ms of software writing this bit to a zero. The HC Halted bit in the USBSTS register should be a zero before software attempts to use this bit. The host controller may hold Port Reset asserted to a one when the HC Halted bit is a one. This field is zero if Port Power is zero. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SUSPEND_PORT</name>
              <description>Suspend Port Enabled Bit and Suspend bit of this register define the port states as follows: Bits[Port Enables, Suspend] Port State      0x Disable      10 Enable      11 Suspend When in suspend state, downstream propagation of data is blocked on this port, except for port reset. The blocking occurs at the end of the current transaction, if a transaction was in progress when this bit was written to 1. In the suspend state, the port is sensitive to resume detection. Not that the bit status does not change until the port is suspend and that there may be a delay in suspending a port if there is a transaction currently in progress on the USB. A write of zero to this bit is ignored by the host controller. The host controller will unconditionally set this bit to a zero when: 1. Software sets the Force Port Resume bit to a zero(from a one). 2. Software sets the Port Reset bit to a one(from a zero). If host software sets this bit to a one when the port is not enabled(i.e. Port enabled bit is a zero), the results are undefined. This field is zero if Port Power is zero. The default value in this field is `0`. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FORCE_PORT</name>
              <description>Force Port Resume 1 = Resume detected/driven on port. 0 = No resume (K-state) detected/   driven on port. Default value = 0. This functionality defined for manipulating this bit depends on the value of the Suspend bit. For example, if the port is not suspend and software transitions this bit to a one, then the effects on the bus are undefined. Software sets this bit to a 1 drive resume signaling. The Host Controller sets this bit to a 1 if a J-to-K transition is detected while the port is in the Suspend state. When this bit transitions to a one because a J-to-K transition is detected, the Port Change Detect bit in the USBSTS register is also set to a one. If software sets this bit to a one, the host controller must not set the Port Change Detect bit. Note that when the EHCI controller owns the port, the resume sequence follows the defined sequence documented in the USB Specification Revision 2.0. The resume signaling (Full-speed `K`) is driven on the port as long as this remains a one. Software must appropriately time the Resume and set this bit to a zero when the appropriate amount of time has elapsed. Writing a zero (from one) causes the port to return high-speed mode (forcing the bus below the port into a high-speed idle). This bit will remain a one until the port has switched to high-speed idle. The host controller must complete this transition within 2 milliseconds of software setting this bit to a zero. This field is zero if Port Power is zero. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OVER_CURRENT_CHANGE</name>
              <description>Over-current Change Default = 0. This bit gets set to a one when there is a change to Over-current Active. Software clears this bit by writing a one to this bit position. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>OVER_CURRENT_ACTIVE</name>
              <description>Over-current Active 0 = This port does not have an over-current condition. 1 = This port currently has an over-current condition. This bit will automatically transition from a one to a zero when the over current condition is removed. The default value of this bit is `0`. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PORT_ENABLE/DISABLE</name>
              <description>Port Enable/Disable Change Default = 0. 1 = Port enabled/disabled status has changed. 0 = No change. For the root hub, this bit gets set to a one only when a port is disabled due to the appropriate conditions existing at the EOF2 point (See Chapter 11 of the USB Specification for the definition of a Port Error). Software clears this bit by writing a 1 to it. This field is zero if Port Power is zero. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>PORT_ENABLED/DISABLED</name>
              <description>Port Enabled/Disabled 1=Enable, 0=Disable. Ports can only be enabled by the host controller as a part of the reset and enable. Software cannot enable a port by writing a one to this field. The host controller will only set this bit to a one when the reset sequence determines that the attached device is a high-speed device. Ports can be disabled by either a fault condition(disconnect event or other fault condition) or by host software. Note that the bit status does not change until the port state actually changes. There may be a delay in disabling or enabling a port due to other host controller and bus events.  When the port is disabled, downstream propagation of data is blocked on this port except for reset. The default value of this field is `0`. This field is zero if Port Power is zero. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONNECT_STATUS</name>
              <description>Connect Status Change 1=Change in Current Connect Status, 0=No change, Default=0. Indicates a change has occurred in the port`s Current Connect Status. The host controller sets this bit for all changes to the port device connect status, even if system software has not cleared an existing connect status change. For example, the insertion status changes twice before system software has cleared the changed condition, hub hardware will be `setting` an already-set bit. Software sets this bit to 0 by writing a 1 to it. This field is zero if Port Power is zero. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>CURRENT_CONNECT</name>
              <description>Current Connect Status Device is present on port when the value of this field is a one, and no device is present on port when the value of this field is a zero. This value reflects the current state of the port, and may not correspond directly to the event that caused the Connect Status Change(Bit 1) to be set. This field is zero if Port Power zero. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>USBCMD</name>
          <description>USBCMD</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x80000</resetValue>
          <resetMask>0xFF0BFF</resetMask>
          <fields>
            <field>
              <name>INTERRUPT_THRESHOLD_CONTROL_THE_VALUE</name>
              <description>Interrupt Threshold Control The value in this field is used by system software to select the maximum rate at which the host controller will issue interrupts. The only valid values are defined below: Value Minimum Interrupt Interval 0x00 Reserved 0x01 1 micro-frame 0x02 2 micro-frame 0x04 4 micro-frame 0x08 8 micro-frame(default, equates to 1 ms) 0x10 16 micro-frame(2ms) 0x20 32 micro-frame(4ms) 0x40 64 micro-frame(8ms) Any other value in this register yields undefined results. The default value in this field is 0x08 . Software modifications to this bit while HC Halted bit is equal to zero results in undefined behavior. </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE</name>
              <description>Asynchronous Schedule Park Mode Enable If the Asynchronous Park Capability bit in the HCCPARAMS register is a one, then this bit defaults to a 1 and is R/W. Otherwise the bit must be a zero and is Read Only. Software uses this bit to enable or disable Park mode. When this bit is one, Park mode is enabled. When this bit is zero, Park mode is disabled. </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ASYNCHRONOUS_SCHEDULE_PARK_MODE_COUNT</name>
              <description>Asynchronous Schedule Park Mode Count Asynchronous Park Capability bit in the HCCPARAMS register is a one, Then this field defaults to 0x3 and is W/R. Otherwise it defaults to zero and is R. It contains a count of the number of successive transactions the host controller is allowed to execute from a high-speed queue head on the Asynchronous schedule before continuing traversal of the Asynchronous schedule. Valid value are 0x1 to 0x3.Software must not write a zero to this bit when Park Mode Enable is a one as it will result in undefined behavior. </description>
              <bitRange>[9:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>LIGHT_HOST_CONTROLLER_RESET_THIS</name>
              <description>Light Host Controller Reset This control bit is not required. If implemented, it allows the driver to reset the EHCI controller without affecting the state of the ports or relationship to the companion host controllers. For example, the PORSTC registers should not be reset to their default values and the CF bit setting should not go to zero (retaining port ownership relationships). A host software read of this bit as zero indicates the Light Host Controller Reset has completed and it si safe for software to re-initialize the host controller. A host software read of this bit as a one indicates the Light Host  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL</name>
              <description>Interrupt on Async Advance Doorbell This bit is used as a doorbell by software to tell the host controller to issue an interrupt the next time it advances asynchronous schedule. Soft- Ware must write a 1 to this bit to ring the doorbell. When the host controller has evicted all appropriate cached schedule state, it sets the Interrupt on Async Advance status bit in the USBSTS. if the Interrupt on Async Advance Enable bit in the USBINTR register is a one then the host controller will assert an interrupt at the next interrupt threshold. The host controller sets this bit to a zero after it has set the Interrupt on Async Advance status bit in the USBSTS register to a one. Software should not write a one to this bit when the asynchronous schedule is disabled. Doing so will yield undefined results. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ASYNCHRONOUS_SCHEDULE_ENABLE_THIS_BIT</name>
              <description>Asynchronous Schedule Enable This bit controls whether the host controller skips processing the Asynchronous Schedule. Values mean: Bit Value Meaning 0 Do not process the Asynchronous Schedule.  1 Use the ASYNLISTADDR register to access the Asynchronous Schedule. The default value of this field is `0b`. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERIODIC_SCHEDULE_ENABLE_THIS_BIT</name>
              <description>Periodic Schedule Enable This bit controls whether the host controller skips processing the Periodic Schedule. Values mean: Bit Value Meaning 0 Do not process the Periodic Schedule.  1 Use the PERIODICLISTBASE register to access the Periodic Schedule. The default value of this field is `0b`. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAME_LIST_SIZE_THIS_FIELD</name>
              <description>Frame List Size This field is R/W only if Programmable Frame List Flag in the HCCPARAMS registers is set to a one. This field specifies the size of the  Frame list. The size the frame list controls which bits in the Frame Index  Register should be used for the Frame List Current index. Values mean: Bits Meaning 00b 1024 elements(4096bytes)Default value 01b 512 elements(2048byts) 10b 256 elements(1024bytes)For resource-constrained condition 11b reserved The default value is `00b`. </description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>HOST_CONTROLLER_RESET_THIS_CONTROL</name>
              <description>Host Controller Reset This control bit is used by software to reset the host controller. The effects of this on Root Hub registers are similar to a Chip Hardware Reset. When software writes a one to this bit, the Host Controller resets its internal pipelines, timers, counters, state machines, etc. to their initial value. Any transaction currently in progress on USB is immediately terminated. A USB reset is not driven on downstream ports. All operational registers, including port registers and port state machines are set to their initial values. Port ownership reverts to the companion host controller(s). Software must reinitialize the host controller as described in Section 4.1 of the CHEI Specification in order to return the host controller to an operational state. This bit is set to zero by the Host Controller when the reset process is complete. Software cannot terminate the reset process early by writing a zero to this register. Software should not set this bit to a one when the HC Halted bit in the USBSTS register is a zero. Attempting to reset an actively running host controller will result in undefined behavior. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RUN/STOP_WHEN_SET</name>
              <description>Run/Stop When set to a 1, the Host Controller proceeds with execution of the schedule. When set to 0, the Host Controller completes the current and any actively pipelined transactions on the USB and then halts. The Host Controller must halt within 16 micro-frames after software clears this bit. The HC Halted bit indicates when the Host Controller has finished its pending pipelined transactions and has entered the stopped state. Software must not write a one to this field unless the Host Controller is in the Halt State. The default value is 0x0. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>USBINTR</name>
          <description>USBINTR</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <field>
              <name>INTERRUPT_ON_ASYNC_ADVANCE_ENABLE</name>
              <description>Interrupt on Async Advance Enable When this bit is 1, and the Interrupt on Async Advance bit in the USBSTS register is 1, the host controller will issue an interrupt at the next interrupt threshold. The interrupt is acknowledged by software clearing the Interrupt on Async Advance bit. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HOST_SYSTEM_ERROR_ENABLE</name>
              <description>Host System Error Enable When this bit is 1, and the Host System Error Status bit in the USBSTS register is 1, the host controller will issue an interrupt. The interrupt is acknowledged by software clearing the Host System Error bit. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FRAME_LIST_ROLLOVER_ENABLE</name>
              <description>Frame List Rollover Enable When this bit is 1, and the Frame List Rollover bit in the USBSTS register is 1, the host controller will issue an interrupt. The interrupt is acknowledged by software clearing the Frame List Rollover bit. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PORT_CHANGE_INTERRUPT_ENABLE</name>
              <description>Port Change Interrupt Enable When this bit is 1, and the Port Chang Detect bit in the USBSTS register is 1, the host controller will issue an interrupt. The interrupt is acknowledged by software clearing the Port Chang Detect bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>USB_ERROR_INTERRUPT_ENABLE</name>
              <description>USB Error Interrupt Enable When this bit is 1, and the USBERRINT bit in the USBSTS register is 1,the host controller will issue an interrupt at the next interrupt threshold. The interrupt is acknowledged by software clearing the USBERRINT bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>USB_INTERRUPT_ENABLE_WHEN_THIS</name>
              <description>USB Interrupt Enable When this bit is 1, and the USBINT bit in the USBSTS register is 1,the host controller will issue an interrupt at the next interrupt threshold. The interrupt is acknowledged by software clearing the USBINT bit </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>USBSTS</name>
          <description>USBSTS</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x1000</resetValue>
          <resetMask>0xF03F</resetMask>
          <fields>
            <field>
              <name>ASYNCHRONOUS_SCHEDULE_STATUS_THE_BIT</name>
              <description>Asynchronous Schedule Status The bit reports the current real status of Asynchronous Schedule. If this bit is a zero then the status of the Asynchronous Schedule is disabled. If this bit is a one then the status of the Asynchronous Schedule is enabled. The Host Controller is not required to immediately disable or enable the Asynchronous Schedule when software transitions the Asynchronous Schedule Enable bit in the USBCMD register. When this bit and the Asynchronous Schedule Enable bit are the same value, the Asynchronous Schedule is either enabled (1) or disabled (0).  </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PERIODIC_SCHEDULE_STATUS_THE_BIT</name>
              <description>Periodic Schedule Status The bit reports the current real status of the Periodic Schedule. If this bit is a zero then the status of the Periodic Schedule is disabled. If this bit is a one then the status of the Periodic Schedule is enabled. The Host Controller is not required to immediately disable or enable the Periodic Schedule when software transitions the Periodic Schedule Enable bit in the USBCMD register. When this bit and the Periodic Schedule Enable bit are the same value, the Periodic Schedule is either enabled (1) or disabled (0). </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RECLAMATION_THIS_IS_A_READ_ONLY</name>
              <description>Reclamation This is a read-only status bit, which is used to detect an empty asynchronous schedule. </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>HC_HALTED_THIS_BIT</name>
              <description>HC Halted This bit is a zero whenever the Run/Stop bit is a one. The Host Controller Sets this bit to one after it has stopped executing as a result of the Run/Stop bit being set to 0, either by software or by the Host Controller Hardware (e.g. internal error). The default value is `1`. </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>INTERRUPT_ON_ASYNC_ADVANCE_SYSTEM</name>
              <description>Interrupt on Async Advance System software can force the host controller to issue an interrupt the next time the host controller advances the asynchronous schedule by writing a one to the Interrupt on Async Advance Doorbell bit in the USBCMD register. This status bit indicates the assertion of that interrupt source. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>HOST_SYSTEM_ERROR_THE_HOST</name>
              <description>Host System Error The Host Controller set this bit to 1 when a serious error occurs during a host system access involving the Host Controller module. When this error occurs, the Host Controller clears the Run/Stop bit in the Command register to prevent further execution of the scheduled TDs. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>FRAME_LIST_ROLLOVER_THE_HOST</name>
              <description>Frame List Rollover The Host Controller sets this bit to a one when the Frame List Index rolls over from its maximum value to zero. The exact value at which the rollover occurs depends on the frame list size. For example, if the frame list size is 1024, the Frame Index Register rolls over every time FRINDEX [13] toggles. Similarly, if the size is 512, the Host Controller sets this bit to a one every time FRINDEX [12] toggles. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>PORT_CHANGE_DETECT_THE_HOST</name>
              <description>Port Change Detect The Host Controller sets this bit to a one when any port for which the Port Owner bit is set to zero has a change bit transition from a zero to a one or a Force Port Resume bit transition from a zero to a one as a result of a J-K transition detected on a suspended port. This bit will also be set as a result of the Connect Status Chang being set to a one after system software has relinquished ownership of a connected port by writing a one to a port`s Port Owner bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>USB_ERROR_INTERRUPT_THE_HOST</name>
              <description>USB Error Interrupt The Host Controller sets this bit to 1 when completion of USB transaction results in an error condition(e.g. error counter underflow).If the TD on which the error interrupt occurred also had its IOC bit set, both. This bit and USBINT bit are set. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
            <field>
              <name>USB_INTERRUPT_THE_HOST_CONTROLLER</name>
              <description>USB Interrupt The Host Controller sets this bit to a one on the completion of a USB transaction, which results in the retirement of a Transfer Descriptor that had its IOC bit set. The Host Controller also sets this bit to 1 when a short packet is detected (actual number of bytes received was less than the expected number of bytes) </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>clear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UTMI_TUNE</name>
          <description>UTMI_TUNE</description>
          <addressOffset>0x818</addressOffset>
          <resetValue>0x23438E4</resetValue>
          <resetMask>0x3FFFFFF</resetMask>
          <fields>
            <field>
              <name>COMPDISTUNE</name>
              <description></description>
              <bitRange>[25:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SQRXTUNE</name>
              <description></description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXPREEMPPULSETUNE</name>
              <description></description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OTGTUNE</name>
              <description></description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXFSLSTUNE</name>
              <description></description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXVREFTUNE</name>
              <description></description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXHSXVTUNE</name>
              <description></description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXRISETUNE</name>
              <description></description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXRESTUNE</name>
              <description></description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXPREEMPAMPTUNE</name>
              <description></description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>TIMER</name>
      <description>TIMER</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C20C00</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>AVS_CNT0_REG</name>
          <description>AVS Counter 0 Register</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>AVS_CNT0</name>
              <description>Counter 0 for Audio/ Video Sync Application The high 32 bits of the internal 33-bits counter register. The initial value of the internal 33-bits counter register can be set by software. The LSB bit of the 33-bits counter register should be zero when the initial value is updated. It will count from the initial value. The initial value can be updated at any time. It can also be paused by setting AVS_CNT0_PS to `1`. When it is paused, the counter won`t increase. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AVS_CNT1_REG</name>
          <description>AVS Counter 1 Register</description>
          <addressOffset>0x88</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>AVS_CNT1</name>
              <description>Counter 1 for Audio/ Video Sync Application The high 32 bits of the internal 33-bits counter register. The initial value of the internal 33-bits counter register can be set by software. The LSB bit of the 33-bits counter register should be zero when the initial value is updated. It will count from the initial value. The initial value can be updated at any time. It can also be paused by setting AVS_CNT1_PS to `1`. When it is paused, the counter won`t increase. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>AVS_CNT_CTL_REG</name>
          <description>AVS Control Register</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x303</resetMask>
          <fields>
            <field>
              <name>AVS_CNT1_PS</name>
              <description>Audio/Video Sync Counter 1 Pause Control 
0: Not pause 
1: Pause Counter 1. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Not_pause</name>
                  <description>Not pause</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pause</name>
                  <description>Pause Counter 1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AVS_CNT0_PS</name>
              <description>Audio/Video Sync Counter 0 Pause Control 
0: Not pause 
1: Pause Counter 0. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Not_pause</name>
                  <description>Not pause</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pause</name>
                  <description>Pause Counter 0.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AVS_CNT1_EN</name>
              <description>Audio/Video Sync Counter 1 Enable/ Disable. The counter source is OSC24M. 
0: Disable 
1: Enable. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AVS_CNT0_EN</name>
              <description>Audio/Video Sync Counter 1 Enable/ Disable. The counter source is OSC24M. 
0: Disable 
1: Enable. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AVS_CNT_DIV_REG</name>
          <description>AVS Divisor Register</description>
          <addressOffset>0x8C</addressOffset>
          <resetValue>0x5DB05DB</resetValue>
          <resetMask>0xFFF0FFF</resetMask>
          <fields>
            <field>
              <name>AVS_CNT1_D</name>
              <description>Divisor N for AVS Counter 1 AVS CN1 CLK=24MHz/Divisor_N1. Divisor N1 = Bit [27:16] + 1. The number N is from 1 to 0x7ff. The zero value is reserved. The internal 33-bits counter engine will maintain another 12-bits counter. The 12-bits counter is used for counting the cycle number of one 24Mhz clock. When the 12-bits counter reaches (&gt;= N) the divisor value, the internal 33-bits counter register will increase 1 and the 12-bits counter will reset to zero and restart again. Note : It can be configured by software at any time. </description>
              <bitRange>[27:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AVS_CNT0_D</name>
              <description>Divisor N for AVS Counter 0 AVS CN0 CLK=24MHz/Divisor_N0. Divisor N0 = Bit [11:0] + 1 The number N is from 1 to 0x7ff. The zero value is reserved. The internal 33-bits counter engine will maintain another 12-bits counter. The 12-bits counter is used for counting the cycle number of one 24Mhz clock. When the 12-bits counter reaches (&gt;= N) the divisor value, the internal 33-bits counter register will increase 1 and the 12-bits counter will reset to zero and restart again. Note : It can be configured by software at any time. </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CNT64_CTRL_REG</name>
          <description>64-bit Counter Control Register</description>
          <addressOffset>0xD0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80000007</resetMask>
          <fields>
            <field>
              <name>CNT64_TEST_EN</name>
              <description>64-bit Counter Test Mode Enable. 
0: Normal Mode,  
1: Test Mode.  In the Test Mode, this Counter Low/Hi registers will count simultaneously. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal Mode,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Test</name>
                  <description>Test Mode.  In the Test Mode, this Counter Low/Hi registers will count simultaneously.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CNT64_CLK_SRC_SEL</name>
              <description>64-bit Counter Clock Source Select. 
0: OSC24M 
1: / </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CNT64_RL_EN</name>
              <description>64-bit Counter Read Latch Enable. 
0: no effect, 1: to latch the 64-bit Counter to the Low/Hi registers and it will change to zero after the registers are latched. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_effect</name>
                  <description>no effect, 1: to latch the 64-bit Counter to the Low/Hi registers and it will change to zero after the registers are latched.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CNT64_CLR_EN</name>
              <description>64-bit Counter Clear Enable. 
0: no effect, 1: to clear the 64-bit Counter Low/Hi registers and it will change to zero after the registers are cleared. Note: It is not recommended to clear this counter arbitrarily. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_effect</name>
                  <description>no effect, 1: to clear the 64-bit Counter Low/Hi registers and it will change to zero after the registers are cleared. Note: It is not recommended to clear this counter arbitrarily.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CNT64_HIGH_REG</name>
          <description>64-bit Counter High Register</description>
          <addressOffset>0xD8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CNT64_HI</name>
              <description>64-bit Counter [63:32]. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CNT64_LOW_REG</name>
          <description>64-bit Counter Low Register</description>
          <addressOffset>0xD4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CNT64_LO</name>
              <description>64-bit Counter [31:0]. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR0_CTRL_REG</name>
          <description>Timer 0 Control Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x4</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>TMR0_MODE</name>
              <description>Timer 0 mode. 
0: Continuous mode. When interval value reached, the timer will not disable automatically. 
1: Single mode. When interval value reached, the timer will disable automatically. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Continuous</name>
                  <description>Continuous mode. When interval value reached, the timer will not disable automatically.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single mode. When interval value reached, the timer will disable automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR0_CLK_PRES</name>
              <description>Select the pre-scale of timer 0 clock source. 
000: /1 
001: /2 
010: /4 
011: /8 
100: /16 
101: /32 
110: /64 
111: /128 </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_16</name>
                  <description>/16</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_32</name>
                  <description>/32</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_64</name>
                  <description>/64</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_128</name>
                  <description>/128</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR0_CLK_SRC</name>
              <description>Timer 0 Clock Source.  
00: Internal OSC / 512 
01: OSC24M. 
10: / 
11: / Internal OSC / N is about 32KHz. </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Internal</name>
                  <description>Internal OSC / 512</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M.</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_</name>
                  <description>/ Internal OSC / N is about 32KHz.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR0_RELOAD</name>
              <description>Timer 0 Reload. 
0: No effect 
1: Reload timer 0 Interval value. After the bit is set, it can not be written again before it`s cleared automatically. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reload</name>
                  <description>Reload timer 0 Interval value. After the bit is set, it can not be written again before it`s cleared automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR0_EN</name>
              <description>Timer 0 Enable. 
0: Stop/Pause 
1: Start. When the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1.In timer pause state; the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stop_slash_Pause</name>
                  <description>Stop/Pause</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Start</name>
                  <description>Start. When the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1.In timer pause state; the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR0_CUR_VALUE_REG</name>
          <description>Timer 0 Current Value Register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TMR0_CUR_VALUE</name>
              <description>Timer 0 Current Value. Note: It is a 32-bit down-counter (from interval value to 0). </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR0_INTV_VALUE_REG</name>
          <description>Timer 0 Interval Value Register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TMR0_INTV_VALUE</name>
              <description>Timer 0 Interval Value. Note: The value setting should consider the system clock and the timer clock source. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR1_CTRL_REG</name>
          <description>Timer 1 Control Register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x4</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>TMR1_MODE</name>
              <description>Timer 1 mode. 
0: Continuous mode. When interval value reached, the timer will not disable automatically. 
1: Single mode. When interval value reached, the timer will disable automatically. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Continuous</name>
                  <description>Continuous mode. When interval value reached, the timer will not disable automatically.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single mode. When interval value reached, the timer will disable automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR1_CLK_PRES</name>
              <description>Select the pre-scale of timer 1 clock source. 
000: /1 
001: /2 
010: /4 
011: /8 
100: /16 
101: /32 
110: /64 
111: /128 </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_16</name>
                  <description>/16</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_32</name>
                  <description>/32</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_64</name>
                  <description>/64</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_128</name>
                  <description>/128</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR1_CLK_SRC</name>
              <description>00: Internal OSC / 512 
01: OSC24M. 
10: / 
11: /. Internal OSC / N is about 32KHz. </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Internal</name>
                  <description>Internal OSC / 512</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M.</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_</name>
                  <description>/. Internal OSC / N is about 32KHz.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR1_RELOAD</name>
              <description>Timer 1 Reload. 
0: No effect  
1: Reload timer 1 Interval value. After the bit is set, it can not be written again before it`s cleared automatically. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reload</name>
                  <description>Reload timer 1 Interval value. After the bit is set, it can not be written again before it`s cleared automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR1_EN</name>
              <description>Timer 1 Enable. 
0: Stop/Pause  
1: Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stop_slash_Pause</name>
                  <description>Stop/Pause</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Start</name>
                  <description>Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR1_CUR_VALUE_REG</name>
          <description>Timer 1 Current Value Register</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TMR1_CUR_VALUE</name>
              <description>Timer 1 Current Value. It is a 32-bit down-counter (from interval value to 0).  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR1_INTV_VALUE_REG</name>
          <description>Timer 1 Interval Value Register</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TMR1_INTV_VALUE</name>
              <description>Timer 1 Interval Value. Note: The value setting should consider the system clock and the timer clock source. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR2_CTRL_REG</name>
          <description>Timer 2 Control Register</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x4</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>TMR2_MODE</name>
              <description>Timer 2 mode. 
0: Continuous mode. When interval value reached, the timer will not disable automatically. 
1: Single mode. When interval value reached, the timer will disable automatically. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Continuous</name>
                  <description>Continuous mode. When interval value reached, the timer will not disable automatically.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single mode. When interval value reached, the timer will disable automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR2_CLK_PRES</name>
              <description>Select the pre-scale of timer 2 clock source. 
000: /1 
001: /2 
010: /4 
011: /8 
100: /16 
101: /32 
110: /64 
111: /128 </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_16</name>
                  <description>/16</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_32</name>
                  <description>/32</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_64</name>
                  <description>/64</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_128</name>
                  <description>/128</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR2_CLK_SRC</name>
              <description>00: Internal OSC / 512 
01: OSC24M. 
10: / 
11: /. </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Internal</name>
                  <description>Internal OSC / 512</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OSC24M</name>
                  <description>OSC24M.</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_</name>
                  <description>/.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR2_RELOAD</name>
              <description>Timer 2 Reload. 
0: No effect, 1: Reload timer 2 Interval value. After the bit is set, it can not be written again before it`s cleared automatically. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Reload timer 2 Interval value. After the bit is set, it can not be written again before it`s cleared automatically.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR2_EN</name>
              <description>Timer 2 Enable. 
0: Stop/Pause, 1: Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stop_slash_Pause</name>
                  <description>Stop/Pause, 1: Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR2_CUR_VALUE_REG</name>
          <description>Timer 2 Current Value Register</description>
          <addressOffset>0x38</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TMR2_CUR_VALUE</name>
              <description>Timer 2 Current Value. Note: Timer 2 current value is a 32-bit down-counter (from interval value to 0). </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR2_INTV_VALUE_REG</name>
          <description>Timer 2 Interval Value Register</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TMR2_INTV_VALUE</name>
              <description>Timer 2 Interval Value. Note: The value setting should consider the system clock and the timer clock source. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR_IRQ_EN_REG</name>
          <description>Timer IRQ Enable Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>TMR2_IRQ_EN</name>
              <description>Timer 2 Interrupt Enable. 
0: No effect;  
1: Timer 2 Interval Value reached interrupt enable. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Timer</name>
                  <description>Timer 2 Interval Value reached interrupt enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR1_IRQ_EN</name>
              <description>Timer 1 Interrupt Enable. 
0: No effect;  
1: Timer 1 Interval Value reached interrupt enable. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Timer</name>
                  <description>Timer 1 Interval Value reached interrupt enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR0_IRQ_EN</name>
              <description>Timer 0 Interrupt Enable. 
0: No effect;  
1: Timer 0 Interval Value reached interrupt enable. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Timer</name>
                  <description>Timer 0 Interval Value reached interrupt enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR_IRQ_STA_REG</name>
          <description>Timer Status Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>TMR2_IRQ_PEND</name>
              <description>Timer 2 IRQ Pending. Set 1 to the bit will clear it. 
0: No effect; 
1: Pending, timer 2 interval value is reached. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, timer 2 interval value is reached.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR1_IRQ_PEND</name>
              <description>Timer 1 IRQ Pending. Set 1 to the bit will clear it. 
0: No effect; 
1: Pending, timer 1 interval value is reached. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, timer 1 interval value is reached.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR0_IRQ_PEND</name>
              <description>Timer 0 IRQ Pending. Set 1 to the bit will clear it. 
0: No effect; 
1: Pending, timer 0 interval value is reached. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, timer 0 interval value is reached.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDOG_CFG_REG</name>
          <description>Watchdog Configuration Register</description>
          <addressOffset>0xB4</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <field>
              <name>WDOG_CONFIG</name>
              <description>Watchdog generates a reset signal  
00: / 
01: To whole system 
10: Only interrupt 
11: / </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>To_whole</name>
                  <description>To whole system</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Only_interrupt</name>
                  <description>Only interrupt</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDOG_CTRL_REG</name>
          <description>Watchdog Control Register</description>
          <addressOffset>0xB0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFF</resetMask>
          <fields>
            <field>
              <name>WDOG_KEY_FIELD</name>
              <description>Watchdog Key Field. Should be written at value 0xA57. Writing any other value in this field aborts the write operation. </description>
              <bitRange>[12:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WDOG_RSTART</name>
              <description>Watchdog Restart. 
0: No effect,  
1: Restart watchdog. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Restart</name>
                  <description>Restart watchdog.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDOG_IRQ_EN_REG</name>
          <description>Watchdog IRQ Enable Register</description>
          <addressOffset>0xA0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>WDOG_IRQ_EN</name>
              <description>Watchdog Interrupt Enable. 
0: No effect 
1: Watchdog0 interrupt enable. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Watchdog0</name>
                  <description>Watchdog0 interrupt enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDOG_IRQ_STA_REG</name>
          <description>Watchdog Status Register</description>
          <addressOffset>0xA4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>WDOG_IRQ</name>
              <description>_PEND. Watchdog IRQ Pending. Set 1 to the bit will clear it. 
0: No effect, 
1: Pending, watchdog0 interval value is reached. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, watchdog0 interval value is reached.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDOG_MODE_REG</name>
          <description>Watchdog Mode Register</description>
          <addressOffset>0xB8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF1</resetMask>
          <fields>
            <field>
              <name>WDOG_INTV_VALUE</name>
              <description>Watchdog Interval Value Watchdog clock source is . If the clock source is turned off, Watchdog will not work. 
0000: 16000 cycles (0.5s) 
0001: 32000 cycles (1s) 
0010: 64000 cycles (2s) 
0011: 96000 cycles (3s) 
0100: 128000 cycles (4s) 
0101: 160000 cycles (5s) 
0110: 192000 cycles (6s) 
0111: 256000 cycles (8s) 
1000: 320000 cycles (10s) 
1001: 384000 cycles (12s) 
1010: 448000 cycles (14s) 
1011: 512000 cycles (16s) others: / </description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_16000_cycles</name>
                  <description>16000 cycles (0.5s)</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32000_cycles</name>
                  <description>32000 cycles (1s)</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_64000_cycles</name>
                  <description>64000 cycles (2s)</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_96000_cycles</name>
                  <description>96000 cycles (3s)</description>
                  <value>0b0011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_128000_cycles</name>
                  <description>128000 cycles (4s)</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_160000_cycles</name>
                  <description>160000 cycles (5s)</description>
                  <value>0b0101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_192000_cycles</name>
                  <description>192000 cycles (6s)</description>
                  <value>0b0110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_256000_cycles</name>
                  <description>256000 cycles (8s)</description>
                  <value>0b0111</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_320000_cycles</name>
                  <description>320000 cycles (10s)</description>
                  <value>0b1000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_384000_cycles</name>
                  <description>384000 cycles (12s)</description>
                  <value>0b1001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_448000_cycles</name>
                  <description>448000 cycles (14s)</description>
                  <value>0b1010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_512000_cycles</name>
                  <description>512000 cycles (16s) others: /</description>
                  <value>0b1011</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WDOG_EN</name>
              <description>Watchdog Enable. 
0: No effect; 
1: Enable watchdog. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable watchdog.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>CSI0</name>
      <description>CSI0</description>
      <groupName>generic</groupName>
      <baseAddress>0x1CB0000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>CCI_BUS_REG</name>
          <description>CCI_BUS_REG</description>
          <addressOffset>0x300C</addressOffset>
          <resetValue>0x2500</resetValue>
          <resetMask>0xFFFFFF37</resetMask>
          <fields>
            <field>
              <name>DLY_CYC</name>
              <description>DLY_CYC 0~65535 FSCL cycles between each transmission </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DLY_TRIG</name>
              <description>DLY_TRIG 
0: disable 
1: execute transmission after internal counter delay when triggered </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>execute_transmission</name>
                  <description>execute transmission after internal counter delay when triggered</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_N_CCI</name>
              <description>CLK_N CCI bus sampling clock F0=24MHz/2^CLK_N </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_M_CCI</name>
              <description>CLK_M CCI output SCL frequency is FSCL=F1/10=(F0/(CLK_M+1))/10 </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SCL_STA_SCL</name>
              <description>SCL_STA SCL current status </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SDA_STA_SDA</name>
              <description>SDA_STA SDA current status </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SCL_PEN_SCL</name>
              <description>SCL_PEN SCL PAD enable </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDA_PEN_SDA</name>
              <description>SDA_PEN SDA PAD enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SCL_MOV</name>
              <description>0 SCL_MOV SCL manual output value </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDA_MOV_SDA</name>
              <description>SDA_MOV SDA manual output value </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SCL_MOE_SCL</name>
              <description>SCL_MOE SCL manual output en </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDA_MOE_SDA</name>
              <description>SDA_MOE SDA manual output en </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CCI_CFG_REG</name>
          <description>CCI_CFG_REG</description>
          <addressOffset>0x3004</addressOffset>
          <resetValue>0x10000000</resetValue>
          <resetMask>0xFFFF807F</resetMask>
          <fields>
            <field>
              <name>TIMEOUT_N</name>
              <description>When sending the 9th clock, assert fail signal when slave device did not response after N*FSCL cycles. And software must do a reset to CCI module and send a stop condition to slave. </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTERVAL</name>
              <description>Define the interval between each packet in 40*FSCL cycles. 0~255 </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PACKET_MODE</name>
              <description>Select where to load slave id / data width 
0: Compact mode 
1: Complete mode In compact mode, slave id/register width / data width will be loaded from CCI_FMT register, only address and data read from memory. In complete mode, they will be loaded from packet memory. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Compact_mode</name>
                  <description>Compact mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Complete_mode</name>
                  <description>Complete mode In compact mode, slave id/register width / data width will be loaded from CCI_FMT register, only address and data read from memory. In complete mode, they will be loaded from packet memory.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TRIG_MODE</name>
              <description>Transmit mode: 
000: Immediately, no trigger 
001: Reserved 
010: CSI0 int trigger 
011: CSI1 int trigger </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Immediately</name>
                  <description>Immediately, no trigger</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI0</name>
                  <description>CSI0 int trigger</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI1</name>
                  <description>CSI1 int trigger</description>
                  <value>0b011</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI_TRIG</name>
              <description>CSI Int trig signal select: 
0000: First HREF start 
0001: Last HREF done 
0010: Line counter trigger other: Reserved </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>First</name>
                  <description>First HREF start</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Last</name>
                  <description>Last HREF done</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Line</name>
                  <description>Line counter trigger other: Reserved</description>
                  <value>0b0010</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CCI_CTRL_REG</name>
          <description>CCI_CTRL_REG</description>
          <addressOffset>0x3000</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF000003</resetMask>
          <fields>
            <field>
              <name>SINGLE_TRAN</name>
              <description>0: Transmission idle 
1: Start single transmission Automatically cleared to `0` when finished. Abort current transmission immediately if changing from `1` to `0`. If slave not respond for the expected status over the time defined by TIMEOUT, current transmission will stop. PACKET_CNT will return the sequence number when transmission fail. All format setting and data will be loaded from registers and FIFO when transmission start. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Transmission_idle</name>
                  <description>Transmission idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Start</name>
                  <description>Start single transmission Automatically cleared to `0` when finished. Abort current transmission immediately if changing from `1` to `0`. If slave not respond for the expected status over the time defined by TIMEOUT, current transmission will stop. PACKET_CNT will return the sequence number when transmission fail. All format setting and data will be loaded from registers and FIFO when transmission start.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>REPEAT_TRAN</name>
              <description>0: transmission idle 
1: repeated transmission When this bit is set to 1, transmission repeats when trigger signal (such as VSYNC/ VCAP done ) repeats.  If changing this bit from `1` to `0` during transmission, the current transmission will be guaranteed then stop. </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>transmission_idle</name>
                  <description>transmission idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>repeated_transmission</name>
                  <description>repeated transmission When this bit is set to 1, transmission repeats when trigger signal (such as VSYNC/ VCAP done ) repeats.  If changing this bit from `1` to `0` during transmission, the current transmission will be guaranteed then stop.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESTART_MODE</name>
              <description>0: RESTART 
1: STOP+START Define the CCI action after sending register address. </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESTART</name>
                  <description>RESTART</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP_plus_START</name>
                  <description>STOP+START Define the CCI action after sending register address.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>READ_TRAN_MODE</name>
              <description>0: send slave_id+W 
1: do not send slave_id+W Setting this bit to 1 if reading from a slave which register width is equal to 0. </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>send</name>
                  <description>send slave_id+W</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>do_not_send</name>
                  <description>do not send slave_id+W Setting this bit to 1 if reading from a slave which register width is equal to 0.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TRAN_RESULT</name>
              <description>000: OK 
001: FAIL Other: Reserved </description>
              <bitRange>[27:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CCI_STA</name>
              <description>0x00: bus error 
0x08: START condition transmitted 
0x10: Repeated START condition transmitted 
0x18: Address + Write bit transmitted, ACK received 
0x20: Address + Write bit transmitted, ACK not received 
0x28: Data byte transmitted in master mode, ACK received 
0x30: Data byte transmitted in master mode, ACK not received 
0x38: Arbitration lost in address or data byte 
0x40: Address + Read bit transmitted, ACK received 
0x48: Address + Read bit transmitted, ACK not received 
0x50: Data byte received in master mode, ACK received 
0x58: Data byte received in master mode, ACK not received 
0x01: Timeout when sending 9th SCL clk Other: Reserved </description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SOFT_RESET</name>
              <description>0: normal 
1: reset </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>normal</name>
                  <description>normal</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reset</name>
                  <description>reset</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CCI_EN</name>
              <description>0: Module disable 
1: Module enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Module_disable</name>
                  <description>Module disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Module_enable</name>
                  <description>Module enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <dim>16</dim>
          <dimIncrement>4</dimIncrement>
          <name>CCI_FIFO_ACC_REG[%s]</name>
          <description>CCI_FIFO_ACC_REG[%s]</description>
          <addressOffset>0x3100</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA_FIFO</name>
              <description>From 0x100 to 0x13f, CCI data fifo is 64bytes, used in fifo input mode. CCI transmission read/write data from/to fifo in byte.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CCI_FMT_REG</name>
          <description>CCI_FMT_REG</description>
          <addressOffset>0x3008</addressOffset>
          <resetValue>0x110001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>SLV_ID</name>
              <description>7bit address </description>
              <bitRange>[31:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMD</name>
              <description>0: write 
1: read </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>write</name>
                  <description>write</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>read</name>
                  <description>read</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADDR_BYTE</name>
              <description>How many bytes be sent as address 0~15 </description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DATA_BYTE</name>
              <description>How many bytes be sent/received as data 1~15 Normally use ADDR_DATA with 0_2, 1_1, 1_2, 2_1, 2_2 access mode. If DATA bytes is 0, transmission will not start. In complete mode, the ADDR_BYTE and DATA_BYTE is defined in a byte`s high/low 4bit. </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PACKET_CNT</name>
              <description>FIFO data be transmitted as PACKET_CNT packets in current format. Total bytes not exceed 32bytes. </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CCI_INT_CTRL_REG</name>
          <description>CCI_INT_CTRL_REG</description>
          <addressOffset>0x3014</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x30003</resetMask>
          <fields>
            <field>
              <name>S_TRAN_ERR_INT_EN</name>
              <description></description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>S_TRAN_COM_INT_EN</name>
              <description></description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>S_TRAN_ERR_PD</name>
              <description></description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>S_TRAN_COM_PD</name>
              <description></description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CCI_LC_REG</name>
          <description>CCI_LC_REG</description>
          <addressOffset>0x3018</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFF</resetMask>
          <fields>
            <field>
              <name>LN_CNT</name>
              <description>0~8191: line counter send trigger when 1st~8192th line is received.</description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_ACC_ITNL_CLK_CNT_REG</name>
          <description>CSI0_C0_ACC_ITNL_CLK_CNT_REG</description>
          <addressOffset>0x94</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>ACC_CLK_CNT</name>
              <description>The accumulated value of FRM_CLK_CNT for software frame rate statics. Every interrupt of frame done, the software check this accumulated value and clear it to 0. If the ACC_CLK_CNT is larger than 1, the software has lost frame.  When frame done or vsync comes, ACC_CLK_CNT = ACC_CLK_CNT + 1, and cleared to 0 when writing 0 to this register. </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ITNL_CLK_CNT</name>
              <description>The instant value of internal frame clock counter.  When frame done interrupt comes, the software can query this counter for judging whether it is the time for updating the double buffer address registers. </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_BUF_LEN_REG</name>
          <description>CSI0_C0_BUF_LEN_REG</description>
          <addressOffset>0x88</addressOffset>
          <resetValue>0x1400280</resetValue>
          <resetMask>0x3FFF3FFF</resetMask>
          <fields>
            <field>
              <name>BUF_LEN_C</name>
              <description>Buffer length of chroma C in a line. Unit is byte. </description>
              <bitRange>[29:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BUF_LEN</name>
              <description>Buffer length of luminance Y in a line. Unit is byte. </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_CAP_STA_REG</name>
          <description>CSI0_C0_CAP_STA_REG</description>
          <addressOffset>0x6C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>FIELD_STA</name>
              <description>The status of the received field 
0: Field 0 
1: Field 1 </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Field_0</name>
                  <description>Field 0</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Field_1</name>
                  <description>Field 1</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VCAP_STA</name>
              <description>Video capture in progress Indicates the CSI is capturing video image data (multiple frames). The bit is set at the start of the first frame after enabling video capture. When software disables video capture, it clears itself after the last pixel of the current frame is captured. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SCAP_STA</name>
              <description>Still capture in progress Indicates the CSI is capturing still image data (single frame). The bit is set at the start of the first frame after enabling still frame capture. It clears itself after the last pixel of the first frame is captured. For CCIR656 interface, if the output format is frame planar YCbCr 420 mode, the frame end means the field2 end, the other frame end means filed end. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_CFG_REG</name>
          <description>CSI0_C0_CFG_REG</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x300200</resetValue>
          <resetMask>0xFFFF3F03</resetMask>
          <fields>
            <field>
              <name>PAD_VAL</name>
              <description>Padding value when OUTPUT_FMT is prgb888 0x00~0xff </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INPUT_FMT</name>
              <description>Input data format 
0000: RAW stream 
0001: reserved 
0010: reserved 
0011: YUV422 
0100: YUV420 Others: reserved </description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RAW</name>
                  <description>RAW stream</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>YUV422</name>
                  <description>YUV422</description>
                  <value>0b0011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>YUV420</name>
                  <description>YUV420 Others: reserved</description>
                  <value>0b0100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OUTPUT_FMT</name>
              <description>Output data format When the input format is set RAW stream 
0000: field-raw-8 
0001: field-raw-10 
0010: field-raw-12 
0011: reserved 
0100: field-rgb565 
0101: field-rgb888 
0110: field-prgb888 
1000: frame-raw-8 
1001: frame-raw-10 
1010: frame-raw-12 
1011: reserved 
1100: frame-rgb565 
1101: frame-rgb888 
1110: frame-prgb888  When the input format is set YUV422 
0000: field planar YCbCr 422 
0001: field planar YCbCr 420 
0010: frame planar YCbCr 420 
0011: frame planar YCbCr 422 
0100: field planar YCbCr 422 UV combined 
0101: field planar YCbCr 420 UV combined 
0110: frame planar YCbCr 420 UV combined 
0111: frame planar YCbCr 422 UV combined 
1000: field MB YCbCr 422 
1001: field MB YCbCr 420 
1010: frame MB YCbCr 420 
1011: frame MB YCbCr 422 
1100: field planar YCbCr 422 10bit UV combined 
1101: field planar YCbCr 420 10bit UV combined 
1110: Reserved 
1111: Reserved  When the input format is set YUV420 
0000: Reserved 
0001: field planar YCbCr 420 
0010: frame planar YCbCr 420 
0011: Reserved 
0100: Reserved 
0101: field planar YCbCr 420 UV combined 
0110: frame planar YCbCr 420 UV combined 
0111: Reserved 
1000: Reserved 
1001: field MB YCbCr 420 
1010: frame MB YCbCr 420 
1011: Reserved 
1100: Reserved 
1101: field planar YCbCr 420 10bit UV combined 
1110: Reserved 
1111: Reserved  Others: reserved </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VFLIP_EN</name>
              <description>Vertical flip enable When enabled, the received data will be arranged in vertical flip. 0:Disable 1:Enable </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HFLIP_EN</name>
              <description>Horizontal flip enable When enabled, the received data will be arranged in horizontal flip. 0:Disable 1:Enable </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIELD_SEL</name>
              <description>Field selection.  
00: capturing with field 1. 
01: capturing with field 2. 
10: capturing with either field. 
11: reserved </description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>capturing_with_field_1</name>
                  <description>capturing with field 1.</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>capturing_with_field_2</name>
                  <description>capturing with field 2.</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>capturing_with_either_field</name>
                  <description>capturing with either field.</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>INPUT_SEQ</name>
              <description>Input data sequence, only valid for YUV422 and YUV420 input format. All data interleaved in one channel: 
00: YUYV 
01: YVYU 
10: UYVY 
11: VYUY Y and UV in separated channel: 
x0: UV 
x1: VU </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>YUYV</name>
                  <description>YUYV</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>YVYU</name>
                  <description>YVYU</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UYVY</name>
                  <description>UYVY</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VYUY</name>
                  <description>VYUY Y and UV in separated channel:</description>
                  <value>0b11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UV</name>
                  <description>UV</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VU</name>
                  <description>VU</description>
                  <value>0b01</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MIN_SDR_WR_SIZE</name>
              <description>Minimum size of SDRAM block write 
0: 256 bytes (if hflip is enable, always select 256 bytes) 
1: 512 bytes  
2: 1k bytes 
3: 2k bytes </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1k</name>
                  <description>1k bytes</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2k</name>
                  <description>2k bytes</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_F0_BUFA_REG</name>
          <description>CSI0_C0_F0_BUFA_REG</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>C0F0_BUFA</name>
              <description>FIFO 0 output buffer-A address </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_F1_BUFA_REG</name>
          <description>CSI0_C0_F1_BUFA_REG</description>
          <addressOffset>0x58</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>C0F1_BUFA</name>
              <description>FIFO 1 output buffer-A address </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_F2_BUFA_REG</name>
          <description>CSI0_C0_F2_BUFA_REG</description>
          <addressOffset>0x60</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>C0F2_BUFA</name>
              <description>FIFO 2 output buffer-A address </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_FIFO_STAT_REG</name>
          <description>CSI0_C0_FIFO_STAT_REG</description>
          <addressOffset>0x98</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <field>
              <name>FIFO_FRM_MAX</name>
              <description>Indicates the maximum depth of FIFO being occupied for whole frame. Update at every vsync or framedone.</description>
              <bitRange>[11:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_FLD1_VSIZE_REG</name>
          <description>CSI0_C0_FLD1_VSIZE_REG</description>
          <addressOffset>0x78</addressOffset>
          <resetValue>0x1E00000</resetValue>
          <resetMask>0x1FFF1FFF</resetMask>
          <fields>
            <field>
              <name>VER_LEN</name>
              <description>Valid line number of filed1,only valid when CSI_IF is YUV and source type is interlaced. </description>
              <bitRange>[28:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VER_START</name>
              <description>Vertical line start of filed1. data is valid from this line,only valid when CSI_IF is YUV and source type is interlaced. </description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_FLIP_SIZE_REG</name>
          <description>CSI0_C0_FLIP_SIZE_REG</description>
          <addressOffset>0x8C</addressOffset>
          <resetValue>0x1E00280</resetValue>
          <resetMask>0x1FFF1FFF</resetMask>
          <fields>
            <field>
              <name>VER_LEN</name>
              <description>Vertical line number when in vflip mode.  </description>
              <bitRange>[28:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VALID_LEN</name>
              <description>Valid components of a line when in flip mode.  </description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_FRM_CLK_CNT_REG</name>
          <description>CSI0_C0_FRM_CLK_CNT_REG</description>
          <addressOffset>0x90</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFF</resetMask>
          <fields>
            <field>
              <name>FRM_CLK_CNT</name>
              <description>Counter value between every frame. For instant hardware frame rate statics.  The internal counter is added by one every 24MHz clock cycle. When frame done or vsync comes, the internal counter value is sampled to FRM_CLK_CNT, and cleared to 0.</description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_HSIZE_REG</name>
          <description>CSI0_C0_HSIZE_REG</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x5000000</resetValue>
          <resetMask>0x1FFF1FFF</resetMask>
          <fields>
            <field>
              <name>HOR_LEN</name>
              <description>Horizontal pixel unit length. Valid pixel of a line. </description>
              <bitRange>[28:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HOR_START</name>
              <description>Horizontal pixel unit start. Pixel is valid from this pixel. </description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_INT_EN_REG</name>
          <description>CSI0_C0_INT_EN_REG</description>
          <addressOffset>0x70</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>VS_INT_EN</name>
              <description>vsync flag The bit is set when vsync come. And at this time load the buffer address for the coming frame. So after this irq come, change the buffer address could only effect next frame  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HB_OF_INT_EN</name>
              <description>Hblank FIFO overflow The bit is set when 3 FIFOs still overflow after the hblank. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MUL_ERR_INT_EN</name>
              <description>Multi-channel writing error Indicates error has been detected for writing data to a wrong channel. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO2_OF_INT_EN</name>
              <description>FIFO 2 overflow The bit is set when the FIFO 2 become overflow. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO1_OF_INT_EN</name>
              <description>FIFO 1 overflow The bit is set when the FIFO 1 become overflow. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO0_OF_INT_EN</name>
              <description>FIFO 0 overflow The bit is set when the FIFO 0 become overflow. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FD_INT_EN</name>
              <description>Frame done Indicates the CSI has finished capturing an image frame. Applies to video capture mode. The bit is set after each completed frame capturing data is writed to buffer as long as video capture remains enabled. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CD_INT_EN</name>
              <description>Capture done Indicates the CSI has completed capturing the image data. For still capture, the bit is set when one frame data has been wrote to buffer. For video capture, the bit is set when the last frame has been wrote to buffer after video capture has been disabled. For CCIR656 interface, if the output format is frame planar YCbCr 420 mode, the frame end means the field2 end, the other frame end means field end. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_INT_STA_REG</name>
          <description>CSI0_C0_INT_STA_REG</description>
          <addressOffset>0x74</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>VS_PD</name>
              <description>vsync flag </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HB_OF_PD</name>
              <description>Hblank FIFO overflow </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MUL_ERR_PD</name>
              <description>Multi-channel writing error </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO2_OF_PD</name>
              <description>FIFO 2 overflow </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO1_OF_PD</name>
              <description>FIFO 1 overflow </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO0_OF_PD</name>
              <description>FIFO 0 overflow </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FD_PD</name>
              <description>Frame done </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CD_PD</name>
              <description>Capture done </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_PCLK_STAT_REG</name>
          <description>CSI0_C0_PCLK_STAT_REG</description>
          <addressOffset>0x9C</addressOffset>
          <resetValue>0x7FFF</resetValue>
          <resetMask>0x7FFF7FFF</resetMask>
          <fields>
            <field>
              <name>PCLK_CNT_LINE_MAX</name>
              <description>Indicates maximum pixel clock counter value for each line. Update at every vsync or framedone. </description>
              <bitRange>[30:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PCLK_CNT_LINE_MIN</name>
              <description>Indicates minimum pixel clock counter value for each line. Update at every vsync or framedone.</description>
              <bitRange>[14:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_SCALE_REG</name>
          <description>CSI0_C0_SCALE_REG</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>QUART_EN</name>
              <description>When this bit is set to 1, input image will be decimated to quarter size. All input format are supported.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_C0_VSIZE_REG</name>
          <description>CSI0_C0_VSIZE_REG</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x1E00000</resetValue>
          <resetMask>0x1FFF1FFF</resetMask>
          <fields>
            <field>
              <name>VER_LEN</name>
              <description>Vertical line length. Valid line number of a frame. Stand for line number of field0 when CSI_IF is YUV and source type is interlaced. </description>
              <bitRange>[28:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VER_START</name>
              <description>Vertical line start. data is valid from this line. Stand for start line of field0 when CSI_IF is YUV and source type is interlaced. </description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_CAP_REG</name>
          <description>CSI0_CAP_REG</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <field>
              <name>CH0_CAP_MASK</name>
              <description>Vsync number masked before capture. </description>
              <bitRange>[5:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CH0_VCAP_ON</name>
              <description>Video capture control: Capture the video image data stream on channel 0. 
0: Disable video capture If video capture is in progress, the CSI stops capturing image data at the end of the current frame, and all of the current frame data is wrote to output FIFO. 
1: Enable video capture The CSI starts capturing image data at the start of the next frame. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable video capture If video capture is in progress, the CSI stops capturing image data at the end of the current frame, and all of the current frame data is wrote to output FIFO.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable video capture The CSI starts capturing image data at the start of the next frame.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CH0_SCAP_ON</name>
              <description>Still capture control: Capture a single still image frame on channel 0. 
0: Disable still capture. 
1: Enable still capture  The CSI module starts capturing image data at the start of the next frame. The CSI module captures only one frame of image data. This bit is self clearing and always reads as a 0. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable still capture.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable still capture  The CSI module starts capturing image data at the start of the next frame. The CSI module captures only one frame of image data. This bit is self clearing and always reads as a 0.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_EN_REG</name>
          <description>CSI0_EN_REG</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x40FF011F</resetMask>
          <fields>
            <field>
              <name>VER_EN</name>
              <description>CSI Version Register Read Enable: 
0: Disable 
1: Enable </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PTN_CYCLE</name>
              <description>Pattern generating cycle counter. The pattern in dram will be generated in cycles of PTN_CYCLE+1. </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SRAM_PWDN</name>
              <description>0: SRAM in normal 
1: SRAM in power down </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SRAM_in_normal</name>
                  <description>SRAM in normal</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SRAM_in_power</name>
                  <description>SRAM in power down</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PTN_START</name>
              <description>CSI Pattern Generating Start 
0: Finish other: Start Software write this bit to 1  to start pattern generating from DRAM. When finished, the hardware will clear this bit to 0 automatically. Generating cycles depends on PTN_CYCLE. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Finish</name>
                  <description>Finish other: Start Software write this bit to 1  to start pattern generating from DRAM. When finished, the hardware will clear this bit to 0 automatically. Generating cycles depends on PTN_CYCLE.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_CNT_SPL</name>
              <description>Sampling time for clk counter per frame 
0: Sampling clock counter every frame done 
1: Sampling clock counter every vsync </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Sampling_clock_counter_every_frame</name>
                  <description>Sampling clock counter every frame done</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sampling_clock_counter_every_vsync</name>
                  <description>Sampling clock counter every vsync</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_CNT_EN</name>
              <description>clk count per frame enable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PTN_GEN_EN</name>
              <description>Pattern Generation Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CSI_EN</name>
              <description>Enable 
0: Reset and disable the CSI module 
1: Enable the CSI module </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Reset_and</name>
                  <description>Reset and disable the CSI module</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable the CSI module</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_FIFO_THRS_REG</name>
          <description>CSI0_FIFO_THRS_REG</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x40F0400</resetValue>
          <resetMask>0x1FFF0FFF</resetMask>
          <fields>
            <field>
              <name>FIFO_NEARLY_FULL_TH</name>
              <description>The threshold of FIFO being nearly full. Indicates that the ISP should stop writing. Only valid when ISP is enabled. 0~7:  The smaller the value, the flag of FIFO being nearly full is easier to reach.  </description>
              <bitRange>[28:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PTN_GEN_CLK_DIV</name>
              <description>Packet generator clock divider </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PTN_GEN_DLY</name>
              <description>Clocks delayed before pattern generating start. </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO_THRS</name>
              <description>When CSI0 FIFO occupied memory exceed the threshold, dram frequency can not change. </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_IF_CFG_REG</name>
          <description>CSI0_IF_CFG_REG</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x1050000</resetValue>
          <resetMask>0xF3FD89F</resetMask>
          <fields>
            <field>
              <name>FIELD_DT_PCLK_SHIFT_ONLY_FOR_VSYNC_DETECTED</name>
              <description>FIELD_DT_PCLK_SHIFT Only for vsync detected field mode,the odd field permitted pclk shift = 4* FIELD_DT_PCLK_SHIFT </description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SRC_TYPE_SOURCE_TYPE</name>
              <description>SRC_TYPE Source type 
0: Progressed 
1: Interlaced </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Progressed</name>
                  <description>Progressed</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Interlaced</name>
                  <description>Interlaced</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FPS_DS_FPS_DOWN_SAMPLE</name>
              <description>FPS_DS Fps down sample 
0: no down sample 
1: 1/2 fps, only receives the first frame every 2 frames </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_down</name>
                  <description>no down sample</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_slash_2</name>
                  <description>1/2 fps, only receives the first frame every 2 frames</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FIELD_FOR_YUV_HV_TIMING</name>
              <description>FIELD For YUV HV timing, Field polarity 
0: negative(field=0 indicate odd, field=1 indicate even ) 
1: positive(field=1 indicate odd, field=0 indicate even ) For BT656 timing, Field sequence 
0: Normal sequence (field 0 first) 
1: Inverse sequence (field 1 first) </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>negative_openingparen_field_equals_0</name>
                  <description>negative(field=0 indicate odd, field=1 indicate even )</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>positive_openingparen_field_equals_1</name>
                  <description>positive(field=1 indicate odd, field=0 indicate even ) For BT656 timing, Field sequence</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal sequence (field 0 first)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Inverse</name>
                  <description>Inverse sequence (field 1 first)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VREF_POL_VREF_POLARITY</name>
              <description>VREF_POL Vref polarity 
0: negative 
1: positive This register is not apply to CCIR656 interface. </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>negative</name>
                  <description>negative</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>positive</name>
                  <description>positive This register is not apply to CCIR656 interface.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HERF_POL_HREF_POLARITY</name>
              <description>HERF_POL Href polarity 
0: negative 
1: positive This register is not apply to CCIR656 interface. </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>negative</name>
                  <description>negative</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>positive</name>
                  <description>positive This register is not apply to CCIR656 interface.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_POL_DATA_CLOCK_TYPE</name>
              <description>CLK_POL Data clock type 
0: active in rising edge 
1: active in falling edge </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>active_in_rising_edge</name>
                  <description>active in rising edge</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>active_in_falling_edge</name>
                  <description>active in falling edge</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FIELD_DT_MODE_ONLY_VALID_WHEN_CSI</name>
              <description>Field_DT_MODE only valid when CSI_IF is YUV and source type is interlaced  00:by both field and vsync 01:by field 10:by vsync 11:reserved </description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SEQ_8PLUS2_WHEN_SELECT_IF_DATA_WIDTH</name>
              <description>SEQ_8PLUS2 When select IF_DATA_WIDTH to be 8+2bit, odd/even pixel byte at  CSI-D[11:4] will be rearranged to D[11:2]+2`b0 at the actual csi data bus according to these sequences: 
00: 6`bx+D[9:8], D[7:0] 
01: D[9:2], 6`bx+D[1:0] 
10: D[7:0], D[9:8]+6`bx 
11: D[7:0], 6`bx+D[9:8] </description>
              <bitRange>[12:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_6`bx_plus_D[9_colon_8]_comma__D[7_colon_0]</name>
                  <description>6`bx+D[9:8], D[7:0]</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>D[9_colon_2]_comma__6`bx_plus_D[1_colon_0]</name>
                  <description>D[9:2], 6`bx+D[1:0]</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>D[7_colon_0]_comma__D[9_colon_8]_plus_6`bx</name>
                  <description>D[7:0], D[9:8]+6`bx</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>D[7_colon_0]_comma__6`bx_plus_D[9_colon_8]</name>
                  <description>D[7:0], 6`bx+D[9:8]</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IF_DATA_WIDTH</name>
              <description>0 IF_DATA_WIDTH 
000: 8 bit data bus 
001: 10 bit data bus 
010: 12 bit data bus 
011: 8+2bit data bus  100:2x8bit data bus Other:reserved </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_8_bit</name>
                  <description>8 bit data bus</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_10_bit</name>
                  <description>10 bit data bus</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_12_bit</name>
                  <description>12 bit data bus</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8_plus_2bit_data</name>
                  <description>8+2bit data bus</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2x8bit_data</name>
                  <description>2x8bit data bus Other:reserved</description>
                  <value>0b100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MIPI_IF_MIPI_INTERFACE_ENABLE</name>
              <description>MIPI_IF MIPI Interface Enable: 
0: CSI 
1: MIPI </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CSI</name>
                  <description>CSI</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MIPI</name>
                  <description>MIPI</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CSI_IF_YUV</name>
              <description>CSI_IF YUV: 
00000: YUYV422 Interleaved or RAW (All data in one data bus) 
00001: YUV422 UV Combined (16 bit interface with seperate syncs)  CCIR656: 
00100: YUYV422 Interleaved or RAW (All data in one data bus) 00101:YUV422 UV Combined (16 bit inrerface with embedded syncs,BT1120 ) Others: Reserved </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_PTN_ADDR_REG</name>
          <description>CSI0_PTN_ADDR_REG</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PTN_ADDR</name>
              <description>The pattern DRAM address when generating pattern.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_PTN_LEN_REG</name>
          <description>CSI0_PTN_LEN_REG</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PTN_LEN</name>
              <description>The pattern length in byte when generating pattern.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_SYNC_CNT_REG</name>
          <description>CSI0_SYNC_CNT_REG</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFF</resetMask>
          <fields>
            <field>
              <name>SYNC_CNT</name>
              <description>The counter value between vsync of CSI0 channel 0 and vsync of CSI1 channel 0 , using 24MHz. </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0_VER_REG</name>
          <description>CSI0_VER_REG</description>
          <addressOffset>0x3C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>VER</name>
              <description>Version of hardware circuit. Only can be read when version register read enable is on.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CSI0__BT656_HEAD_CFG_REG</name>
          <description>CSI0__BT656_HEAD_CFG_REG</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x3020100</resetValue>
          <resetMask>0xF0F0F0F</resetMask>
          <fields>
            <field>
              <name>CH3_ID</name>
              <description>The low 4bit of BT656 header for channel 3 Only valid in BT656 multi-channel mode </description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CH2_ID</name>
              <description>The low 4bit of BT656 header for channel 2 Only valid in BT656 multi-channel mode </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CH1_ID</name>
              <description>The low 4bit of BT656 header for channel 1 Only valid in BT656 multi-channel mode </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CH0_ID</name>
              <description>The low 4bit of BT656 header for channel 0 Only valid in BT656 multi-channel mode </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral derivedFrom="CSI0">
      <name>CSI1</name>
      <description>CSI1</description>
      <groupName>generic</groupName>
      <baseAddress>0x1CB4000</baseAddress>
      <access>read-write</access>
    </peripheral>
    <peripheral>
      <name>CE</name>
      <description>CE</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C15000</baseAddress>
      <access>read-write</access>
      <registers>
        <cluster>
          <dim>4</dim>
          <dimIncrement>4</dimIncrement>
          <name>_n[%s]</name>
          <addressOffset>0x24</addressOffset>
          <register>
            <name>CE_CNT_n_</name>
            <description>CE_CNT_n_</description>
            <addressOffset>0x10</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <field>
                <name>CE_CNT_VALUE</name>
                <description>Counter Input Value (n= 0~3) </description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>CE_IV_n_</name>
            <description>CE_IV_n_</description>
            <addressOffset>0x0</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <field>
                <name>CE_IV_VALUE</name>
                <description>Initialization Vector (IV[n]) Input Value (n= 0~3) </description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>CE_CTL</name>
          <description>Control Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF00F3F7</resetMask>
          <fields>
            <field>
              <name>SKEY_SELECT</name>
              <description>AES/DES/3DES key select 
0: Select input CE_KEYx (Normal Mode) 
1: / 
2: / 3-10: Select internal Key n (n from 0 to 7) Others: Reserved </description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_</name>
                  <description>/ 3-10: Select internal Key n (n from 0 to 7) Others: Reserved</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DIE_ID</name>
              <description>Die Bonding ID </description>
              <bitRange>[18:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PRNG_MODE</name>
              <description>PRNG generator mode 
0: One-shot mode 
1: Continue mode </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>one_shot_mode</name>
                  <description>One-shot mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Continue_mode</name>
                  <description>Continue mode</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IV_MODE</name>
              <description>IV Steady of SHA-1/MD5 constants 
0: Constants 
1: Arbitrary IV Notes: It is only used for SHA-1/MD5 engine. If the number of IV word is beyond of 4, Counter 0 register is used for IV4. </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Constants</name>
                  <description>Constants</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Arbitrary</name>
                  <description>Arbitrary IV Notes: It is only used for SHA-1/MD5 engine. If the number of IV word is beyond of 4, Counter 0 register is used for IV4.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CE_OP_MODE</name>
              <description>CE Operation Mode 
00: Electronic Code Book (ECB) mode 
01: Cipher Block Chaining (CBC) mode 10:/ 
11: AES Ciphertext Stealing (CTS) mode </description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Electronic</name>
                  <description>Electronic Code Book (ECB) mode</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Cipher</name>
                  <description>Cipher Block Chaining (CBC) mode 10:/</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AES</name>
                  <description>AES Ciphertext Stealing (CTS) mode</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AES_KEY_SIZE</name>
              <description>Key Size for AES 
00: 128-bits 
01: 192-bits 
10: 256-bits 
11: Reserved </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_128_bits</name>
                  <description>128-bits</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_192_bits</name>
                  <description>192-bits</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_256_bits</name>
                  <description>256-bits</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CE_OP_DIR</name>
              <description>CE Operation Direction 
0: Encryption 
1: Decryption </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Encryption</name>
                  <description>Encryption</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Decryption</name>
                  <description>Decryption</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CE_METHOD</name>
              <description>CE Method 
000: AES 
001: DES 
010: Triple DES (3DES) 
011: SHA-1 
100: MD5 
101: PRNG Others: Reserved </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>AES</name>
                  <description>AES</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DES</name>
                  <description>DES</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Triple</name>
                  <description>Triple DES (3DES)</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SHA_minus_1</name>
                  <description>SHA-1</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MD5</name>
                  <description>MD5</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PRNG</name>
                  <description>PRNG Others: Reserved</description>
                  <value>0b101</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SHA1_MD5_END_BIT</name>
              <description>SHA-1/MD5 Data End bit Write `1` to tell SHA-1/MD5 engine that the text data is end. If there is some data in FIFO, the engine would fetch these data and process them. After finishing message digest, this bit is clear to `0` by hardware and message digest can be read out from digest registers. Notes: It is only used for SHA-1/MD5 engine. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PRNG_START</name>
              <description>PRNG start bit In PRNG one-shot mode, write `1` to start PRNG. After generating one group random data (5 words), this bit is clear to `0` by hardware. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CE_ENABLE</name>
              <description>CE Enable A disable on this bit overrides any other block and flushes all FIFOs. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CE_CTS_LEN</name>
          <description>CE_CTS_LEN</description>
          <addressOffset>0x60</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>AES_CTS</name>
              <description>ciphertext length in byte unit The value of `0` means no data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CE_FCSR</name>
          <description>CE_FCSR</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x60000F0F</resetValue>
          <resetMask>0x7F7F1F1F</resetMask>
          <fields>
            <field>
              <name>RXFIFO_STATUS</name>
              <description>RX FIFO Empty 
0: No room for new word in RX FIFO 
1: More than one room for new word in RX FIFO (&gt;= 1 word) </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_room</name>
                  <description>No room for new word in RX FIFO</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>More</name>
                  <description>More than one room for new word in RX FIFO (&gt;= 1 word)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_EMP_CNT</name>
              <description>RX FIFO Empty Space Word Counter </description>
              <bitRange>[29:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TXFIFO_STATUS</name>
              <description>TX FIFO Data Available Flag 
0: No available data in TX FIFO 
1: More than one data in TX FIFO (&gt;= 1 word) </description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_available</name>
                  <description>No available data in TX FIFO</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>More</name>
                  <description>More than one data in TX FIFO (&gt;= 1 word)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_AVA_CNT</name>
              <description>TX FIFO Available Word Counter </description>
              <bitRange>[21:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RXFIFO_INT_TRIG_LEVEL</name>
              <description>RX FIFO Empty Trigger Level Interrupt and DMA request trigger level for RXFIFO normal condition Trigger Level = RXTL + 1 Notes: RX FIFO is used for input the data. </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXFIFO_INT_TRIG_LEVEL</name>
              <description>TX FIFO Trigger Level Interrupt and DMA request trigger level for TXFIFO normal condition Trigger Level = TXTL + 1 Notes: TX FIFO is used for output the result data. </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CE_ICSR</name>
          <description>CE_ICSR</description>
          <addressOffset>0x48</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x515</resetMask>
          <fields>
            <field>
              <name>RXFIFO_EMP_PENDING_BIT</name>
              <description>RX FIFO Empty Pending bit 
0: No pending 
1: RX FIFO Empty pending Notes: Write `1` to clear or automatic clear if interrupt condition fails. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_pending</name>
                  <description>No pending</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX</name>
                  <description>RX FIFO Empty pending Notes: Write `1` to clear or automatic clear if interrupt condition fails.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_AVA_PENDING_BIT</name>
              <description>TX FIFO Data Available Pending bit 
0: No TX FIFO pending 
1: TX FIFO pending Notes: Write `1` to clear or automatic clear if interrupt condition fails. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_TX</name>
                  <description>No TX FIFO pending</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX</name>
                  <description>TX FIFO pending Notes: Write `1` to clear or automatic clear if interrupt condition fails.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DRA_ENABLE</name>
              <description>DRQ Enable 
0: Disable DRQ (CPU polling mode) 
1: Enable DRQ (DMA mode) </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable DRQ (CPU polling mode)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable DRQ (DMA mode)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_EMP_INT_ENABLE</name>
              <description>RX FIFO Empty Interrupt Enable 
0: Disable 
1: Enable  Notes: If it is set to `1`, when the number of empty room is great or equal (&gt;=) the preset threshold, the interrupt is trigger and the correspond flag is set. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable  Notes: If it is set to `1`, when the number of empty room is great or equal (&gt;=) the preset threshold, the interrupt is trigger and the correspond flag is set.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_AVA_INT_ENABLE</name>
              <description>TX FIFO Data Available Interrupt Enable 
0: Disable 
1: Enable Notes: If it is set to `1`, when available data number is great or equal (&gt;=) the preset threshold, the interrupt is trigger and the correspond flag is set. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable Notes: If it is set to `1`, when available data number is great or equal (&gt;=) the preset threshold, the interrupt is trigger and the correspond flag is set.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <dim>8</dim>
          <dimIncrement>4</dimIncrement>
          <name>CE_KEY_n_[%s]</name>
          <description>CE_KEY_n_[%s]</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CE_KEY</name>
              <description>Key[n] Input Value (n= 0~7)/ PRNG Seed[n] (n= 0~5) </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <dim>5</dim>
          <dimIncrement>4</dimIncrement>
          <name>CE_MD_n_[%s]</name>
          <description>CE_MD_n_[%s]</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CE_MID_DATA</name>
              <description>SHA1/ MD5 Message digest MD[n] for SHA1/MD5 (n= 0~4) </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CE_RX</name>
          <description>CE_RX</description>
          <addressOffset>0x200</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CE_RX_FIFO</name>
              <description>32-bits RX FIFO for Input </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CE_TX</name>
          <description>CE_TX</description>
          <addressOffset>0x204</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CE_RX_FIFO</name>
              <description>32-bits TX FIFO for Output </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>SD/MMC0</name>
      <description>SD/MMC0</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C0F000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>CRC_STA_REG</name>
          <description>CRC_STA_REG</description>
          <addressOffset>0x134</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>CRC_STA</name>
              <description>CRC Status CRC status from card/eMMC in write operation Positive CRC status token:3`b010 Negative CRC status token:3`b101 </description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA0_CRC_REG</name>
          <description>DATA0_CRC_REG</description>
          <addressOffset>0x130</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA0_CRC</name>
              <description>Data[0] CRC CRC in data[0] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA1_CRC_REG</name>
          <description>DATA1_CRC_REG</description>
          <addressOffset>0x12C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA1_CRC</name>
              <description>Data[1] CRC CRC in data[1] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA2_CRC_REG</name>
          <description>DATA2_CRC_REG</description>
          <addressOffset>0x128</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA2_CRC</name>
              <description>Data[2] CRC CRC in data[2] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA3_CRC_REG</name>
          <description>DATA3_CRC_REG</description>
          <addressOffset>0x124</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA3_CRC</name>
              <description>Data[3] CRC CRC in data[3] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA4_CRC_REG</name>
          <description>DATA4_CRC_REG</description>
          <addressOffset>0x120</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA4_CRC</name>
              <description>Data[4] CRC CRC in data[4] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA5_CRC_REG</name>
          <description>DATA5_CRC_REG</description>
          <addressOffset>0x11C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA5_CRC</name>
              <description>Data[5] CRC CRC in data[5] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA6_CRC_REG</name>
          <description>DATA6_CRC_REG</description>
          <addressOffset>0x118</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA6_CRC</name>
              <description>Data[6] CRC CRC in data[6] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA7_CRC_REG</name>
          <description>DATA7_CRC_REG</description>
          <addressOffset>0x114</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA7_CRC</name>
              <description>Data[7] CRC CRC in data[7] from card/eMMC.In DDR mode,the higher 16 bits indicate the CRC of even data,and the lower 16bits indicate the CRC of odd data.In SDR mode,the higher of 16 bits indicate the CRC of all data. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>EMMC_DDR_SBIT_DET_REG</name>
          <description>EMMC_DDR_SBIT_DET_REG</description>
          <addressOffset>0x10C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>HALF_START_BIT</name>
              <description>Control for start bit detection mechanism inside mstorage based on duration of start bit.  For eMMC 4.41, start bit can be:  0 - Full cycle   1 - Less than one full cycle  Set HALF_START_BIT=1 for eMMC 4.41 and above; set to 0 for SD applications. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RESP_CRC_REG</name>
          <description>RESP_CRC_REG</description>
          <addressOffset>0x110</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>RESP_CRC</name>
              <description>Response CRC Response CRC from card/eMMC. </description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_A12A</name>
          <description>Auto command 12 argument</description>
          <addressOffset>0x58</addressOffset>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>SD_A12A</name>
              <description>SD_A12A set the argument of command 12 automatically send by controller  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_BLKSIZ</name>
          <description>SD_BLKSIZ</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x200</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>BLK_SZ</name>
              <description>Block size </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_BUS_MODE</name>
          <description>SD_BUS_MODE</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x800007FF</resetMask>
          <fields>
            <field>
              <name>DES_LOAD_CTRL</name>
              <description>When DMAC fetches a descriptor, if the valid bit of a descriptor is not set, DMAC FSM will go to the suspend state. Setting this bit will make DMAC re-fetch descriptor again and do the transfer normally. </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>PRG_BURST_LEN</name>
              <description>Programmable Burst Length.  These bits indicate the maximum number of beats to be performed in one IDMAC transaction. The IDMAC will always attempt to burst as specified in PBL each time it starts a Burst transfer on the host bus. The permissible values are 1, 4, 8, 16, 32, 64, 128 and 256. This value is the mirror of MSIZE of FIFOTH register. In order to change this value, write the required value to FIFOTH register. This is an encode value as follows.  000 - 1 transfers 001 - 4 transfers 010 - 8 transfers 011 - 16 transfers 100 - 32 transfers 101 - 64 transfers 110 - 128 transfers 111 - 256 transfers Transfer unit is either 16, 32, or 64 bits, based on HDATA_WIDTH. PBL is a read-only value. </description>
              <bitRange>[10:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>IDMAC_ENB</name>
              <description>IDMAC Enable.  When set, the IDMAC is enabled. DE is read/write. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DES_SKIP_LEN</name>
              <description>Descriptor Skip Length.  Specifies the number of Word to skip between two unchained descriptors. This is applicable only for dual buffer structure.  Default value is set to 4 DWORD. </description>
              <bitRange>[6:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIX_BUST_CTRL</name>
              <description>Fixed Burst.  Controls whether the AHB Master interface performs fixed burst transfers or not. When set, the AHB will use only SINGLE, INCR4, INCR8 during start of normal burst transfers. When reset, the AHB will use SINGLE and INCR burst transfer operations.  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>IDMAC_RST</name>
              <description>DMA Reset.  When set, the DMA Controller resets all its internal registers. SWR is read/write. It is automatically cleared after 1 clock cycle. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_BYTCNT</name>
          <description>SD_BYTCNT</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x200</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>BYTE_CNT</name>
              <description>Byte counter Number of bytes to be transferred; should be integer multiple of Block Size for block transfers. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_CLKDIV</name>
          <description>SD_CLKDIV</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x800300FF</resetMask>
          <fields>
            <field>
              <name>MASK_DATA0</name>
              <description>0 - Do not mask data0 when updata clock ; 1 - Mask data0 when updata clock; Default value : 0; </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CCLK_CTRL</name>
              <description>Card Clock Output Control 0 - Card clock always on 1 - Turn off card clock when FSM in IDLE state </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CCLK_ENB</name>
              <description>Card Clock Enable 0 - Card Clock off 1 - Card Clock on </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CCLK_DIV</name>
              <description>Card clock divider n - Source clock is divided by 2*n.(n=0~255) </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_CMD</name>
          <description>SD_CMD</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xBF20FFFF</resetMask>
          <fields>
            <field>
              <name>CMD_LOAD_START_COMMAND</name>
              <description>CMD_LOAD Start Command. This bit is auto cleared when current command is sent. If there is no any response error happened, a command complete interrupt bit (CMD_OVER) will be set in interrupt register. You should not write any other command before this bit is cleared, or a command busy interrupt bit (CMD_BUSY) will be set in interrupt register. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>USE_HOLD_REGISTER</name>
              <description>Use Hold Register  0 - CMD and DATA sent to card bypassing HOLD Register  1 - CMD and DATA sent to card through the HOLD Register </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VOL_SW_VOLTAGE_SWITCH</name>
              <description>VOL_SW Voltage Switch 0 - normal command 1 - Voltage switch command, set for CMD11 only </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BOOT_ABT_BOOT_ABORT</name>
              <description>BOOT_ABT Boot Abort Setting this bit will terminate the boot operation. </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EXP_BOOT_ACK_EXPECT_BOOT</name>
              <description>EXP_BOOT_ACK Expect Boot Acknowledge.  When Software sets this bit along in mandatory boot operation, controller expects a boot acknowledge start pattern of 0-1-0 from the selected card. </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BOOT_MOD_BOOT_MODE</name>
              <description>BOOT_MOD Boot Mode 2`b00 - normal command 2`b01 - Mandatory Boot operation 2`b10 - Alternate Boot operation 2`b11 - reserved </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PRG_CLK_CHANGE_CLOCK</name>
              <description>PRG_CLK Change Clock 0 - Normal command 1 - Change Card Clock; when this bit is set, controller will change clock domain and clock output. No command will be sent. </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SEND_INIT_SEQ_SEND_INITIALIZATION</name>
              <description>SEND_INIT_SEQ Send Initialization 0 - normal command sending 1 - Send initialization sequence before sending this command. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STOP_ABT_CMD_STOP_ABORT</name>
              <description>STOP_ABT_CMD Stop Abort Command 0 - normal command sending 1 - send Stop or abort command to stop current data transfer in progress.(CMD12, CMD52 for writing `I/O Abort` in SDIO CCCR) </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WAIT_PRE_OVER_WAIT_DATA</name>
              <description>WAIT_PRE_OVER Wait Data Transfer Over 0 - Send command at once, do not care of data transferring 1 - Wait for data transfer completion before sending current command </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STOP_CMD_FLAG_SEND_STOP</name>
              <description>STOP_CMD_FLAG Send Stop CMD Automatically (CMD12) 0 - Do not send stop command at end of data transfer 1 - Send stop command automatically at end of data transfer </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TRANS_MODE_TRANSFER_MODE</name>
              <description>TRANS_MODE Transfer Mode 0 - Block data transfer command 1 - Stream data transfer command </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TRANS_DIR_TRANSFER_DIRECTION</name>
              <description>TRANS_DIR Transfer Direction 0 - Read operation 1 - Write operation </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DATA_TRANS_DATA_TRANSFER</name>
              <description>DATA_TRANS Data Transfer 0 - without data transfer 1 - with data transfer </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CHK_RESP_CRC_CHECK_RESPONSE</name>
              <description>CHK_RESP_CRC Check Response CRC 0 - Do not check response CRC 1 - Check response CRC </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LONG_RESP_RESPONSE_TYPE</name>
              <description>LONG_RESP Response Type 0 -Short Response (48 bits) 1 -Long Response (136 bits) </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESP_RCV_RESPONSE_RECEIVE</name>
              <description>RESP_RCV Response Receive 0 - Command without Response 1 - Command with Response </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMD_IDX_CMD_INDEX</name>
              <description>CMD_IDX CMD Index Command index value </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_CMDARG</name>
          <description>SD_CMDARG</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CMD_ARG</name>
              <description>Command argument </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_CTRL</name>
          <description>SD_CTRL</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x100</resetValue>
          <resetMask>0x80000537</resetMask>
          <fields>
            <field>
              <name>FIFO_AC_MOD</name>
              <description>FIFO Access Mode 1-AHB bus 0-DMA bus </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DDR_MOD_SEL</name>
              <description>DDR Mode Select 0 - SDR mode  1 - DDR mode </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CD_DBC_ENB</name>
              <description>Card Detect (Data[3] status) De-bounce Enable 0 - disable de-bounce 1 - enable de-bounce </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DMA_ENB</name>
              <description>DMA Global Enable 0 - Disable DMA to transfer data, using AHB bus 1 - Enable DMA to transfer data </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INT_ENB</name>
              <description>Global Interrupt Enable 0 - Disable interrupts 1 - Enable interrupts </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DMA_RST</name>
              <description>DMA Reset </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO_RST</name>
              <description>FIFO Reset 0 - No change 1 - Reset FIFO </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOFT_RST</name>
              <description>Software Reset 0 - No change 1 - Reset SD/MMC controller </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_CTYPE</name>
          <description>SD_CTYPE</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <field>
              <name>CARD_WID</name>
              <description>Card width 2`b00 - 1-bit width 2`b01 - 4-bit width 2`b1x - 8-bit width </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_DLBA</name>
          <description>Descriptor List Base Address</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DES_BASE_ADDR</name>
              <description>Start of Descriptor List.  Contains the base address of the First Descriptor. The LSB bits [1:0] are ignored and taken as all-zero by the IDMAC internally. Hence these LSB bits are read-only. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_DSR</name>
          <description>SD_DSR</description>
          <addressOffset>0x88</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FF37</resetMask>
          <fields>
            <field>
              <name>DMAC_FSM_STA</name>
              <description>DMAC FSM present state.  0 - DMA_IDLE  1 - DMA_SUSPEND  2 - DESC_RD  3 - DESC_CHK  4 - DMA_RD_REQ_WAIT  5 - DMA_WR_REQ_WAIT  6 - DMA_RD  7 - DMA_WR  8 - DESC_CLOSE  This bit is read-only. </description>
              <bitRange>[16:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DMAC_ERR_STA</name>
              <description>Error Bits.  Indicates the type of error that caused a Bus Error. Valid only with Fatal Bus Error bit (IDSTS[2]) set. This field does not generate an interrupt.  3`b001 - Host Abort received during transmission  3`b010 - Host Abort received during reception  Others: Reserved EB is read-only. </description>
              <bitRange>[12:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ABN_INT_SUM</name>
              <description>Abnormal Interrupt Summary.  Logical OR of the following:  IDSTS[2] - Fatal Bus Interrupt  IDSTS[4] - DU bit Interrupt  IDSTS[5] - Card Error Summary Interrupt  Only unmasked bits affect this bit.  This is a sticky bit and must be cleared each time a corresponding bit that causes AIS to be set is cleared. Writing a 1 clears this bit. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NOR_INT_SUM</name>
              <description>Normal Interrupt Summary.  Logical OR of the following:  IDSTS[0] - Transmit Interrupt  IDSTS[1] - Receive Interrupt  Only unmasked bits affect this bit.  This is a sticky bit and must be cleared each time a corresponding bit that causes NIS to be set is cleared. Writing a 1 clears this bit. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ERR_FLAG_SUM</name>
              <description>Card Error Summary.  Indicates the status of the transaction to/from the card; also present in RINTSTS. Indicates the logical OR of the following bits:  EBE - End Bit Error  RTO - Response Timeout/Boot Ack Timeout  RCRC - Response CRC  SBE - Start Bit Error  DRTO - Data Read Timeout/BDS timeout  DCRC - Data CRC for Receive  RE - Response Error  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DES_UNAVL_INT</name>
              <description>Descriptor Unavailable Interrupt.  This bit is set when the descriptor is unavailable due to OWN bit = 0 (DES0[31] =0). Writing a 1 clears this bit. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FATAL_BERR_INT</name>
              <description>Fatal Bus Error Interrupt.  Indicates that a Bus Error occurred (IDSTS[12:10]). When this bit is set, the DMA disables all its bus accesses. Writing a 1 clears this bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_INT</name>
              <description>Receive Interrupt.  Indicates the completion of data reception for a descriptor. Writing a 1 clears this bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TX_INT</name>
              <description>Transmit Interrupt.  Indicates that data transmission is finished for a descriptor. Writing a `1` clears this bit. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_FIFOTH</name>
          <description>SD_FIFOTH</description>
          <addressOffset>0x40</addressOffset>
          <resetValue>0xF0000</resetValue>
          <resetMask>0x7FFFFFFF</resetMask>
          <fields>
            <field>
              <name>BSIZE_OF_TRANS</name>
              <description>Burst size of multiple transaction 000 - 1 transfers 001 - 4 010 - 8 011 - 16 100 - 32 101 - 64 110 - 128 111 - 256  Should be programmed same as DMA controller multiple transaction size. The units for transfers are the DWORD. A single transfer would be signaled based on this value. Value should be sub-multiple of (RX_TL + 1) and (FIFO_DEPTH - TX_TL) Recommended: MSize = 8, TX_TL = 16, RX_TL = 15 </description>
              <bitRange>[30:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_TL</name>
              <description>Rx Trigger Level 0x0~0x1e - RX Trigger Level is 0~30 0x1f - reserved FIFO threshold when FIFO request host to receive data from FIFO. When FIFO data level is greater than this value, DMA is request is raised if DMA enabled, or RX interrupt bit is set if interrupt enabled. At the end of packet, if the last transfer is less than this level, the value is ignored and relative request will be raised as usual. Recommended: 15 (means greater than 15) </description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TX_TL</name>
              <description>TX Trigger Level 0x1~0xf - TX Trigger Level is 1~31 0x0 - no trigger FIFO threshold when FIFO requests host to transmit data to FIFO. When FIFO data level is less than or equal to this value, DMA TX request is raised if DMA enabled, or TX request interrupt bit is set if interrupt enabled. At the end of packet, if the last transfer is less than this level, the value is ignored and relative request will be raised as usual. Recommended: 16 (means less than or equal to 16) </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_FIFO_REG</name>
          <description>SD_FIFO_REG</description>
          <addressOffset>0x200</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TX/RX_FIFO</name>
              <description>Data FIFO </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_FUNS</name>
          <description>FIFO Function Select register</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFF0007</resetMask>
          <fields>
            <field>
              <name>CEATA_EN</name>
              <description>CEATA Support ON/OFF 0xceaa - CEATA support on. All hidden CEATA relative bits are accessible normally and these 16 bits return value of 0x1 when be read. Other value - CEATA support off. All hidden CEATA relative bits cannot be access and these 16 bits return value of 0 when be read. </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ABT_RDATA</name>
              <description>Abort Read Data 0 - Ignored 1 -After suspend command is issued during read-transfer, software polls card to find when suspend happened. Once suspend occurs, software sets bit to reset data state-machine, which is waiting for next block of data. Used in SDIO card suspends sequence. . </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>READ_WAIT</name>
              <description>Read Wait 0 - Clear SDIO read wait 1 - Assert SDIO read wait </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HOST_SEND_MMC_IRQRESQ</name>
              <description>Host Send MMC IRQ Response 0 - Ignored 1 - Send auto IRQ response When host is waiting MMC card interrupt response, setting this bit will make controller cancel wait state and return to idle state, at which time, controller will receive IRQ response sent by itself. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_HWRST</name>
          <description>Hardware Reset Register</description>
          <addressOffset>0x78</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>HW_RESET</name>
              <description>1 - Active mode  0 - Reset  These bits cause the cards to enter pre-idle state, which requires them to be re-initialized. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_IDIE_REG</name>
          <description>SD_IDIE_REG</description>
          <addressOffset>0x8C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x337</resetMask>
          <fields>
            <field>
              <name>ABN_INT_ENB</name>
              <description>Abnormal Interrupt Summary Enable.  When set, an abnormal interrupt is enabled. This bit enables the following bits:  IDINTEN[2] - Fatal Bus Error Interrupt  IDINTEN[4] - DU Interrupt  IDINTEN[5] - Card Error Summary Interrupt </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NOR_INT_ENB</name>
              <description>Normal Interrupt Summary Enable.  When set, a normal interrupt is enabled. When reset, a normal interrupt is disabled. This bit enables the following bits:  IDINTEN[0] - Transmit Interrupt  IDINTEN[1] - Receive Interrupt </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ERR_SUM_INT_ENB</name>
              <description>Card Error summary Interrupt Enable.  When set, it enables the Card Interrupt summary. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DES_UNAVL_INT_ENB</name>
              <description>Descriptor Unavailable Interrupt.  When set along with Abnormal Interrupt Summary Enable, the DU interrupt is enabled. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FERR_INT_ENB</name>
              <description>Fatal Bus Error Enable.  When set with Abnormal Interrupt Summary Enable, the Fatal Bus Error Interrupt is enabled. When reset, Fatal Bus Error Enable Interrupt is disabled. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_INT_ENB</name>
              <description>Receive Interrupt Enable.  When set with Normal Interrupt Summary Enable, Receive Interrupt is enabled. When reset, Receive Interrupt is disabled. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TX_INT_ENB</name>
              <description>Transmit Interrupt Enable.  When set with Normal Interrupt Summary Enable, Transmit Interrupt is enabled. When reset, Transmit Interrupt is disabled. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_INTMASK</name>
          <description>SD_INTMASK</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>INT_MASK</name>
              <description>0 - interrupt masked 1 - interrupt enabled  Bit field defined as following: bit 31- card removed bit 30 - card inserted bit 17~29 - reserved bit 16 - SDIO interrupt bit 15 - Data End-bit error bit 14 - Auto Stop Command done bit 13 - Data Start Error bit 12 - Command Busy and illegal write bit 11 - FIFO under run/overflow bit 10 - Data starvation timeout /V1.8 Switch Done bit 9 - Data timeout/Boot data start bit 8 - Response timeout/Boot ACK received bit 7 - Data CRC error bit 6 - Response CRC error bit 5 - Data Receive Request bit 4 -Data Transmit Request bit 3 - Data Transfer Complete bit 2 - Command Complete bit 1 - Response Error (no response or response CRC error) bit 0 - Reserved </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_MINTSTS</name>
          <description>SD_MINTSTS</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>MSKD_ISTA</name>
              <description>Interrupt status. Enabled only if corresponding bit in mask register is set.  Bit field defined as following: bit 31 - card removed bit 30 - card inserted bit 17~29 - reserved bit 16 - SDIO interrupt bit 15 - Data End-bit error bit 14 - Auto command done bit 13 - Data Start Error bit 12 - Command Busy and illegal write bit 11 - FIFO under run/overflow bit 10 - Data starvation timeout (HTO)/V1.8 Switch Done bit 9 - Data timeout/Boot data start bit 8 - Response timeout/Boot ACK received bit 7 - Data CRC error bit 6 - Response CRC error bit 5 - Data Receive Request bit 4 -Data Transmit Request bit 3 - Data Transfer Complete bit 2 - Command Complete bit 1 - Response Error (no response or response CRC error) bit 0 - Reserved </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_NTSR_REG</name>
          <description>SD_NTSR_REG</description>
          <addressOffset>0x5C</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0xFFFFFFC3</resetMask>
          <fields>
            <field>
              <name>MODE_SELEC</name>
              <description>0 - Old mode of Sample/Output Timing ; 1 - New mode of Sample/Output Timing; Default value : 0; </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SAMPLE_TIMING_PHASE_RX</name>
              <description>SAMPLE_TIMING_PHASE(RX) 00 - Sample timing phase offset 90 ; 01 - Sample timing phase offset 180 ; 10 - Sample timing phase offset 270 ; 11 - Ignore; Default value : 00; </description>
              <bitRange>[30:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OUTPUT_TIMING_PHASE_TX</name>
              <description>OUTPUT_TIMING_PHASE(TX) 00 - Output timing phase offset 90 ; 01 - Output timing phase offset 180 ; 10 - Output timing phase offset 270 ; 11 - Ignore; Default value : 01; </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_RESP0</name>
          <description>Response 0 register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CMD_RESP0</name>
              <description>response 0 Bit[31:0] of response </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_RESP1</name>
          <description>Response 1 register</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CMD_RESP1</name>
              <description>response 1 Bit[63:31] of response </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_RESP2</name>
          <description>Response 2 register</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CMD_RESP2</name>
              <description>response 2 Bit[95:64] of response </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_RESP3</name>
          <description>Response 3 register</description>
          <addressOffset>0x2C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>CMD_RESP3</name>
              <description>response 3 Bit[127:96] of response </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_RINTSTS</name>
          <description>SD_RINTSTS</description>
          <addressOffset>0x38</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RAW_ISTA</name>
              <description>Raw Interrupt Status.  Bit field defined as following: bit 31 - card removed bit 30 - card inserted bit 17~29 - reserved bit 16 - SDIO interrupt bit 15 - Data End-bit error bit 14 - Auto command done bit 13 - Data Start Error bit 12 - Command Busy and illegal write bit 11 - FIFO under run/overflow bit 10 - Data starvation timeout (HTO)/V1.8 Switch Done bit 9 - Data timeout/Boot data start bit 8 - Response timeout/Boot ACK received bit 7 - Data CRC error bit 6 - Response CRC error bit 5 - Data Receive Request bit 4 -Data Transmit Request bit 3 - Data Transfer Complete bit 2 - Command Complete bit 1 - Response Error (no response or response CRC error) bit 0 - Reserved </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_STATUS</name>
          <description>SD_STATUS</description>
          <addressOffset>0x3C</addressOffset>
          <resetValue>0x6</resetValue>
          <resetMask>0x803FFFFF</resetMask>
          <fields>
            <field>
              <name>DMA_REQ</name>
              <description>dma_req DMA request signal state </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FIFO_LEVEL</name>
              <description>FIFO Level Number of filled locations in FIFO </description>
              <bitRange>[21:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESP_IDX</name>
              <description>Response Index Index of previous response, including any auto-stop sent by controller </description>
              <bitRange>[16:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FSM_BUSY</name>
              <description>Data FSM Busy Data transmit or receive state-machine is busy </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CARD_BUSY</name>
              <description>Card data busy Inverted version of DATA[0] 0 - card data not busy 1 - card data busy </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CARD_PRESENT</name>
              <description>Data[3] status level of DATA[3]; checks whether card is present 0 - card not present 1 - card present </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FSM_STA</name>
              <description>Command FSM states: 0 - Idle 1 - Send init sequence 2 - Tx cmd start bit 3 - Tx cmd tx bit 4 - Tx cmd index + arg 5 - Tx cmd crc7 6 - Tx cmd end bit 7 - Rx resp start bit 8 - Rx resp IRQ response 9 - Rx resp tx bit 10 - Rx resp cmd idx 11 - Rx resp data 12 - Rx resp crc7 13 - Rx resp end bit 14 - Cmd path wait NCC 15 - Wait; CMD-to-response turnaround </description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FIFO_FULL</name>
              <description>FIFO full  1 - FIFO full 0 - FIFO not full </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FIFO_EMPTY</name>
              <description>FIFO Empty 1 - FIFO Empty 0 - FIFO not Empty </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FIFO_TX_LEVEL</name>
              <description>FIFO TX Water Level flag 0 - FIFO didn`t reach transmit trigger level 1 - FIFO reached transmit trigger level </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FIFO_RX_LEVEL</name>
              <description>FIFO TX Water Level flag 0 - FIFO didn`t reach receive trigger level 1 - FIFO reached receive trigger level </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_THLD_REG</name>
          <description>SD_THLD_REG</description>
          <addressOffset>0x100</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF0001</resetMask>
          <fields>
            <field>
              <name>CARD_RD_THLD</name>
              <description>Card Read Threshold Size </description>
              <bitRange>[27:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CARD_RD_THLD_ENB</name>
              <description>Card Read Threshold Enable 0 - Card Read Threshold Disable 1 - Card Read Threshold Enable Host controller initiates Read Transfer only if CARD_RD_THLD amount of space is available in receive FIFO </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SD_TMOUT</name>
          <description>SD_TMOUT</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0xFFFFFF40</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DTO_LMT</name>
              <description>Data Timeout Limit </description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RTO_LMT</name>
              <description>Response Timeout Limit </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral derivedFrom="SD/MMC0">
      <name>SD/MMC1</name>
      <description>SD/MMC1</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C10000</baseAddress>
      <access>read-write</access>
    </peripheral>
    <peripheral derivedFrom="SD/MMC0">
      <name>SD/MMC2</name>
      <description>SD/MMC2</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C11000</baseAddress>
      <access>read-write</access>
    </peripheral>
    <peripheral>
      <name>DMA</name>
      <description>DMA</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C02000</baseAddress>
      <access>read-write</access>
      <registers>
        <cluster>
          <dim>8</dim>
          <dimIncrement>64</dimIncrement>
          <name>_N[%s]</name>
          <addressOffset>0x100</addressOffset>
          <register>
            <name>DMA_CFG_REG</name>
            <description>DMA Channel Configuration Register(N=0~7)</description>
            <addressOffset>0xC</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0x7FF07FF</resetMask>
            <fields>
              <field>
                <name>DMA_DEST_DATA_WIDTH</name>
                <description>DMA Destination Data Width. 
00: 8-bit 
01: 16-bit 
10: 32-bit 
11: / </description>
                <bitRange>[26:25]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>_8_bit</name>
                    <description>8-bit</description>
                    <value>0b00</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>_16_bit</name>
                    <description>16-bit</description>
                    <value>0b01</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>_32_bit</name>
                    <description>32-bit</description>
                    <value>0b10</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>DMA_DEST_BST_LEN</name>
                <description>DMA Destination Burst Length. 
00: 1 
01: / 
10: 8 
11: / </description>
                <bitRange>[24:23]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>_1</name>
                    <description>1</description>
                    <value>0b00</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>_8</name>
                    <description>8</description>
                    <value>0b10</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>DMA_ADDR_MODE</name>
                <description>DMA Destination Address Mode 
0x0: Linear Mode 
0x1: IO Mode 
0x2: / 
0x3: / </description>
                <bitRange>[22:21]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Linear</name>
                    <description>Linear Mode</description>
                    <value>0x0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>IO</name>
                    <description>IO Mode</description>
                    <value>0x1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>DMA_DEST_DRQ_TYPE</name>
                <description>DMA Destination DRQ Type The details in DRQ Type and Port Corresponding Relation. </description>
                <bitRange>[20:16]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>DMA_SRC_DATA_WIDTH</name>
                <description>DMA Source Data Width. 
00: 8-bit 
01: 16-bit 
10: 32-bit 
11: / </description>
                <bitRange>[10:9]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>_8_bit</name>
                    <description>8-bit</description>
                    <value>0b00</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>_16_bit</name>
                    <description>16-bit</description>
                    <value>0b01</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>_32_bit</name>
                    <description>32-bit</description>
                    <value>0b10</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>DMA_SRC_BST_LEN</name>
                <description>DMA Source Burst Length. 
00: 1 
01: / 
10: 8 
11: / </description>
                <bitRange>[8:7]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>_1</name>
                    <description>1</description>
                    <value>0b00</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>_8</name>
                    <description>8</description>
                    <value>0b10</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>DMA_SRC_ADDR_MODE</name>
                <description>DMA Source Address Mode 
0x0: Linear Mode 
0x1: IO Mode 
0x2: / 
0x3: / </description>
                <bitRange>[6:5]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Linear</name>
                    <description>Linear Mode</description>
                    <value>0x0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>IO</name>
                    <description>IO Mode</description>
                    <value>0x1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>DMA_SRC_DRQ_TYPE</name>
                <description>DMA Source DRQ Type The details in DRQ Type and Port Corresponding Relation. </description>
                <bitRange>[4:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DMA_CUR_DEST_REG</name>
            <description>DMA Channel Current Destination Register(N=0~7)</description>
            <addressOffset>0x14</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <field>
                <name>DMA_CUR_DEST</name>
                <description>DMA Channel Current Destination Address, read only. </description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DMA_CUR_SRC_REG</name>
            <description>DMA Channel Current Source Register(N=0~7)</description>
            <addressOffset>0x10</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <field>
                <name>DMA_CUR_SRC</name>
                <description>DMA Channel Current Source Address, read only. </description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DMA_DESC_ADDR_REG</name>
            <description>DMA Channel Start Address Register(N=0~7)</description>
            <addressOffset>0x8</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <field>
                <name>DMA_DESC_ADDR</name>
                <description>DMA Channel Descriptor Address. </description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DMA_EN_REG</name>
            <description>DMA Channel Enable Register (N=0~7)</description>
            <addressOffset>0x0</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <field>
                <name>DMA_EN</name>
                <description>DMA Channel Enable 
0: Disable 
1: Enable. </description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Disable</description>
                    <value>0b0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Enable.</description>
                    <value>0b1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
            </fields>
          </register>
          <register>
            <name>DMA_PARA_REG</name>
            <description>DMA Channel Parameter Register(N=0~7)</description>
            <addressOffset>0x1C</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <field>
                <name>DATA_BLK_SIZE</name>
                <description>Data Block Size N. </description>
                <bitRange>[15:8]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>WAIT_CYC</name>
                <description>Wait Clock Cycles n. </description>
                <bitRange>[7:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DMA__PAU_REG</name>
            <description>DMA__PAU_REG</description>
            <addressOffset>0x4</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <field>
                <name>DMA_PAUSE</name>
                <description>Pausing DMA Channel Transfer Data. 
0: Resume Transferring, 
1: Pause Transferring. </description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Resume</name>
                    <description>Resume Transferring,</description>
                    <value>0b0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Pause</name>
                    <description>Pause Transferring.</description>
                    <value>0b1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>DMA_AUTO_GATE_REG</name>
          <description>DMA Auto Gating Register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>DMA_MCLK_CIRCUIT</name>
              <description>DMA MCLK interface circuit auto gating bit. 
0: Auto gating enable 
1: Auto gating disable. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Auto_gating_enable</name>
                  <description>Auto gating enable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Auto_gating</name>
                  <description>Auto gating disable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA_COMMON_CIRCUIT</name>
              <description>DMA common circuit auto gating bit. 
0: Auto gating enable 
1: Auto gating disable. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Auto_gating_enable</name>
                  <description>Auto gating enable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Auto_gating</name>
                  <description>Auto gating disable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA_CHAN_CIRCUIT</name>
              <description>DMA channel circuit auto gating bit. 
0: Auto gating enable 
1: Auto gating disable. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Auto_gating_enable</name>
                  <description>Auto gating enable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Auto_gating</name>
                  <description>Auto gating disable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <dim>12</dim>
          <dimIncrement>64</dimIncrement>
          <name>DMA_BCNT_LEFT_REG[%s]</name>
          <description>DMA Channel Byte Counter Left Register(N=0~7)</description>
          <addressOffset>0x118</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFFFFF</resetMask>
          <fields>
            <field>
              <name>DMA_BCNT_LEFT</name>
              <description>DMA Channel Byte Counter Left, read only. </description>
              <bitRange>[24:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_IRQ_EN_REG0</name>
          <description>DMA_IRQ_EN_REG0</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>DMA7_QUEUE_IRQ_EN</name>
              <description>DMA 7 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA7_PKG_IRQ_EN</name>
              <description>DMA 7 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA7_HLAF_IRQ_EN</name>
              <description>DMA 7 Half Package Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA6_QUEUE_IRQ_EN</name>
              <description>DMA 6 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA6_PKG_IRQ_EN</name>
              <description>DMA 6 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA6_HLAF_IRQ_EN</name>
              <description>DMA 6 Half Package Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA5_QUEUE_IRQ_EN</name>
              <description>DMA 5 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA5_PKG_IRQ_EN</name>
              <description>DMA 5 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA5_HLAF_IRQ_EN</name>
              <description>DMA 5 Half package Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA4_QUEUE_IRQ_EN</name>
              <description>DMA 4 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA4_PKG_IRQ_EN</name>
              <description>DMA 4 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA4_HLAF_IRQ_EN</name>
              <description>DMA 4 Half Package Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA3_QUEUE_IRQ_EN</name>
              <description>DMA 3 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA3_PKG_IRQ_EN</name>
              <description>DMA 3 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA3_HLAF_IRQ_EN</name>
              <description>DMA 3 Half Package Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA2_QUEUE_IRQ_EN</name>
              <description>DMA 2 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA2_PKG_IRQ_EN</name>
              <description>DMA 2 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA2_HLAF_IRQ_EN</name>
              <description>DMA 2 Half Package Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA1_QUEUE_IRQ_EN</name>
              <description>DMA 1 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA1_PKG_IRQ_EN</name>
              <description>DMA 1 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA1_HLAF_IRQ_EN</name>
              <description>DMA 1 Half Package Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA0_QUEUE_IRQ_EN</name>
              <description>DMA 0 Queue End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA0_PKG_IRQ_EN</name>
              <description>DMA 0 Package End Transfer Interrupt Enable. 
0: Disable, 1: Enable. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA0_HLAF_IRQ_EN</name>
              <description>DMA 0 Half Package Transfer Interrupt Enable. 
0: Disable, 1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable, 1: Enable</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_IRQ_PEND_REG</name>
          <description>DMA IRQ Pending Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>DMA7_QUEUE_IRQ_PEND</name>
              <description>DMA 7 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA7_PKG_IRQ_PEND</name>
              <description>DMA 7 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA7_HLAF_IRQ_PEND</name>
              <description>DMA 7 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA6_QUEUE_IRQ_PEND</name>
              <description>DMA 6 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA6_PKG_IRQ_PEND</name>
              <description>DMA 6 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA6_HLAF_IRQ_PEND</name>
              <description>DMA 6 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA5_QUEUE_IRQ_PEND</name>
              <description>DMA 5 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA5_PKG_IRQ_PEND</name>
              <description>DMA 5 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA5_HLAF_IRQ_PEND</name>
              <description>DMA 5 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA4_QUEUE_IRQ_PEND</name>
              <description>DMA 4 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA4_PKG_IRQ_PEND</name>
              <description>DMA 4 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA4_HLAF_IRQ_PEND</name>
              <description>DMA 4 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA3_QUEUE_IRQ_PEND</name>
              <description>DMA 3 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA3_PKG_IRQ_PEND</name>
              <description>DMA 3 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA3_HLAF_IRQ_PEND</name>
              <description>DMA 3 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA2_QUEUE_IRQ_PEND</name>
              <description>DMA 2 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA2_PKG_IRQ_PEND</name>
              <description>DMA 2 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA2_HLAF_IRQ_PEND</name>
              <description>DMA 2 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA1_QUEUE_IRQ_PEND</name>
              <description>DMA 1 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA1_PKG_IRQ_PEND</name>
              <description>DMA 1 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA1_HLAF_IRQ_PEND</name>
              <description>DMA 1 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA0_QUEUE_IRQ_PEND</name>
              <description>DMA 0 Queue End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA0_PKG_IRQ_PEND</name>
              <description>DMA 0 Package End Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA0_HLAF_IRQ_PEND</name>
              <description>DMA 0 Half Package Transfer Interrupt Pending. Set 1 to the bit will clear it. 
0: No effect, 1: Pending. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Pending.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_STA_REG</name>
          <description>DMA Status Register</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DMA7_STATUS</name>
              <description>DMA Channel 7 Status. 
0: Idle 
1: Busy </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA6_STATUS</name>
              <description>DMA Channel 6 Status. 
0: Idle 
1: Busy </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA5_STATUS</name>
              <description>DMA Channel 5 Status. 
0: Idle 
1: Busy </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA4_STATUS</name>
              <description>DMA Channel 4 Status. 
0: Idle 
1: Busy. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA3_STATUS</name>
              <description>DMA Channel 3 Status. 
0: Idle 
1: Busy. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA2_STATUS</name>
              <description>DMA Channel 2 Status. 
0: Idle, 
1: Busy. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA1_STATUS</name>
              <description>DMA Channel 1 Status. 
0: Idle, 
1: Busy. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA0_STATUS</name>
              <description>DMA Channel 0 Status. 
0: Idle, 
1: Busy. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>System Control</name>
      <description>System Control</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C00000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>EMAC_EPHY_CLK_REG</name>
          <description>EMAC_EPHY_CLK_REG</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x58000</resetValue>
          <resetMask>0xFFFFBFFF</resetMask>
          <fields>
            <field>
              <name>BPS_EFFUSE</name>
              <description></description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>XMII_SEL</name>
              <description>0: Internal SMI and MII 
1: External SMI and MII </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Internal</name>
                  <description>Internal SMI and MII</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>External</name>
                  <description>External SMI and MII</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EPHY_MODE</name>
              <description>Operation Mode Selection 00 : Normal Mode 01 : Sim Mode 10 : AFE Test Mode 11 : / </description>
              <bitRange>[26:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PHY_ADDR</name>
              <description>PHY Address </description>
              <bitRange>[24:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BIST_CLK_EN</name>
              <description>0 : BIST clk disable 1 : BIST clk enable </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_SEL</name>
              <description>0 : 25MHz 1 : 24MHz </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LED_POL</name>
              <description>0 : High active 1 : Low active </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SHUTDOWN</name>
              <description>0 : Power up 1 : Shutdown </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PHY_SELECT</name>
              <description>0 : External PHY  1 : Internal PHY </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RMII_EN</name>
              <description>0 : Disable RMII Module 1 : Enable RMII Module When this bit assert, MII or RGMII interface is disabled( This means bit13 is prior to bit2) </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ETXDC</name>
              <description>Configure EMAC Transmit Clock Delay Chain. </description>
              <bitRange>[12:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ERXDC</name>
              <description>Configure EMAC Receive Clock Delay Chain. </description>
              <bitRange>[9:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ERXIE</name>
              <description>Enable EMAC Receive Clock Invertor. 
0: Disable 
1: Enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ETXIE</name>
              <description>Enable EMAC Transmit Clock Invertor. 
0: Disable 
1: Enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EPIT</name>
              <description>EMAC PHY Interface Type 
0: MII 
1: RGMII </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MII</name>
                  <description>MII</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RGMII</name>
                  <description>RGMII</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ETCS</name>
              <description>EMAC Transmit Clock Source 
00: Transmit clock source for MII 
01: External transmit clock source for GMII and RGMII 
10: Internal transmit clock source for GMII and RGMII 
11: Reserved </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Transmit</name>
                  <description>Transmit clock source for MII</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>External</name>
                  <description>External transmit clock source for GMII and RGMII</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Internal</name>
                  <description>Internal transmit clock source for GMII and RGMII</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>VER_REG</name>
          <description>Version Register</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>UBOOT_SEL_PAD_STA</name>
              <description>U_boot Select Pin Status. 
0: U_Boot;  
1: Normal Boot. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>U_Boot</name>
                  <description>U_Boot;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal Boot.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VER_BITS</name>
              <description>This read-only bit field always reads back the mask revision level of the chip. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>High Speed Timer</name>
      <description>High Speed Timer</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C60000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>HS_TMR0_CTRL_REG</name>
          <description>HS Timer0 Control Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x800000F3</resetMask>
          <fields>
            <field>
              <name>HS_TMR0_TEST</name>
              <description>High speed timer0 test mode. In test mode, the low register should be set to 0x1, the high register will down counter. The counter needs to be reloaded. 
0: normal mode;  
1: test mode. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>normal</name>
                  <description>normal mode;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>test</name>
                  <description>test mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR0_MODE</name>
              <description>High Speed Timer0 mode. 
0: Continuous mode. When interval value reached, the timer will not disable automatically. 
1: Single mode. When interval value reached, the timer will disable automatically. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Continuous</name>
                  <description>Continuous mode. When interval value reached, the timer will not disable automatically.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single mode. When interval value reached, the timer will disable automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR0_CLK</name>
              <description>Select the pre-scale of the high speed timer0 clock sources. 
000: /1 
001: /2 
010: /4 
011: /8 
100: /16 
101: / 
110: / 
111: / </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_16</name>
                  <description>/16</description>
                  <value>0b100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR0_RELOAD</name>
              <description>High Speed Timer0 Reload. 
0: No effect, 1: Reload High Speed Timer0 Interval Value. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Reload High Speed Timer0 Interval Value.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR0_EN</name>
              <description>High Speed Timer0 Enable. 
0: Stop/Pause, 1: Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stop_slash_Pause</name>
                  <description>Stop/Pause, 1: Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR0_CURNT_HI_REG</name>
          <description>HS Timer0 Current Value High Register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR0_CUR_VALUE_HI</name>
              <description>High Speed Timer0 Current Value [55:32]. </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR0_CURNT_LO_REG</name>
          <description>HS Timer0 Current Value Low Register</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR0_CUR_VALUE_LO</name>
              <description>High Speed Timer0 Current Value [31:0]. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR0_INTV_HI_REG</name>
          <description>HS Timer0 Interval Value High Register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR0_INTV_VALUE_HI</name>
              <description>High Speed Timer0 Interval Value [55:32]. </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR0_INTV_LO_REG</name>
          <description>HS Timer0 Interval Value Low Register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR0_INTV_VALUE_LO</name>
              <description>High Speed Timer Interval Value [31:0]. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR1_CTRL_REG</name>
          <description>HS Timer1 Control Register</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x800000F3</resetMask>
          <fields>
            <field>
              <name>HS_TMR1_TEST</name>
              <description>High speed timer1 test mode. In test mode, the low register should be set to 0x1, the high register will down counter. The counter needs to be reloaded. 
0: normal mode;  
1: test mode. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>normal</name>
                  <description>normal mode;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>test</name>
                  <description>test mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR1_MODE</name>
              <description>High Speed Timer1 mode. 
0: Continuous mode. When interval value reached, the timer will not disable automatically. 
1: Single mode. When interval value reached, the timer will disable automatically. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Continuous</name>
                  <description>Continuous mode. When interval value reached, the timer will not disable automatically.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single mode. When interval value reached, the timer will disable automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR1_CLK</name>
              <description>Select the pre-scale of the high speed timer1 clock sources. 
000: /1 
001: /2 
010: /4 
011: /8 
100: /16 
101: / 
110: / 
111: / </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_2</name>
                  <description>/2</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_4</name>
                  <description>/4</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_8</name>
                  <description>/8</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_16</name>
                  <description>/16</description>
                  <value>0b100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR1_RELOAD</name>
              <description>High Speed Timer1 Reload. 
0: No effect, 1: Reload High Speed Timer1 Interval Value. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect, 1: Reload High Speed Timer1 Interval Value.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR1_EN</name>
              <description>High Speed Timer1 Enable. 
0: Stop/Pause, 1: Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Stop_slash_Pause</name>
                  <description>Stop/Pause, 1: Start. If the timer is started, it will reload the interval value to internal register, and the current counter will count from interval value to 0. If the current counter does not reach the zero, the timer enable bit is set to `0`, the current value counter will pause. At least wait for 2 cycles, the start bit can be set to 1. In timer pause state, the interval value register can be modified. If the timer is started again, and the Software hope the current value register to down-count from the new interval value, the reload bit and the enable bit should be set to 1 at the same time.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR1_CURNT_HI_REG</name>
          <description>HS Timer1 Current Value High Register</description>
          <addressOffset>0x40</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR1_CUR_VALUE_HI</name>
              <description>High Speed Timer1 Current Value [55:32]. </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR1_CURNT_LO_REG</name>
          <description>HS Timer1 Current Value Low Register</description>
          <addressOffset>0x3C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR1_CUR_VALUE_LO</name>
              <description>High Speed Timer1 Current Value [31:0]. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR1_INTV_HI_REG</name>
          <description>HS Timer1 Interval Value High Register</description>
          <addressOffset>0x38</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR1_INTV_VALUE_HI</name>
              <description>High Speed Timer1 Interval Value [55:32]. </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR1_INTV_LO_REG</name>
          <description>HS Timer1 Interval Value Low Register</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>HS_TMR0_INTV_VALUE_LO</name>
              <description>High Speed Timer Interval Value [31:0]. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR_IRQ_EN_REG</name>
          <description>HS Timer IRQ Enable Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <field>
              <name>HS_TMR1_INT_EN</name>
              <description>High Speed Timer1 Interrupt Enable. 
0: No effect; 
1: High Speed Timer1 Interval Value reached interrupt enable. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>High</name>
                  <description>High Speed Timer1 Interval Value reached interrupt enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR0_INT_EN</name>
              <description>High Speed Timer0 Interrupt Enable. 
0: No effect; 
1: High Speed Timer0 Interval Value reached interrupt enable. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>High</name>
                  <description>High Speed Timer0 Interval Value reached interrupt enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>HS_TMR_IRQ_STAS_REG</name>
          <description>HS Timer Status Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <field>
              <name>HS_TMR1_IRQ_PEND</name>
              <description>High Speed Timer1 IRQ Pending. Set 1 to the bit will clear it. 
0: No effect; 
1: Pending, High speed timer interval value is reached. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, High speed timer interval value is reached.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HS_TMR0_IRQ_PEND</name>
              <description>High Speed Timer0 IRQ Pending. Set 1 to the bit will clear it. 
0: No effect; 
1: Pending, High speed timer interval value is reached. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_effect</name>
                  <description>No effect;</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Pending</name>
                  <description>Pending, High speed timer interval value is reached.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>LRADC</name>
      <description>LRADC</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C22800</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>LRADC_CTRL_REG</name>
          <description>LRADC_CTRL_REG</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x1000168</resetValue>
          <resetMask>0xFFCF3FFD</resetMask>
          <fields>
            <field>
              <name>FIRST_CONVERT_DLY</name>
              <description>FIRST_CONVERT_DLY. ADC First Convert Delay setting, ADC conversion is delayed by n samples </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CONTINUE_TIME_SELECT</name>
              <description>CONTINUE_TIME_SELECT. Continue Mode time select, one of 8*(N+1) sample as a valuable sample data </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>KEY_MODE_SELECT</name>
              <description>KEY_MODE_SELECT. Key Mode Select: 
00: Normal Mode 
01: Single Mode 
10: Continue Mode </description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal Mode</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single Mode</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Continue</name>
                  <description>Continue Mode</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LEVELA_B_CNT</name>
              <description>LEVELA_B_CNT. Level A to Level B time threshold select, judge ADC convert value in level A to level B in n+1 samples </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LRADC_HOLD_KEY_EN_LRADC_HOLD</name>
              <description>LRADC_HOLD_KEY_EN LRADC Hold Key Enable 
0: Disable 
1: Enable </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LRADC_HOLD_EN</name>
              <description>LRADC_HOLD_EN. LRADC Sample hold Enable 
0: Disable 
1: Enable </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LEVELB_VOL</name>
              <description>LEVELB_VOL. Level B Corresponding Data Value setting (the real voltage value) 
00: 0x3C (~1.9v) 
01: 0x39 (~1.8v) 
10: 0x36 (~1.7v) 
11: 0x33 (~1.6v) </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_0x3C</name>
                  <description>0x3C (~1.9v)</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0x39</name>
                  <description>0x39 (~1.8v)</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0x36</name>
                  <description>0x36 (~1.7v)</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_0x33</name>
                  <description>0x33 (~1.6v)</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LRADC_SAMPLE_RATE</name>
              <description>LRADC_SAMPLE_RATE. LRADC Sample Rate 
00: 250 Hz 
01: 125 Hz 
10: 62.5 Hz 
11: 32.25 Hz </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_250</name>
                  <description>250 Hz</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_125</name>
                  <description>125 Hz</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_62_point_5</name>
                  <description>62.5 Hz</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_32_point_25</name>
                  <description>32.25 Hz</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LRADC_EN</name>
              <description>LRADC_EN. LRADC enable 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>LRADC_DATA0_REG</name>
          <description>LRADC_DATA0_REG</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <field>
              <name>LRADC_DATA0</name>
              <description>LRADC Data0</description>
              <bitRange>[5:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>LRADC_INTC_REG</name>
          <description>LRADC_INTC_REG</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <field>
              <name>ADC0_KEYUP_IRQ_EN</name>
              <description>ADC0 Key Up IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_ALRDY_HOLD_IRQ_EN</name>
              <description>ADC0 Already Hold IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_HOLD_IRQ_EN</name>
              <description>ADC0 Hold Key IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_KEYDOWN_EN</name>
              <description>ADC0 Key Down Enable 
0: Disable 
1: Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_DATA_IRQ_EN</name>
              <description>ADC0 Data IRQ Enable 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>LRADC_INTS_REG</name>
          <description>LRADC_INTS_REG</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <field>
              <name>ADC0_KEYUP_PENDING</name>
              <description>ADC0 Key up Pending Bit When general key pull up, it the corresponding interrupt is enabled. 
0: No IRQ 
1: IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_IRQ</name>
                  <description>No IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IRQ</name>
                  <description>IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_ALRDY_HOLD_PENDING</name>
              <description>ADC0 Already Hold Pending Bit When hold key pull down and pull the general key down, if the corresponding interrupt is enabled. 
0: No IRQ 
1: IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_IRQ</name>
                  <description>No IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IRQ</name>
                  <description>IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_HOLDKEY_PENDING</name>
              <description>ADC0 Hold Key Pending Bit When Hold key pull down, the status bit is set and the interrupt line is set if the corresponding interrupt is enabled. 
0: NO IRQ 
1: IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NO_IRQ</name>
                  <description>NO IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IRQ</name>
                  <description>IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_KEYDOWN_PENDING</name>
              <description>ADC0 Key Down IRQ Pending Bit When General key pull down, the status bit is set and the interrupt line is set if the corresponding interrupt is enabled. 
0: No IRQ 
1: IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_IRQ</name>
                  <description>No IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IRQ</name>
                  <description>IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC0_DATA_PENDING</name>
              <description>ADC0 Data IRQ Pending Bit 
0: No IRQ 
1: IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_IRQ</name>
                  <description>No IRQ</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IRQ</name>
                  <description>IRQ Pending Notes: Writing 1 to the bit will clear it and its corresponding interrupt if the interrupt is enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>PIO</name>
      <description>PIO</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C20800</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>PB_CFG0_REG</name>
          <description>PB_CFG0_REG</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x77777777</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>PB7_SELECT</name>
              <description>000: Input     
001: Output 
010: TWI0_SDA       011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT7           111: IO Disable </description>
              <bitRange>[30:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TWI0_SDA</name>
                  <description>TWI0_SDA</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT7</name>
                  <description>PB_EINT7</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB6_SELECT</name>
              <description>000: Input     
001: Output 
010: TWI0_SCK       011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT6           111: IO Disable </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TWI0_SCK</name>
                  <description>TWI0_SCK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT6</name>
                  <description>PB_EINT6</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB5_SELECT</name>
              <description>000: Input     
001: Output 
010: PWM1           011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT5           111: IO Disable </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>PWM1</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT5</name>
                  <description>PB_EINT5</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB4_SELECT</name>
              <description>000: Input     
001: Output 
010: PWM0          011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT4           111: IO Disable </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>PWM0</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT4</name>
                  <description>PB_EINT4</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB3_SELECT</name>
              <description>000: Input     
001: Output 
010: UART2_CTS       011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT3           111: IO Disable </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART2_CTS</name>
                  <description>UART2_CTS</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT3</name>
                  <description>PB_EINT3</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB2_SELECT</name>
              <description>000: Input     
001: Output 
010: UART2_RTS       011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT2           111: IO Disable </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART2_RTS</name>
                  <description>UART2_RTS</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT2</name>
                  <description>PB_EINT2</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB1_SELECT</name>
              <description>000: Input     
001: Output 
010: UART2_RX       011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT1           111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART2_RX</name>
                  <description>UART2_RX</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT1</name>
                  <description>PB_EINT1</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB0_SELECT</name>
              <description>000: Input     
001: Output 
010: UART2_TX          011: Reserved 
100: Reserved              101: Reserved 
110: PB_EINT0           111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART2_TX</name>
                  <description>UART2_TX</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT0</name>
                  <description>PB_EINT0</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_CFG1_REG</name>
          <description>PB_CFG1_REG</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x777777</resetValue>
          <resetMask>0x777777</resetMask>
          <fields>
            <field>
              <name>PB9_SELECT</name>
              <description>000: Input     
001: Output 
010: TWI1_SDA       011: UART0_RX 
100: Reserved              101: Reserved 
110: PB_EINT9           111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TWI1_SDA</name>
                  <description>TWI1_SDA</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART0_RX</name>
                  <description>UART0_RX</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT9</name>
                  <description>PB_EINT9</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PB8_SELECT</name>
              <description>000: Input     
001: Output 
010: TWI1_SCK          011: UART0_TX 
100: Reserved              101: Reserved 
110: PB_EINT8           111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TWI1_SCK</name>
                  <description>TWI1_SCK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART0_TX</name>
                  <description>UART0_TX</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PB_EINT8</name>
                  <description>PB_EINT8</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_CFG2_REG</name>
          <description>PB_CFG2_REG</description>
          <addressOffset>0x2C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PB_CFG3_REG</name>
          <description>PB_CFG3_REG</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PB_DATA_REG</name>
          <description>PB_DATA_REG</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>PB_DAT</name>
              <description>If the port is configured as input, the corresponding bit is the pin state. If the port is configured as output, the pin state is the same as the corresponding bit. The read bit value is the value setup by software. If the port is configured as functional pin, the undefined value will be read. </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_DRV0_REG</name>
          <description>PB_DRV0_REG</description>
          <addressOffset>0x38</addressOffset>
          <resetValue>0x5555555</resetValue>
          <resetMask>0xFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PB_DRV_13</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_12</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_11</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_10</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_9</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_8</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_7</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_6</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_5</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_4</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_3</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_2</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_1</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_DRV_0</name>
              <description>PB[n] Multi-Driving Select (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_DRV1_REG</name>
          <description>PB_DRV1_REG</description>
          <addressOffset>0x3C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PB_EINT_CFG0_REG</name>
          <description>PB_EINT_CFG0_REG</description>
          <addressOffset>0x220</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>EINT_CFG_7</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_6</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_5</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_4</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_3</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_2</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_1</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_0</name>
              <description>External INTn Mode (n = 0~7) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_EINT_CFG1_REG</name>
          <description>PB_EINT_CFG1_REG</description>
          <addressOffset>0x224</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>EINT_CFG_1</name>
              <description>External INTn Mode (n = 8~9) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_0</name>
              <description>External INTn Mode (n = 8~9) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_EINT_CFG2_REG</name>
          <description>PB_EINT_CFG2_REG</description>
          <addressOffset>0x228</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PB_EINT_CFG3_REG</name>
          <description>PB_EINT_CFG3_REG</description>
          <addressOffset>0x22C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PB_EINT_CTL_REG</name>
          <description>PB_EINT_CTL_REG</description>
          <addressOffset>0x230</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FF</resetMask>
          <fields>
            <field>
              <name>EINT_CTL_9</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_8</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_7</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_6</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_5</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_4</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_3</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_2</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_1</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_0</name>
              <description>External INTn Enable (n = 0~9) 0: Disable 1: Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_EINT_DEB_REG</name>
          <description>PB_EINT_DEB_REG</description>
          <addressOffset>0x238</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x71</resetMask>
          <fields>
            <field>
              <name>DEB_CLK_PRE_SCALE</name>
              <description>Debounce Clock Pre-scale n The selected clock source is prescaled by 2^n.  </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PIO_INT_CLK_SELECT</name>
              <description>PIO Interrupt Clock Select 
0: LOSC 32Khz 
1: HOSC 24Mhz </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOSC</name>
                  <description>LOSC 32Khz</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HOSC</name>
                  <description>HOSC 24Mhz</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_EINT_STATUS_REG</name>
          <description>PB_EINT_STATUS_REG</description>
          <addressOffset>0x234</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FF</resetMask>
          <fields>
            <field>
              <name>EINT_STATUS_9</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_8</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_7</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_6</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_5</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_4</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_3</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_2</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_1</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_0</name>
              <description>External INTn Pending Bit (n = 0~9) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_PULL0_REG</name>
          <description>PB_PULL0_REG</description>
          <addressOffset>0x40</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PB_PULL_13</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_12</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_11</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_10</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_9</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_8</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_7</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_6</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_5</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_4</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_3</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_2</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_1</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PB_PULL_0</name>
              <description>PB[n] Pull-up/down Select (n = 0~13)00: Pull-up/down disable01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PB_PULL1_REG</name>
          <description>PB_PULL1_REG</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PC_CFG0_REG</name>
          <description>PC_CFG0_REG</description>
          <addressOffset>0x48</addressOffset>
          <resetValue>0x77777777</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>PC3_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC2_D0           011: SPI0_MOSI 
100: Reserved    
101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC2_D0</name>
                  <description>SDC2_D0</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0_MOSI</name>
                  <description>SPI0_MOSI</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PC2_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC2_RST    
011: SPI0_CS 
100: Reserved    
101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC2_RST</name>
                  <description>SDC2_RST</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0_CS</name>
                  <description>SPI0_CS</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PC1_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC2_CMD       011: SPI0_CLK 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC2_CMD</name>
                  <description>SDC2_CMD</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0_CLK</name>
                  <description>SPI0_CLK</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PC0_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC2_CLK          011: SPI0_MISO 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC2_CLK</name>
                  <description>SDC2_CLK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0_MISO</name>
                  <description>SPI0_MISO</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PC_CFG1_REG</name>
          <description>PC_CFG1_REG</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x777</resetValue>
          <resetMask>0x777</resetMask>
          <fields/>
        </register>
        <register>
          <name>PC_CFG2_REG</name>
          <description>PC_CFG2_REG</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PC_CFG3_REG</name>
          <description>PC_CFG3_REG</description>
          <addressOffset>0x54</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PC_DATA_REG</name>
          <description>PC_DATA_REG</description>
          <addressOffset>0x58</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <field>
              <name>PC_DAT</name>
              <description>If the port is configured as input, the corresponding bit is the pin state. If the port is configured as output, the pin state is the same as the corresponding bit. The read bit value is the value setup by software. If the port is configured as functional pin, the undefined value will be read. </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PC_DRV0_REG</name>
          <description>PC_DRV0_REG</description>
          <addressOffset>0x5C</addressOffset>
          <resetValue>0x155555</resetValue>
          <resetMask>0x3FFFFF</resetMask>
          <fields>
            <field>
              <name>PC_DRV_10</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_9</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_8</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_7</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_6</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_5</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_4</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_3</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_2</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_1</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_DRV_0</name>
              <description>PC[n] Multi-Driving SELECT (n = 0~10) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PC_DRV1_REG</name>
          <description>PC_DRV1_REG</description>
          <addressOffset>0x60</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PC_PULL0_REG</name>
          <description>PC_PULL0_REG</description>
          <addressOffset>0x64</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FFFFF</resetMask>
          <fields>
            <field>
              <name>PC_PULL_10</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_9</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_8</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_7</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_6</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_5</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_4</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_3</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_2</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_1</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PC_PULL_0</name>
              <description>PC[n] Pull-up/down Select (n = 0~10) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PC_PULL1_REG</name>
          <description>PC_PULL1_REG</description>
          <addressOffset>0x68</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PE_CFG0_REG</name>
          <description>PE_CFG0_REG</description>
          <addressOffset>0x90</addressOffset>
          <resetValue>0x77777777</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>PE7_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D3        011: LCD_D5 
100: Reserved         101: Reserved 
110: Reserved       
111: IO Disable </description>
              <bitRange>[30:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D3</name>
                  <description>CSI_D3</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D5</name>
                  <description>LCD_D5</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE6_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D2        011: LCD_D4 
100: Reserved     
101: Reserved 
110: Reserved      
111: IO Disable </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D2</name>
                  <description>CSI_D2</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D4</name>
                  <description>LCD_D4</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE5_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D1        011: LCD_D3 
100: Reserved        101: Reserved 
110: Reserved       
111: IO Disable </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D1</name>
                  <description>CSI_D1</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D3</name>
                  <description>LCD_D3</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE4_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D0        011: LCD_D2 
100: Reserved     
101: Reserved 
110: Reserved       
111: IO Disable </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D0</name>
                  <description>CSI_D0</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D2</name>
                  <description>LCD_D2</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE3_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_VSYNC    
011: LCD_VSYNC 
100: Reserved        101: Reserved 
110: Reserved      
111: IO Disable </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_VSYNC</name>
                  <description>CSI_VSYNC</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_VSYNC</name>
                  <description>LCD_VSYNC</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE2_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_HSYNC    
011: LCD_HSYNC 
100: Reserved        101: Reserved 
110: Reserved      
111: IO Disable </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_HSYNC</name>
                  <description>CSI_HSYNC</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_HSYNC</name>
                  <description>LCD_HSYNC</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE1_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_MCLK       011: LCD_DE 
100: Reserved        101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_MCLK</name>
                  <description>CSI_MCLK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_DE</name>
                  <description>LCD_DE</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE0_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_PCLK           011: LCD_CLK 
100: Reserved     
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_PCLK</name>
                  <description>CSI_PCLK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_CLK</name>
                  <description>LCD_CLK</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_CFG1_REG</name>
          <description>PE_CFG1_REG</description>
          <addressOffset>0x94</addressOffset>
          <resetValue>0x77777777</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>PE15_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D11            011: LCD_D15 
100: Reserved         101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[30:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D11</name>
                  <description>CSI_D11</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D15</name>
                  <description>LCD_D15</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE14_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D10           011: LCD_D14 
100: Reserved     
101: Reserved 
110: Reserved        111: IO Disable </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D10</name>
                  <description>CSI_D10</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D14</name>
                  <description>LCD_D14</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE13_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D9           011: LCD_D13 
100: Reserved        101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D9</name>
                  <description>CSI_D9</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D13</name>
                  <description>LCD_D13</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE12_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D8           011: LCD_D12 
100: Reserved     
101: Reserved 
110: Reserved       
111: IO Disable </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D8</name>
                  <description>CSI_D8</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D12</name>
                  <description>LCD_D12</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE11_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D7        011: LCD_D11 
100: Reserved        101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D7</name>
                  <description>CSI_D7</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D11</name>
                  <description>LCD_D11</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE10_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D6        011: LCD_D10 
100: Reserved        101: Reserved 
110: Reserved      
111: IO Disable </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D6</name>
                  <description>CSI_D6</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D10</name>
                  <description>LCD_D10</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE9_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D5           011: LCD_D7 
100: Reserved        101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D5</name>
                  <description>CSI_D5</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D7</name>
                  <description>LCD_D7</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE8_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D4           011: LCD_D6 
100: Reserved     
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D4</name>
                  <description>CSI_D4</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D6</name>
                  <description>LCD_D6</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_CFG2_REG</name>
          <description>PE_CFG2_REG</description>
          <addressOffset>0x98</addressOffset>
          <resetValue>0x77777777</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>PE23_SELECT</name>
              <description>000: Input     
001: Output 
010: Reserved               011: LCD_D22 
100: UART1_RTS    
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[30:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D22</name>
                  <description>LCD_D22</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1_RTS</name>
                  <description>UART1_RTS</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE22_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_SDA               011: TWI1_SDA 
100: UART1_RX    
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_SDA</name>
                  <description>CSI_SDA</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TWI1_SDA</name>
                  <description>TWI1_SDA</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1_RX</name>
                  <description>UART1_RX</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE21_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_SCK                 011: TWI1_SCK 
100: UART1_TX    
101: Reserved  
110: Reserved     
111: IO Disable </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_SCK</name>
                  <description>CSI_SCK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TWI1_SCK</name>
                  <description>TWI1_SCK</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1_TX</name>
                  <description>UART1_TX</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE20_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_FIELD                 011: CSI_MIPI_MCLK 
100: Reserved     
101: Reserved  
110: Reserved     
111: IO Disable </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_FIELD</name>
                  <description>CSI_FIELD</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_MIPI_MCLK</name>
                  <description>CSI_MIPI_MCLK</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE19_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D15                  011: LCD_D21 
100: Reserved     
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D15</name>
                  <description>CSI_D15</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D21</name>
                  <description>LCD_D21</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE18_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D14               011: LCD_D20 
100: Reserved     
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D14</name>
                  <description>CSI_D14</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D20</name>
                  <description>LCD_D20</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE17_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D13                  011: LCD_D19 
100: Reserved     
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D13</name>
                  <description>CSI_D13</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D19</name>
                  <description>LCD_D19</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE16_SELECT</name>
              <description>000: Input     
001: Output 
010: CSI_D12                 011: LCD_D18 
100: Reserved     
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSI_D12</name>
                  <description>CSI_D12</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D18</name>
                  <description>LCD_D18</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_CFG3_REG</name>
          <description>PE_CFG3_REG</description>
          <addressOffset>0x9C</addressOffset>
          <resetValue>0x7</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>PE24_SELECT</name>
              <description>000: Input     
001: Output 
010: Reserved              011: LCD_D23 
100: UART1_CTS    
101: Reserved 
110: Reserved     
111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LCD_D23</name>
                  <description>LCD_D23</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1_CTS</name>
                  <description>UART1_CTS</description>
                  <value>0b100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_DATA_REG</name>
          <description>PE_DATA_REG</description>
          <addressOffset>0xA0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFFFFF</resetMask>
          <fields>
            <field>
              <name>PE_DAT</name>
              <description>If the port is configured as input, the corresponding bit is the pin state. If the port is configured as output, the pin state is the same as the corresponding bit. The read bit value is the value setup by software. If the port is configured as functional pin, the undefined value will be read. </description>
              <bitRange>[24:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_DRV0_REG</name>
          <description>PE_DRV0_REG</description>
          <addressOffset>0xA4</addressOffset>
          <resetValue>0x55555555</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PE_DRV_15</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[31:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_14</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_13</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_12</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_11</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_10</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_9</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_8</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_7</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_6</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_5</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_4</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_3</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_2</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_1</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_0</name>
              <description>PE[n] Multi-Driving SELECT (n = 0~15) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_DRV1_REG</name>
          <description>PE_DRV1_REG</description>
          <addressOffset>0xA8</addressOffset>
          <resetValue>0x15555</resetValue>
          <resetMask>0x3FFFF</resetMask>
          <fields>
            <field>
              <name>PE_DRV_8</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_7</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_6</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_5</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_4</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_3</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_2</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_1</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_DRV_0</name>
              <description>PE[n] Multi-Driving Select (n = 16~24) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_PULL0_REG</name>
          <description>PE_PULL0_REG</description>
          <addressOffset>0xAC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PE_PULL_15</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[31:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_14</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_13</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_12</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_11</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_10</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_9</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_8</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_7</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_6</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_5</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_4</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_3</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_2</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_1</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_0</name>
              <description>PE[n] Pull-up/down Select (n = 0~15) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PE_PULL1_REG</name>
          <description>PE_PULL1_REG</description>
          <addressOffset>0xB0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FFFF</resetMask>
          <fields>
            <field>
              <name>PE_PULL_8</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_7</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_6</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_5</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_4</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_3</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_2</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_1</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PE_PULL_0</name>
              <description>PE[n] Pull-up/down Select (n = 16~24) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PF_CFG0_REG</name>
          <description>PF_CFG0_REG</description>
          <addressOffset>0xB4</addressOffset>
          <resetValue>0x7373733</resetValue>
          <resetMask>0x7777777</resetMask>
          <fields>
            <field>
              <name>PF6_SELECT</name>
              <description>000: Input     
001: Output 
010: Reserved      
011: Reserved 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PF5_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC0_D2        011: JTAG_CK 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC0_D2</name>
                  <description>SDC0_D2</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>JTAG_CK</name>
                  <description>JTAG_CK</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PF4_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC0_D3        011: UART0_RX 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC0_D3</name>
                  <description>SDC0_D3</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART0_RX</name>
                  <description>UART0_RX</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PF3_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC0_CMD    
011: JTAG_DO 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC0_CMD</name>
                  <description>SDC0_CMD</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>JTAG_DO</name>
                  <description>JTAG_DO</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PF2_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC0_CLK    
011: UART0_TX 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC0_CLK</name>
                  <description>SDC0_CLK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART0_TX</name>
                  <description>UART0_TX</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PF1_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC0_D0           011: JTAG_DI 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC0_D0</name>
                  <description>SDC0_D0</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>JTAG_DI</name>
                  <description>JTAG_DI</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PF0_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC0_D1           011: JTAG_MS 
100: Reserved        101: Reserved 
110: Reserved    
111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC0_D1</name>
                  <description>SDC0_D1</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>JTAG_MS</name>
                  <description>JTAG_MS</description>
                  <value>0b011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PF_CFG1_REG</name>
          <description>PF_CFG1_REG</description>
          <addressOffset>0xB8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PF_CFG2_REG</name>
          <description>PF_CFG2_REG</description>
          <addressOffset>0xBC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PF_CFG3_REG</name>
          <description>PF_CFG3_REG</description>
          <addressOffset>0xC0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PF_DATA_REG</name>
          <description>PF_DATA_REG</description>
          <addressOffset>0xC4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>PF_DAT</name>
              <description>If the port is configured as input, the corresponding bit is the pin state. If the port is configured as output, the pin state is the same as the corresponding bit. The read bit value is the value setup by software. If the port is configured as functional pin, the undefined value will be read. </description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PF_DRV0_REG</name>
          <description>PF_DRV0_REG</description>
          <addressOffset>0xC8</addressOffset>
          <resetValue>0x1555</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>PF_DRV_6</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~6)00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_5</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~6)00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_4</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~6)00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_3</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~6)00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_2</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~6)00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_1</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~6)00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_0</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~6)00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PF_DRV1_REG</name>
          <description>PF_DRV1_REG</description>
          <addressOffset>0xCC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PF_PULL0_REG</name>
          <description>PF_PULL0_REG</description>
          <addressOffset>0xD0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>PF_PULL_6</name>
              <description>PF[n] Pull-up/down Select (n = 0~6) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_5</name>
              <description>PF[n] Pull-up/down Select (n = 0~6) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_4</name>
              <description>PF[n] Pull-up/down Select (n = 0~6) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_3</name>
              <description>PF[n] Pull-up/down Select (n = 0~6) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_2</name>
              <description>PF[n] Pull-up/down Select (n = 0~6) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_1</name>
              <description>PF[n] Pull-up/down Select (n = 0~6) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_0</name>
              <description>PF[n] Pull-up/down Select (n = 0~6) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PF_PULL1_REG</name>
          <description>PF_PULL1_REG</description>
          <addressOffset>0xD4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_CFG0_REG</name>
          <description>PG_CFG0_REG</description>
          <addressOffset>0xD8</addressOffset>
          <resetValue>0x77777777</resetValue>
          <resetMask>0x77777777</resetMask>
          <fields>
            <field>
              <name>PG5_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC1_D3        011: Reserved 
100: Reserved        101: Reserved 
110: PG_EINT5       111: IO Disable </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC1_D3</name>
                  <description>SDC1_D3</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PG_EINT5</name>
                  <description>PG_EINT5</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PG4_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC1_D2        011: Reserved 
100: Reserved        101: Reserved 
110: PG_EINT4       111: IO Disable </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC1_D2</name>
                  <description>SDC1_D2</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PG_EINT4</name>
                  <description>PG_EINT4</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PG3_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC1_D1        011: Reserved 
100: Reserved       
101: Reserved 
110: PG_EINT3       111: IO Disable </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC1_D1</name>
                  <description>SDC1_D1</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PG_EINT3</name>
                  <description>PG_EINT3</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PG2_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC1_D0        011: Reserved 
100: Reserved       
101: Reserved 
110: PG_EINT2       111: IO Disable </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC1_D0</name>
                  <description>SDC1_D0</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PG_EINT2</name>
                  <description>PG_EINT2</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PG1_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC1_CMD        011: Reserved  
100: Reserved        101: Reserved 
110: PG_EINT1       111: IO Disable </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC1_CMD</name>
                  <description>SDC1_CMD</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PG_EINT1</name>
                  <description>PG_EINT1</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PG0_SELECT</name>
              <description>000: Input     
001: Output 
010: SDC1_CLK       011: Reserved 
100: Reserved        101: Reserved 
110: PG_EINT0       111: IO Disable </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input</name>
                  <description>Input</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Output</name>
                  <description>Output</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDC1_CLK</name>
                  <description>SDC1_CLK</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PG_EINT0</name>
                  <description>PG_EINT0</description>
                  <value>0b110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>IO</name>
                  <description>IO Disable</description>
                  <value>0b111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_CFG1_REG</name>
          <description>PG_CFG1_REG</description>
          <addressOffset>0xDC</addressOffset>
          <resetValue>0x777777</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_CFG2_REG</name>
          <description>PG_CFG2_REG</description>
          <addressOffset>0xE0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_CFG3_REG</name>
          <description>PG_CFG3_REG</description>
          <addressOffset>0xE4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_DATA_REG</name>
          <description>PG_DATA_REG</description>
          <addressOffset>0xE8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FFF</resetMask>
          <fields>
            <field>
              <name>PG_DAT</name>
              <description>If the port is configured as input, the corresponding bit is the pin state. If the port is configured as output, the pin state is the same as the corresponding bit. The read bit value is the value setup by software. If the port is configured as functional pin, the undefined value will be read. </description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_DRV0_REG</name>
          <description>PG_DRV0_REG</description>
          <addressOffset>0xEC</addressOffset>
          <resetValue>0x5555555</resetValue>
          <resetMask>0xFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PF_DRV_13</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_12</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_11</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_10</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_9</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_8</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_7</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_6</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_5</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_4</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_3</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_2</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_1</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_DRV_0</name>
              <description>PF[n] Multi-Driving SELECT (n = 0~13) 00: Level 0 01: Level 1 10: Level 2 11: Level 3</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_DRV1_REG</name>
          <description>PG_DRV1_REG</description>
          <addressOffset>0xF0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_EINT_CFG0_REG</name>
          <description>PG_EINT_CFG0_REG</description>
          <addressOffset>0x240</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFF</resetMask>
          <fields>
            <field>
              <name>EINT_CFG_5</name>
              <description>External INTn Mode (n = 0~5) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_4</name>
              <description>External INTn Mode (n = 0~5) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_3</name>
              <description>External INTn Mode (n = 0~5) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_2</name>
              <description>External INTn Mode (n = 0~5) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_1</name>
              <description>External INTn Mode (n = 0~5) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CFG_0</name>
              <description>External INTn Mode (n = 0~5) 0x0: Positive Edge 0x1: Negative Edge 0x2: High Level 0x3: Low Level 0x4: Double Edge (Positive/ Negative) Others: Reserved</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_EINT_CFG1_REG</name>
          <description>PG_EINT_CFG1_REG</description>
          <addressOffset>0x244</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_EINT_CFG2_REG</name>
          <description>PG_EINT_CFG2_REG</description>
          <addressOffset>0x248</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_EINT_CFG3_REG</name>
          <description>PG_EINT_CFG3_REG</description>
          <addressOffset>0x24C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
        <register>
          <name>PG_EINT_CTL_REG</name>
          <description>PG_EINT_CTL_REG</description>
          <addressOffset>0x250</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <field>
              <name>EINT_CTL_5</name>
              <description>External INTn Enable (n = 0~5) 0: Disable 1: Enable</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_4</name>
              <description>External INTn Enable (n = 0~5) 0: Disable 1: Enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_3</name>
              <description>External INTn Enable (n = 0~5) 0: Disable 1: Enable</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_2</name>
              <description>External INTn Enable (n = 0~5) 0: Disable 1: Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_1</name>
              <description>External INTn Enable (n = 0~5) 0: Disable 1: Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_CTL_0</name>
              <description>External INTn Enable (n = 0~5) 0: Disable 1: Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_EINT_DEB_REG</name>
          <description>PG_EINT_DEB_REG</description>
          <addressOffset>0x258</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x71</resetMask>
          <fields>
            <field>
              <name>DEB_CLK_PRE_SCALE</name>
              <description>Debounce Clock Pre-scale n The selected clock source is prescaled by 2^n.  </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PIO_INT_CLK_SELECT</name>
              <description>PIO Interrupt Clock Select 
0: LOSC 32Khz 
1: HOSC 24Mhz </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOSC</name>
                  <description>LOSC 32Khz</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HOSC</name>
                  <description>HOSC 24Mhz</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_EINT_STATUS_REG</name>
          <description>PG_EINT_STATUS_REG</description>
          <addressOffset>0x254</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <field>
              <name>EINT_STATUS_5</name>
              <description>External INTn Pending Bit (n = 0~5) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_4</name>
              <description>External INTn Pending Bit (n = 0~5) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_3</name>
              <description>External INTn Pending Bit (n = 0~5) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_2</name>
              <description>External INTn Pending Bit (n = 0~5) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_1</name>
              <description>External INTn Pending Bit (n = 0~5) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EINT_STATUS_0</name>
              <description>External INTn Pending Bit (n = 0~5) 0: No IRQ pending 1: IRQ pending Write `1` to clear it.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_PULL0_REG</name>
          <description>PG_PULL0_REG</description>
          <addressOffset>0xF4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PF_PULL_13</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_12</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_11</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_10</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_9</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_8</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_7</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_6</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_5</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_4</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_3</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_2</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_1</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PF_PULL_0</name>
              <description>PF[n] Pull-up/down Select (n = 0~13) 00: Pull-up/down disable 01: Pull-up 10: Pull-down 11: Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PG_PULL1_REG</name>
          <description>PG_PULL1_REG</description>
          <addressOffset>0xF8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields/>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>PWM</name>
      <description>PWM</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C21400</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>PWM_CH0_PERIOD</name>
          <description>PWM Channel 0 Period Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>PWM_CH0_ENTIRE_CYS</name>
              <description>Number of the entire cycles in the PWM clock. 0 = 1 cycle 1 = 2 cycles ... N = N+1 cycles If the register need to be modified dynamically, the PCLK should be faster than the PWM CLK (PWM CLK = 24MHz/pre-scale). </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PWM_CH0_ENTIRE_ACT_CYS</name>
              <description>Number of the active cycles in the PWM clock. 0 = 0 cycle 1 = 1 cycles ... N = N cycles </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PWM_CH1_PERIOD</name>
          <description>PWM Channel 1 Period Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>PWM_CH1_ENTIRE_CYS</name>
              <description>Number of the entire cycles in the PWM clock. 0 = 1 cycle 1 = 2 cycles ... N = N+1 cycles If the register need to be modified dynamically, the PCLK should be faster than the PWM CLK (PWM CLK = 24MHz/pre-scale). </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PWM_CH1_ENTIRE_ACT_CYS</name>
              <description>Number of the active cycles in the PWM clock. 0 = 0 cycle 1 = 1 cycles ... N = N cycles </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PWM_CTRL_REG</name>
          <description>PWM_CTRL_REG</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x31FF83FF</resetMask>
          <fields>
            <field>
              <name>PWM1_RDY</name>
              <description>PWM1 period register ready. 
0: PWM1 period register is ready to write, 
1: PWM1 period register is busy. </description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ready</name>
                  <description>PWM1 period register is ready to write,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>busy</name>
                  <description>PWM1 period register is busy.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM0_RDY</name>
              <description>PWM0 period register ready. 
0: PWM0 period register is ready to write, 
1: PWM0 period register is busy. </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ready</name>
                  <description>PWM0 period register is ready to write,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>busy</name>
                  <description>PWM0 period register is busy.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM1_BYPASS</name>
              <description>PWM CH1 bypass enable. If the bit is set to 1, PWM1`s output is OSC24MHz. 
0: disable 
1: enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH1_PULSE_OUT_START</name>
              <description>PWM Channel 1 pulse output start. 
0: no effect, 
1: output 1 pulse. The pulse width should be according to the period 1 register[15:0],and the pulse state should be according to the active state. After the pulse is finished, the bit will be cleared automatically. </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_effect</name>
                  <description>no effect,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>output</name>
                  <description>output 1 pulse. The pulse width should be according to the period 1 register[15:0],and the pulse state should be according to the active state. After the pulse is finished, the bit will be cleared automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH1_MODE</name>
              <description>PWM Channel 1 mode. 
0: cycle mode, 
1: pulse mode. </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>cycle</name>
                  <description>cycle mode,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>pulse</name>
                  <description>pulse mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH1_CLK_GATING</name>
              <description>Gating the Special Clock for PWM1(0: mask, 1: pass). </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PWM_CH1_ACT_STATE</name>
              <description>PWM Channel 1 Active State. 
0: Low Level,  
1: High Level. </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Low</name>
                  <description>Low Level,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>High</name>
                  <description>High Level.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH1_EN</name>
              <description>PWM Channel 1 Enable. 
0: Disable,  
1: Enable. </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH1_PRESCAL</name>
              <description>PWM Channel 1 Prescalar. These bits should be setting before the PWM Channel 1 clock gate on. 
0000: /120 
0001: /180 
0010: /240 
0011: /360 
0100: /480 
0101: / 
0110: / 
0111: / 
1000: /12k 
1001: /24k 
1010: /36k 
1011: /48k 
1100: /72k 
1101: / 
1110: / 
1111: /1 </description>
              <bitRange>[18:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_120</name>
                  <description>/120</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_180</name>
                  <description>/180</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_240</name>
                  <description>/240</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_360</name>
                  <description>/360</description>
                  <value>0b0011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_480</name>
                  <description>/480</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_12k</name>
                  <description>/12k</description>
                  <value>0b1000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_24k</name>
                  <description>/24k</description>
                  <value>0b1001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_36k</name>
                  <description>/36k</description>
                  <value>0b1010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_48k</name>
                  <description>/48k</description>
                  <value>0b1011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_72k</name>
                  <description>/72k</description>
                  <value>0b1100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b1111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM0_BYPASS</name>
              <description>PWM CH0 bypass enable. If the bit is set to 1, PWM0`s output is OSC24MHz. 
0: disable, 
1: enable. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH0_PUL_START</name>
              <description>PWM Channel 0 pulse output start. 
0: no effect, 
1: output 1 pulse. The pulse width should be according to the period 0 register[15:0],and the pulse state should be according to the active state. After the pulse is finished,the bit will be cleared automatically. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_effect</name>
                  <description>no effect,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>output</name>
                  <description>output 1 pulse. The pulse width should be according to the period 0 register[15:0],and the pulse state should be according to the active state. After the pulse is finished,the bit will be cleared automatically.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CHANNEL0_MODE</name>
              <description>0: cycle mode,  
1: pulse mode. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>cycle</name>
                  <description>cycle mode,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>pulse</name>
                  <description>pulse mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SCLK_CH0_GATING</name>
              <description>Gating the Special Clock for PWM0(0: mask, 1: pass). </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PWM_CH0_ACT_STA</name>
              <description>PWM Channel 0 Active State. 
0: Low Level,  
1: High Level. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Low</name>
                  <description>Low Level,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>High</name>
                  <description>High Level.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH0_EN</name>
              <description>PWM Channel 0 Enable. 
0: Disable,  
1: Enable. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable,</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM_CH0_PRESCAL</name>
              <description>PWM Channel 0 Prescalar. These bits should be setting before the PWM Channel 0 clock gate on. 
0000: /120 
0001: /180 
0010: /240 
0011: /360 
0100: /480 
0101: / 
0110: / 
0111: / 
1000: /12k 
1001: /24k 
1010: /36k 
1011: /48k 
1100: /72k 
1101: / 
1110: / 
1111: /1 </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_slash_120</name>
                  <description>/120</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_180</name>
                  <description>/180</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_240</name>
                  <description>/240</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_360</name>
                  <description>/360</description>
                  <value>0b0011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_480</name>
                  <description>/480</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_12k</name>
                  <description>/12k</description>
                  <value>0b1000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_24k</name>
                  <description>/24k</description>
                  <value>0b1001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_36k</name>
                  <description>/36k</description>
                  <value>0b1010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_48k</name>
                  <description>/48k</description>
                  <value>0b1011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_72k</name>
                  <description>/72k</description>
                  <value>0b1100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_slash_1</name>
                  <description>/1</description>
                  <value>0b1111</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>SPI0</name>
      <description>SPI0</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C68000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>SPI_BC</name>
          <description>SPI_BC</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFF</resetMask>
          <fields>
            <field>
              <name>MBC</name>
              <description>Master Burst Counter In master mode, this field specifies the total burst number when SMC is 1. 
0: 0 burst 
1: 1 burst ... N: N bursts </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_BCC</name>
          <description>SPI Burst Control register</description>
          <addressOffset>0x38</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DRM</name>
              <description>Master Dual Mode RX Enable 
0: RX use single-bit mode 
1: RX use dual mode Note Can`t be written when XCH=1. </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_use_single_bit</name>
                  <description>RX use single-bit mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_use_dual</name>
                  <description>RX use dual mode Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DBC</name>
              <description>Master Dummy Burst Counter In master mode, this field specifies the burst number that should be sent before receive in dual SPI mode. The data is don`t care by the device. 
0: 0 burst 
1: 1 burst ... N: N bursts Note Can`t be written when XCH=1. </description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STC</name>
              <description>Master Single Mode Transmit Counter In master mode, this field specifies the burst number that should be sent in single mode before automatically sending dummy burst. This is the first transmit counter in all bursts. 
0: 0 burst 
1: 1 burst ... N: N bursts Note Can`t be written when XCH=1. </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_CCTL</name>
          <description>SPI_CCTL</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x2</resetValue>
          <resetMask>0x1FFF</resetMask>
          <fields>
            <field>
              <name>DRS</name>
              <description>Divide Rate Select (Master Mode Only) 
0: Select Clock Divide Rate 1 
1: Select Clock Divide Rate 2 </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Select_Clock_Divide_Rate_1</name>
                  <description>Select Clock Divide Rate 1</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Select_Clock_Divide_Rate_2</name>
                  <description>Select Clock Divide Rate 2</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CDR1</name>
              <description>Clock Divide Rate 1 (Master Mode Only) The SPI_SCLK is determined according to the following equation: SPI_CLK = Source_CLK / 2^n. </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CDR2</name>
              <description>Clock Divide Rate 2 (Master Mode Only) The SPI_SCLK is determined according to the following equation: SPI_CLK =  Source_CLK / (2*(n + 1)). </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_CTL</name>
          <description>SPI_CTL</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x80</resetValue>
          <resetMask>0x80000083</resetMask>
          <fields>
            <field>
              <name>SRST</name>
              <description>Soft reset Write `1` to this bit will clear the SPI controller, and auto clear to `0` when reset operation completes Write `0` has no effect. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TP_EN</name>
              <description>Transmit Pause Enable In master mode, it is used to control transmit state machine to stop smart burst sending when RX FIFO is full. 1 - stop transmit data when RXFIFO full 0 - normal operation, ignore RXFIFO status Note: Can`t be written when XCH=1 </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MODE</name>
              <description>SPI Function Mode Select 
0: Slave Mode 
1: Master Mode Note: Can`t be written when XCH=1 </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Slave</name>
                  <description>Slave Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Master</name>
                  <description>Master Mode Note: Can`t be written when XCH=1</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN</name>
              <description>SPI Module Enable Control 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_FCR</name>
          <description>SPI FIFO Control register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x400001</resetValue>
          <resetMask>0xC1FFFFFF</resetMask>
          <fields>
            <field>
              <name>TX_FIFO_RST</name>
              <description>TX FIFO Reset Write `1` to this bit will reset the control portion of the TX FIFO and auto clear to `0` when completing reset operation, write to `0` has no effect. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TF_TEST_ENB</name>
              <description>TX Test Mode Enable 
0: disable 
1: enable Note: In normal mode, TX FIFO can only be read by SPI controller, write `1` to this bit will switch TX FIFO read and write function to AHB bus. This bit is used to test the TX FIFO, don`t set in normal operation and don`t set RF_TEST and TF_TEST at the same time.  </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable Note: In normal mode, TX FIFO can only be read by SPI controller, write `1` to this bit will switch TX FIFO read and write function to AHB bus. This bit is used to test the TX FIFO, don`t set in normal operation and don`t set RF_TEST and TF_TEST at the same time.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TF_DRQ_EN</name>
              <description>TX FIFO DMA Request Enable 
0: Disable 
1: Enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_TRIG_LEVEL</name>
              <description>TX FIFO Empty Request Trigger Level </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RF_RST</name>
              <description>RXFIFO Reset Write `1` to this bit will reset the control portion of the receiver FIFO, and auto clear to `0` when completing reset operation, write `0` to this bit has no effect.  </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RF_TEST</name>
              <description>RX Test Mode Enable 
0: Disable 
1: Enable Note: In normal mode, RX FIFO can only be written by SPI controller, write `1` to this bit will switch RX FIFO read and write function to AHB bus. This bit is used to test the RX FIFO, don`t set in normal operation and don`t set RF_TEST and TF_TEST at the same time.  </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable Note: In normal mode, RX FIFO can only be written by SPI controller, write `1` to this bit will switch RX FIFO read and write function to AHB bus. This bit is used to test the RX FIFO, don`t set in normal operation and don`t set RF_TEST and TF_TEST at the same time.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DMA_MODE</name>
              <description>SPI RX DMA Mode Control 
0: Normal DMA mode 
1: Dedicate DMA mode </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal DMA mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dedicate</name>
                  <description>Dedicate DMA mode</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RF_DRQ_EN</name>
              <description>RX FIFO DMA Request Enable 
0: Disable 
1: Enable </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_TRIG_LEVEL</name>
              <description>RX FIFO Ready Request Trigger Level </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_FSR</name>
          <description>SPI FIFO Status register</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TB_WR</name>
              <description>TX FIFO Write Buffer Write Enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TB_CNT</name>
              <description>TX FIFO Write Buffer Counter These bits indicate the number of words in TX FIFO Write Buffer </description>
              <bitRange>[30:28]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TF_CNT</name>
              <description>TX FIFO Counter These bits indicate the number of words in TX FIFO 
0: 0 byte in TX FIFO 
1: 1 byte in TX FIFO ... 
64: 64 bytes in TX FIFO </description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_64</name>
                  <description>64 bytes in TX FIFO</description>
                  <value>64</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RB_WR</name>
              <description>RX FIFO Read Buffer Write Enable </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RB_CNT</name>
              <description>RX FIFO Read Buffer Counter These bits indicate the number of words in RX FIFO Read Buffer </description>
              <bitRange>[14:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RF_CNT</name>
              <description>RX FIFO Counter These bits indicate the number of words in RX FIFO 
0: 0 byte in RX FIFO 
1: 1 byte in RX FIFO ... 64:64 bytes in RX FIFO </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_IER</name>
          <description>SPI Interrupt Control register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>SS_INT_EN</name>
              <description>SSI Interrupt Enable Chip Select Signal (SSx) from valid state to invalid state 
0: Disable 
1: Enable </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TC_INT_EN</name>
              <description>Transfer Completed Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TF_UDR_INT_EN</name>
              <description>TXFIFO under run Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TF_OVF_INT_EN</name>
              <description>TX FIFO Overflow Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RF_UDR_INT_EN</name>
              <description>RXFIFO under run Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RF_OVF_INT_EN</name>
              <description>RX FIFO Overflow Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TF_FUL_INT_EN</name>
              <description>TX FIFO Full Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_EMP_INT_EN</name>
              <description>TX FIFO Empty Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_ERQ_INT_EN</name>
              <description>TX FIFO Empty Request Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RF_FUL_INT_EN</name>
              <description>RX FIFO Full Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_EMP_INT_EN</name>
              <description>RX FIFO Empty Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RF_RDY_INT_EN</name>
              <description>RX FIFO Ready Request Interrupt Enable 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_INT_STA</name>
          <description>SPI_INT_STA</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x22</resetValue>
          <resetMask>0x3F77</resetMask>
          <fields>
            <field>
              <name>SSI</name>
              <description>SS Invalid Interrupt When SSI is 1, it indicates that SS has changed from valid state to invalid state. Writing 1 to this bit clears it. </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TC</name>
              <description>Transfer Completed In master mode, it indicates that all bursts specified by BC has been exchanged. In other condition, When set, this bit indicates that all the data in TXFIFO has been loaded in the Shift register, and the Shift register has shifted out all the bits. Writing 1 to this bit clears it.  
0: Busy 
1: Transfer Completed </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transfer</name>
                  <description>Transfer Completed</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TF_UDF</name>
              <description>TXFIFO Underrun This bit is set when if the TXFIFO is underrun. Writing 1 to this bit clears it. 
0: TXFIFO is not underrun 
1: TXFIFO is underrun </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_underrun</name>
                  <description>TXFIFO is not underrun</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>underrun</name>
                  <description>TXFIFO is underrun</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TF_OVF</name>
              <description>TXFIFO Overflow This bit is set when if the TXFIFO is overflow. Writing 1 to this bit clears it. 
0: TXFIFO is not overflow 
1: TXFIFO is overflowed </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_overflow</name>
                  <description>TXFIFO is not overflow</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>overflowed</name>
                  <description>TXFIFO is overflowed</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_UDF</name>
              <description>RXFIFO Underrun When set, this bit indicates that RXFIFO has underrun. Writing 1 to this bit clears it. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX_OVF</name>
              <description>RXFIFO Overflow When set, this bit indicates that RXFIFO has overflowed. Writing 1 to this bit clears it. 
0: RXFIFO is available. 
1: RXFIFO has overflowed. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>available</name>
                  <description>RXFIFO is available.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RXFIFO_has</name>
                  <description>RXFIFO has overflowed.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FULL</name>
              <description>TXFIFO Full This bit is set when if the TXFIFO is full . Writing 1 to this bit clears it. 
0: TXFIFO is not Full 
1: TXFIFO is Full </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_Full</name>
                  <description>TXFIFO is not Full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full</name>
                  <description>TXFIFO is Full</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_EMP</name>
              <description>TXFIFO Empty This bit is set if the TXFIFO is empty. Writing 1 to this bit clears it. 
0: TXFIFO contains one or more words. 
1: TXFIFO is empty </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TXFIFO_contains</name>
                  <description>TXFIFO contains one or more words.</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>empty</name>
                  <description>TXFIFO is empty</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_READY</name>
              <description>TXFIFO Ready 
0: TX_WL &gt; TX_TRIG_LEVEL 
1: TX_WL &lt;= TX_TRIG_LEVEL  This bit is set any time if TX_WL &lt;= TX_TRIG_LEVEL. Writing `1` to this bit clears it. Where TX_WL is the water level of RXFIFO </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TX_WL__gt_</name>
                  <description>TX_WL &gt; TX_TRIG_LEVEL</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_WL__lt__equals_</name>
                  <description>TX_WL &lt;= TX_TRIG_LEVEL  This bit is set any time if TX_WL &lt;= TX_TRIG_LEVEL. Writing `1` to this bit clears it. Where TX_WL is the water level of RXFIFO</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FULL</name>
              <description>RXFIFO Full This bit is set when the RXFIFO is full . Writing 1 to this bit clears it. 
0: Not Full 
1: Full </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Not_Full</name>
                  <description>Not Full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full</name>
                  <description>Full</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_EMP</name>
              <description>RXFIFO Empty This bit is set when the RXFIFO is empty . Writing 1 to this bit clears it. 
0: Not empty 
1: empty </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Not_empty</name>
                  <description>Not empty</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>empty</name>
                  <description>empty</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_RDY</name>
              <description>RXFIFO Ready 
0: RX_WL &lt; RX_TRIG_LEVEL 
1: RX_WL &gt;= RX_TRIG_LEVEL This bit is set any time if RX_WL &gt;= RX_TRIG_LEVEL. Writing `1` to this bit clears it. Where RX_WL is the water level of RXFIFO. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_WL__lt_</name>
                  <description>RX_WL &lt; RX_TRIG_LEVEL</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_WL__gt__equals_</name>
                  <description>RX_WL &gt;= RX_TRIG_LEVEL This bit is set any time if RX_WL &gt;= RX_TRIG_LEVEL. Writing `1` to this bit clears it. Where RX_WL is the water level of RXFIFO.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_RXD</name>
          <description>SPI RX Data register</description>
          <addressOffset>0x300</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RDATA</name>
              <description>Receive Data This register can be accessed in byte, half-word or word unit by AHB. In byte accessing method, if there are data in RXFIFO, the top word is returned and the RXFIFO depth is decreased by 1. In half-word accessing method, two SPI bursts are returned and the RXFIFO depth is decrease by 2. In word accessing method, the four SPI bursts are returned and the RXFIFO depth is decreased by 4. Note: This address is read-only if RF_TEST is `0`, and if RF_TEST is set to `1`, this address is readable and writable to test the RX FIFO through the AHB bus. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_TC</name>
          <description>SPI_TC</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFF</resetMask>
          <fields>
            <field>
              <name>MWTC</name>
              <description>Master Write Transmit Counter In master mode, this field specifies the burst number that should be sent to TXFIFO before automatically sending dummy burst when SMC is 1. For saving bus bandwidth, the dummy burst (all zero bits or all one bits) is sent by SPI Controller automatically. 
0: 0 burst 
1: 1 burst ... N: N bursts </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_TXD</name>
          <description>SPI TX Data register</description>
          <addressOffset>0x200</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TDATA</name>
              <description>Transmit Data This register can be accessed in byte, half-word or word unit by AHB. In byte accessing method, if there are rooms in RXFIFO, one burst data is written to RXFIFO and the depth is increased by 1. In half-word accessing method, two SPI burst data are written and the TXFIFO depth is increase by 2. In word accessing method, four SPI burst data are written and the TXFIFO depth is increased by 4. Note: This address is writing-only if TF_TEST is `0`, and if TF_TEST is set to `1`, this address is readable and writable to test the TX FIFO through the AHB bus. </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI_WAIT</name>
          <description>SPI_WAIT</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFF</resetMask>
          <fields>
            <field>
              <name>SWC</name>
              <description>Dual mode direction switch wait clock counter (for master mode only). 
0: No wait states inserted n: n SPI_SCLK wait states inserted Note: These bits control the number of wait states to be inserted before start dual data transfer in dual SPI mode. The SPI module counts SPI_SCLK by SWC for delaying next word data transfer. Note Can`t be written when XCH=1. </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WCC</name>
              <description>Wait Clock Counter (In Master mode) These bits control the number of wait states to be inserted in data transfers. The SPI module counts SPI_SCLK by WCC for delaying next word data transfer. 
0: No wait states inserted N: N SPI_SCLK wait states inserted </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI__INTCTL</name>
          <description>SPI__INTCTL</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x87</resetValue>
          <resetMask>0x80003FFF</resetMask>
          <fields>
            <field>
              <name>XCH</name>
              <description>Exchange Burst In master mode it is used to start SPI burst 
0: Idle 
1: Initiates exchange. Write `1` to this bit will start the SPI burst, and will auto clear after finishing the bursts transfer specified by BC. Write `1` to SRST will also clear this bit. Write `0` to this bit has no effect. Note Can`t be written when XCH=1. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Initiates</name>
                  <description>Initiates exchange. Write `1` to this bit will start the SPI burst, and will auto clear after finishing the bursts transfer specified by BC. Write `1` to SRST will also clear this bit. Write `0` to this bit has no effect. Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SDM</name>
              <description>Master Sample Data Mode 0 - Delay Sample Mode 1 - Normal Sample Mode In Normal Sample Mode, SPI master samples the data at the correct edge for each SPI mode; In Delay Sample Mode, SPI master samples data at the edge that is half cycle delayed by the correct edge defined in respective SPI mode. </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FBS</name>
              <description>First Transmit Bit Select 
0: MSB first 
1: LSB first Note Can`t be written when XCH=1. </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MSB</name>
                  <description>MSB first</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LSB</name>
                  <description>LSB first Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SDC</name>
              <description>Master Sample Data Control Set this bit to `1` to make the internal read sample point with a delay of half cycle of SPI_CLK. It is used in high speed read operation to reduce the error caused by the time delay of SPI_CLK propagating between master and slave. 0 - normal operation, do not delay internal read sample point 1 - delay internal read sample point Note Can`t be written when XCH=1. </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RPSM</name>
              <description>Rapids mode select Select Rapids mode for high speed write. 
0: normal write mode 
1: rapids write mode Note Can`t be written when XCH=1. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>normal</name>
                  <description>normal write mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>rapids</name>
                  <description>rapids write mode Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DDB</name>
              <description>Dummy Burst Type 
0: The bit value of dummy SPI burst is zero 
1: The bit value of dummy SPI burst is one Note Can`t be written when XCH=1. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>zero</name>
                  <description>The bit value of dummy SPI burst is zero</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>one</name>
                  <description>The bit value of dummy SPI burst is one Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DHB</name>
              <description>Discard Hash Burst In master mode it controls whether discarding unused SPI bursts 
0: Receiving all SPI bursts in BC period 
1: Discard unused SPI bursts, only fetching the SPI bursts during dummy burst period. The bursts number is specified by TC. Note Can`t be written when XCH=1. </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receiving</name>
                  <description>Receiving all SPI bursts in BC period</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Discard</name>
                  <description>Discard unused SPI bursts, only fetching the SPI bursts during dummy burst period. The bursts number is specified by TC. Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SS_LEVEL</name>
              <description>When control SS signal manually (SPI_CTRL_REG.SS_CTRL==1), set this bit to `1` or `0` to control the level of SS signal. 
0: set SS to low 
1: set SS to high Note Can`t be written when XCH=1. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>set_SS_to_low</name>
                  <description>set SS to low</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>set_SS_to_high</name>
                  <description>set SS to high Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SS_OWNER</name>
              <description>SS Output Owner Select Usually, controller sends SS signal automatically with data together. When this bit is set to 1, software must manually write SPI_CTL_REG.SS_LEVEL to 1 or 0 to control the level of SS signal. 
0: SPI controller 
1: Software Note Can`t be written when XCH=1. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI controller</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Software</name>
                  <description>Software Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SS_SEL</name>
              <description>SPI Chip Select Select one of four external SPI Master/Slave Devices 
00: SPI_SS0 will be asserted 
01: SPI_SS1 will be asserted 
10: SPI_SS2 will be asserted 
11: SPI_SS3 will be asserted Note Can`t be written when XCH=1. </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI_SS0</name>
                  <description>SPI_SS0 will be asserted</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI_SS1</name>
                  <description>SPI_SS1 will be asserted</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI_SS2</name>
                  <description>SPI_SS2 will be asserted</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI_SS3</name>
                  <description>SPI_SS3 will be asserted Note Can`t be written when XCH=1.</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SSCTL</name>
              <description>In master mode, this bit selects the output wave form for the SPI_SSx signal. Only valid when SS_OWNER = 0. 
0: SPI_SSx remains asserted between SPI bursts 
1: Negate SPI_SSx between SPI bursts Note Can`t be written when XCH=1. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI_SSx</name>
                  <description>SPI_SSx remains asserted between SPI bursts</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Negate</name>
                  <description>Negate SPI_SSx between SPI bursts Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SPOL</name>
              <description>SPI Chip Select Signal Polarity Control 
0: Active high polarity (0 = Idle) 
1: Active low polarity (1 = Idle) Note Can`t be written when XCH=1. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Active_high</name>
                  <description>Active high polarity (0 = Idle)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_low</name>
                  <description>Active low polarity (1 = Idle) Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CPOL</name>
              <description>SPI Clock Polarity Control 
0: Active high polarity (0 = Idle) 
1: Active low polarity (1 = Idle) Note Can`t be written when XCH=1. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Active_high</name>
                  <description>Active high polarity (0 = Idle)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_low</name>
                  <description>Active low polarity (1 = Idle) Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CPHA</name>
              <description>SPI Clock/Data Phase Control 
0: Phase 0 (Leading edge for sample data) 
1: Phase 1 (Leading edge for setup data) Note Can`t be written when XCH=1. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Phase_0</name>
                  <description>Phase 0 (Leading edge for sample data)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Phase_1</name>
                  <description>Phase 1 (Leading edge for setup data) Note Can`t be written when XCH=1.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>TCON</name>
      <description>TCON</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C0C000</baseAddress>
      <access>read-write</access>
      <registers>
        <cluster>
          <dim>3</dim>
          <dimIncrement>16</dimIncrement>
          <name>_N[%s]</name>
          <addressOffset>0x11c</addressOffset>
          <register>
            <name>TCON_CEU_COEF_ADD_REG</name>
            <description>TCON CEU coefficient register1  (N=0,1,2)</description>
            <addressOffset>0x0</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0x7FFFF</resetMask>
            <fields>
              <field>
                <name>CEU_COEF_ADD_VALUE</name>
                <description>signed 19bit value, range of (-16384, 16384) N=0: Rc N=1: Gc N=2: Bc </description>
                <bitRange>[18:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>TCON_CEU_COEF_RANG_REG</name>
            <description>TCON CEU coefficient register2  (N=0,1,2)</description>
            <addressOffset>0x24</addressOffset>
            <resetValue>0x0</resetValue>
            <resetMask>0xFF00FF</resetMask>
            <fields>
              <field>
                <name>CEU_COEF</name>
                <description>_Range_Min unsigned 8bit value, range of [0,255] </description>
                <bitRange>[23:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>CEU</name>
                <description>Coef _Range_Max unsigned 8bit value, range of [0,255] </description>
                <bitRange>[7:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>TCON0_BASIC0_REG</name>
          <description>TCON0 basic timing register0</description>
          <addressOffset>0x48</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF0FFF</resetMask>
          <fields>
            <field>
              <name>TCON0_X</name>
              <description>Panel width is X+1 </description>
              <bitRange>[27:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_Y</name>
              <description>Panel height is Y+1 </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_BASIC1_REG</name>
          <description>TCON0 basic timing register1</description>
          <addressOffset>0x4C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFF0FFF</resetMask>
          <fields>
            <field>
              <name>HT</name>
              <description>Thcycle = (HT+1) * Tdclk Computation 1) parallel:HT = X + BLANK Limitation: 1) parallel :HT &gt;=  (HBP +1) + (X+1) +2  2) serial 1: HT &gt;=  (HBP +1) + (X+1) *3+2  3) serial 2: HT &gt;=  (HBP +1) + (X+1) *3/2+2 </description>
              <bitRange>[28:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>HBP</name>
              <description>horizontal back porch (in dclk) Thbp = (HBP +1) * Tdclk </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_BASIC2_REG</name>
          <description>TCON0 basic timing register2</description>
          <addressOffset>0x50</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFF0FFF</resetMask>
          <fields>
            <field>
              <name>VT</name>
              <description>TVT = (VT)/2 * Thsync Note: VT/2 &gt;=  (VBP+1 ) + (Y+1) +2 </description>
              <bitRange>[28:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VBP</name>
              <description>Tvbp = (VBP +1) * Thsync </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_BASIC3_REG</name>
          <description>TCON0 basic timing register3</description>
          <addressOffset>0x54</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3FF03FF</resetMask>
          <fields>
            <field>
              <name>HSPW</name>
              <description>Thspw = (HSPW+1) * Tdclk Note: HT&gt;  (HSPW+1) </description>
              <bitRange>[25:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>VSPW</name>
              <description>Tvspw = (VSPW+1) * Thsync Note: VT/2 &gt;  (VSPW+1) </description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_IF_REG</name>
          <description>TCON0 cpu panel interface register</description>
          <addressOffset>0x60</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF6C3003F</resetMask>
          <fields>
            <field>
              <name>CPU_MODE</name>
              <description>0000: 18bit/256K mode 
0010: 16bit mode0 
0100: 16bit mode1 
0110: 16bit mode2 
1000: 16bit mode3 
1010: 9bit mode 
1100: 8bit 256K mode 
1110: 8bit 65K mode 
xxx1: 24bit for DSI </description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_18bit_slash_256K_mode</name>
                  <description>18bit/256K mode</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_16bit_mode0</name>
                  <description>16bit mode0</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_16bit_mode1</name>
                  <description>16bit mode1</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_16bit_mode2</name>
                  <description>16bit mode2</description>
                  <value>0b0110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_16bit_mode3</name>
                  <description>16bit mode3</description>
                  <value>0b1000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_9bit_mode</name>
                  <description>9bit mode</description>
                  <value>0b1010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8bit_256K_mode</name>
                  <description>8bit 256K mode</description>
                  <value>0b1100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8bit_65K_mode</name>
                  <description>8bit 65K mode</description>
                  <value>0b1110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_24bit_for</name>
                  <description>24bit for DSI</description>
                  <value>0b0001</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DA</name>
              <description>pin A1 value in 8080 mode auto/flash states </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CA</name>
              <description>pin A1 value in 8080 mode WR/RD execute </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WR_FLAG</name>
              <description>0:write operation is finishing 1:write operation is pending </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RD_FLAG</name>
              <description>0:read operation is finishing 1:read operation is pending </description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AUTO</name>
              <description>auto Transfer Mode: If it`s 1, all the valid data during this frame are write to panel. Note: This bit is sampled by Vsync </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FLUSH</name>
              <description>direct transfer mode: If it`s enabled, FIFO1 is regardless of the HV timing, pixels data keep being transferred unless the input FIFO was empty. Data output rate control by DCLK. </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TRIGGER_FIFO_BIST_EN</name>
              <description>0: disable 
1: enable Entry addr is 0xFF8 </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable Entry addr is 0xFF8</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TRIGGER_FIFO_EN</name>
              <description>0:enable 1:disable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TRIGGER_START</name>
              <description>write `1` to start a frame flush, write`0` has no effect. this flag indicated frame flush is running sofeware must make sure write `1` only when this flag is `0`. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TRIGGER_EN</name>
              <description>0: trigger mode disable 
1: trigger mode enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>trigger mode disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>trigger mode enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_RD0_REG</name>
          <description>TCON0 cpu panel read data register0</description>
          <addressOffset>0x68</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>DATA_RD0</name>
              <description>Data_Rd0 data read on 8080 bus, launch a new read operation on 8080 bus </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_RD1_REG</name>
          <description>TCON0 cpu panel read data register1</description>
          <addressOffset>0x6C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <field>
              <name>DATA_RD1</name>
              <description>Data_Rd1 data read on 8080 bus, without a new read operation on 8080 bus </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_TRI0_REG</name>
          <description>TCON0 cpu panel trigger register0</description>
          <addressOffset>0x160</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF0FFF</resetMask>
          <fields>
            <field>
              <name>BLOCK_SPACE</name>
              <description>should be set &gt;20*pixel_cycle </description>
              <bitRange>[27:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BLOCK_SIZE</name>
              <description></description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_TRI1_REG</name>
          <description>TCON0 cpu panel trigger register1</description>
          <addressOffset>0x164</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>BLOCK_CURRENT_NUM</name>
              <description></description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>BLOCK_NUM</name>
              <description></description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_TRI2_REG</name>
          <description>TCON0 cpu panel trigger register2</description>
          <addressOffset>0x168</addressOffset>
          <resetValue>0x200000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>START_DELAY</name>
              <description>Tdly = (Start_Delay +1) * be_clk*8 </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TRANS_START_MODE</name>
              <description>0: ecc_fifo+tri_fifo 
1: tri_fifo </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ecc_fifo_plus_tri_fifo</name>
                  <description>ecc_fifo+tri_fifo</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>tri_fifo</name>
                  <description>tri_fifo</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC_MODE</name>
              <description>0x: auto 
10: 0 
11: 1 </description>
              <bitRange>[14:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_0</name>
                  <description>0</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1</name>
                  <description>1</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TRANS_START_SET</name>
              <description></description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_TRI3_REG</name>
          <description>TCON0 cpu panel trigger register3</description>
          <addressOffset>0x16C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x30FFFFFF</resetMask>
          <fields>
            <field>
              <name>TRI_INT_MODE</name>
              <description>00: disable 
01: counter mode  
10: te rising mode 
11: te falling mode when set as 01, Tri_Counter_Int occur in cycle of (Count_N+1) (Count_M+1) 4 dclk. when set as 10 or 11, io0 is map as TE input. </description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>COUNTER_N</name>
              <description>Counter_N </description>
              <bitRange>[23:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>COUNTER_M</name>
              <description>Counter_M </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CPU_WR_REG</name>
          <description>TCON0 cpu panel write data register</description>
          <addressOffset>0x64</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA_WR</name>
              <description>data write on 8080 bus, launch a write operation on 8080 bus </description>
              <bitRange>[23:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_CTL_REG</name>
          <description>TCON0 control register</description>
          <addressOffset>0x40</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x93A001F7</resetMask>
          <fields>
            <field>
              <name>TCON0_EN</name>
              <description>TCON0_En  
0: disable 
1: enable Note: It executes at the beginning of the first blank line of TCON0 timing. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable Note: It executes at the beginning of the first blank line of TCON0 timing.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_WORK_MODE</name>
              <description>TCON0_Work_Mode 
0: normal 
1: dynamic freq </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>normal</name>
                  <description>normal</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>dynamic</name>
                  <description>dynamic freq</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0</name>
              <description>TCON0_IF 
00: HV(Sync+DE) 
01: 8080 I/F 1x:reserved </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HV_openingparen_Sync_plus_DE_closingparen_</name>
                  <description>HV(Sync+DE)</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8080</name>
                  <description>8080 I/F 1x:reserved</description>
                  <value>0b01</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_RB_SWAP</name>
              <description>TCON0_RB_Swap 
0: default 
1: swap RED and BLUE data at FIFO1 </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>default</name>
                  <description>default</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>swap</name>
                  <description>swap RED and BLUE data at FIFO1</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_FIFO1_RST_WRITE_AND_THEN</name>
              <description>TCON0_FIFO1_Rst Write 1 and then 0 at this bit will reset FIFO 1 Note: 1 holding time must more than 1 DCLK </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_START_DELAY_STA_DELAY_NOTE</name>
              <description>TCON0_Start_Delay STA delay NOTE: valid only when TCON0_EN == 1 </description>
              <bitRange>[8:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_SRC_SEL</name>
              <description>TCON0_SRC_SEL:  
000: DE0 
001: reserved 
010: reserved 
011: reserved 
100: Test Data all 0 
101: Test Data all 1 
11x: reserved  </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_DCLK_REG</name>
          <description>TCON0 data clock register</description>
          <addressOffset>0x44</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF000007F</resetMask>
          <fields>
            <field>
              <name>TCON0_DCLK_EN</name>
              <description>LCLK_EN[3:0] :TCON0 clock enable 4'h0, 'h4,4'h6,4'ha7:dclk_en=0;dclk1_en=0;dclk2_en=0;dclkm2_en=0;             4'h1: dclk_en = 1; dclk1_en = 0; dclk2_en = 0; dclkm2_en = 0;             4'h2: dclk_en = 1; dclk1_en = 0; dclk2_en = 0; dclkm2_en = 1;             4'h3: dclk_en = 1; dclk1_en = 1; dclk2_en = 0; dclkm2_en = 0;             4'h5: dclk_en = 1; dclk1_en = 0; dclk2_en = 1; dclkm2_en = 0;             4'h8,4'h9,4'ha,4'hb,4'hc,4'hd,4'he,4'hf: dclk_en   = 1; dclk1_en  = 1; dclk2_en  = 1; dclkm2_en = 1; </description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_DCLK_DIV</name>
              <description>Tdclk = Tsclk * DCLKDIV Note:  1.if dclk1&amp;dclk2 used DCLKDIV &gt;=6 2.if dclk only DCLKDIV &gt;=1 </description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_FRM_CTL_REG</name>
          <description>TCON FRM control register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80000073</resetMask>
          <fields>
            <field>
              <name>TCON0_FRM_EN</name>
              <description>0:disable 1:enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_FRM_MODE_R</name>
              <description>0: 6bit frm output 
1: 5bit frm output </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_6bit</name>
                  <description>6bit frm output</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_5bit</name>
                  <description>5bit frm output</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_FRM_MODE_G</name>
              <description>0: 6bit frm output 
1: 5bit frm output </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_6bit</name>
                  <description>6bit frm output</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_5bit</name>
                  <description>5bit frm output</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_FRM_MODE_B</name>
              <description>0: 6bit frm output 
1: 5bit frm output </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_6bit</name>
                  <description>6bit frm output</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_5bit</name>
                  <description>5bit frm output</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_FRM_TEST</name>
              <description>00: FRM 
01: half 5/6bit, half FRM 
10: half 8bit, half FRM 
11: half 8bit, half 5/6bit </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <dim>6</dim>
          <dimIncrement>4</dimIncrement>
          <name>TCON0_FRM_SEED_REG[%s]</name>
          <description>TCON FRM seed register  (N=0,1,2,3,4,5)</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFFFFF</resetMask>
          <fields>
            <field>
              <name>SEED_VALUE</name>
              <description>N=0: Pixel_Seed_R N=1: Pixel_Seed_G N=2: Pixel_Seed_B N=3: Line_Seed_R N=4: Line_Seed_G N=5: Line_Seed_B Note: avoid set it to 0 </description>
              <bitRange>[24:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_HV_IF_REG</name>
          <description>TCON0 hv panel interface register</description>
          <addressOffset>0x58</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF00000</resetMask>
          <fields>
            <field>
              <name>HV_MODE</name>
              <description>0000: 24bit/1cycle parallel mode 
1000: 8bit/3cycle RGB serial mode(RGB888) 
1010: 8bit/4cycle Dummy RGB(DRGB) 
1011: 8bit/4cycle RGB Dummy(RGBD) 
1100: 8bit/2cycle YUV serial mode(CCIR656) </description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_24bit_slash_1cycle_parallel_mode</name>
                  <description>24bit/1cycle parallel mode</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8bit_slash_3cycle_RGB</name>
                  <description>8bit/3cycle RGB serial mode(RGB888)</description>
                  <value>0b1000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8bit_slash_4cycle_Dummy</name>
                  <description>8bit/4cycle Dummy RGB(DRGB)</description>
                  <value>0b1010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8bit_slash_4cycle_RGB</name>
                  <description>8bit/4cycle RGB Dummy(RGBD)</description>
                  <value>0b1011</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8bit_slash_2cycle_YUV</name>
                  <description>8bit/2cycle YUV serial mode(CCIR656)</description>
                  <value>0b1100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RGB888_SM0</name>
              <description>serial RGB888 mode Output sequence at odd lines of the panel (line 1, 3, 5, 7...) 
00: R G B 
01: B R G 
10: G B R 
11: R G B </description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RGB888_SM1</name>
              <description>serial RGB888 mode Output sequence at even lines of the panel (line 2, 4, 6, 8...) 
00: R G B 
01: B R G 
10: G B R 
11: R G B </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>YUV_SM</name>
              <description>serial YUV mode Output sequence 2-pixel-pair of every scan line 
00: YUYV 
01: YVYU 
10: UYVY 
11: VYUY </description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>YUYV</name>
                  <description>YUYV</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>YVYU</name>
                  <description>YVYU</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UYVY</name>
                  <description>UYVY</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VYUY</name>
                  <description>VYUY</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>YUV</name>
              <description>EAV/SAV F line delay 0:F toggle right after active video line 1:delay 2 line(CCIR PAL) 2:delay 3 line(CCIR NTSC) 3:reserved </description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_IO_POL_REG</name>
          <description>TCON0 IO polarity register</description>
          <addressOffset>0x88</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO_OUTPUT_SEL</name>
              <description>0: normal output 
1: register output when set as `1`, d[23:0], io0, io1,io3 sync to dclk </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>normal</name>
                  <description>normal output</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>register</name>
                  <description>register output when set as `1`, d[23:0], io0, io1,io3 sync to dclk</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DCLK_SEL</name>
              <description>000: used DCLK0(normal phase offset) 
001: used DCLK1(1/3 phase offset) 
010: used DCLK2(2/3 phase offset) 
101: DCLK0/2   phase 0 
100: DCLK0/2   phase 90 reserved </description>
              <bitRange>[30:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>used_DCLK0_openingparen_normal_phase</name>
                  <description>used DCLK0(normal phase offset)</description>
                  <value>0b000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>used_DCLK1_openingparen_1_slash_3_phase</name>
                  <description>used DCLK1(1/3 phase offset)</description>
                  <value>0b001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>used_DCLK2_openingparen_2_slash_3_phase</name>
                  <description>used DCLK2(2/3 phase offset)</description>
                  <value>0b010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DCLK0_slash_2_phase_0</name>
                  <description>DCLK0/2   phase 0</description>
                  <value>0b101</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DCLK0_slash_2_phase_90</name>
                  <description>DCLK0/2   phase 90 reserved</description>
                  <value>0b100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3_INV</name>
              <description>0: not invert 
1: invert </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_invert</name>
                  <description>not invert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>invert</name>
                  <description>invert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2_INV</name>
              <description>0: not invert 
1: invert </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_invert</name>
                  <description>not invert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>invert</name>
                  <description>invert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1_INV</name>
              <description>0: not invert 
1: invert </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_invert</name>
                  <description>not invert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>invert</name>
                  <description>invert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0_INV</name>
              <description>0: not invert 
1: invert </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_invert</name>
                  <description>not invert</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>invert</name>
                  <description>invert</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA_INV</name>
              <description>TCON0 output port D[23:0] polarity control, with independent bit control: 0s: normal polarity 1s: invert the specify output </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON0_IO_TRI_REG</name>
          <description>TCON0 IO control register</description>
          <addressOffset>0x8C</addressOffset>
          <resetValue>0xFFFFFFF</resetValue>
          <resetMask>0xFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO3_OUTPUT_TRI_EN</name>
              <description>1: disable 
0: enable </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2_OUTPUT_TRI_EN</name>
              <description>1: disable 
0: enable </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1_OUTPUT_TRI_EN</name>
              <description>1: disable 
0: enable </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0_OUTPUT_TRI_EN</name>
              <description>1: disable 
0: enable </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA_OUTPUT_TRI_EN</name>
              <description>TCON0 output port D[23:0] output enable, with independent bit control: 1s: disable 0s: enable </description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_CEU_COEF_MUL_REG_0</name>
          <description>+ N*0x04  TCON CEU coefficient register0  (N=0,1,2,4,5,6,8,9,10)</description>
          <addressOffset>0x110</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFF</resetMask>
          <fields>
            <field>
              <name>CEU_COEF_MUL_VALUE</name>
              <description>signed 13bit value, range of (-16,16) N=0: Rr N=1: Rg N=2: Rb N=4: Gr N=5: Gg N=6: Gb N=8: Br N=9: Bg N=10: Bb </description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_1</name>
          <addressOffset>0x114</addressOffset>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_2</name>
          <addressOffset>0x118</addressOffset>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_4</name>
          <addressOffset>0x120</addressOffset>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_5</name>
          <addressOffset>0x124</addressOffset>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_6</name>
          <addressOffset>0x128</addressOffset>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_8</name>
          <addressOffset>0x130</addressOffset>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_9</name>
          <addressOffset>0x134</addressOffset>
        </register>
        <register derivedFrom="TCON_CEU_COEF_MUL_REG_0">
          <name>TCON_CEU_COEF_MUL_REG_10</name>
          <addressOffset>0x138</addressOffset>
        </register>
        <register>
          <name>TCON_CEU_CTL_REG</name>
          <description>TCON CEU control register</description>
          <addressOffset>0x100</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80000000</resetMask>
          <fields>
            <field>
              <name>CEU_EN</name>
              <description>CEU_en 
0: bypass 
1: enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>bypass</name>
                  <description>bypass</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_CMAP_CTL_REG</name>
          <description>TCON color map control register</description>
          <addressOffset>0x180</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x80000001</resetMask>
          <fields>
            <field>
              <name>COLOR_MAP_EN</name>
              <description>0: bypass 
1: enable This module only work when X is divided by 4 </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>bypass</name>
                  <description>bypass</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable This module only work when X is divided by 4</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OUT_FORMAT</name>
              <description>0: 4 pixel output mode: Out0 -&gt; Out1 -&gt; Out2 -&gt; Out3 
1: 2 pixel output mode: Out0 -&gt; Out1 </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_4</name>
                  <description>4 pixel output mode: Out0 -&gt; Out1 -&gt; Out2 -&gt; Out3</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2</name>
                  <description>2 pixel output mode: Out0 -&gt; Out1</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_CMAP_EVEN0_REG</name>
          <description>TCON color map even line register0</description>
          <addressOffset>0x198</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>OUT_EVEN1</name>
              <description>Out_Even1 </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OUT_EVEN0</name>
              <description>Out_Even0 </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_CMAP_EVEN1_REG</name>
          <description>TCON color map even line register1</description>
          <addressOffset>0x19C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>OUT_EVEN3</name>
              <description>Out_Even3 </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OUT_EVEN2</name>
              <description>Out_Even2 </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_CMAP_ODD0_REG</name>
          <description>TCON color map odd line register0</description>
          <addressOffset>0x190</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>OUT_ODD1</name>
              <description>Out_Odd1 </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OUT_ODD0</name>
              <description>Out_Odd0 bit15-12: Reservd bit11-08: Out_Odd0[23:16] bit07-04: Out_Odd0[15:8] bit03-00: Out_Odd0[7:0] 
0x0: in_b0 
0x1: in_g0 
0x2: in_r0 
0x3: reservd 
0x4: in_b1 
0x5: in_g1 
0x6: in_r1 
0x7: reservd 
0x8: in_b2 
0x9: in_g2 0xa: in_r2 0xb: reservd 0xc: in_b3 0xd: in_g3 0xe: in_r3 0xf: reservd </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_CMAP_ODD1_REG</name>
          <description>TCON color map odd line register1</description>
          <addressOffset>0x194</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>OUT_ODD3</name>
              <description>Out_Odd3 </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OUT_ODD2</name>
              <description>Out_Odd2 </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_DEBUG_REG</name>
          <description>TCON debug register</description>
          <addressOffset>0xFC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x2000</resetMask>
          <fields>
            <field>
              <name>TCON0_FIFO_UNDER_FLOW</name>
              <description></description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_FIELD_POLARITY</name>
              <description>0: second field 
1: first field </description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>second</name>
                  <description>second field</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>first</name>
                  <description>first field</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_CURRENT_LINE</name>
              <description></description>
              <bitRange>[27:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ECC_FIFO_BYPASS</name>
              <description>0: used 
1: bypass </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>used</name>
                  <description>used</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>bypass</name>
                  <description>bypass</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_ECC_FIFO_REG</name>
          <description>TCON ECC FIFO register</description>
          <addressOffset>0xF8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x100</resetMask>
          <fields>
            <field>
              <name>ECC_FIFO_BIST_EN</name>
              <description>0: disable 
1: enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ECC_FIFO_ERR_FLAG</name>
              <description></description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ECC_FIFO_ERR_BITS</name>
              <description></description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ECC_FIFO_BLANK_EN</name>
              <description>0: disable ecc function in blanking 
1: enable ecc function in blanking ECC function is tent to trigged in blanking area at hv mode, set `0` when in hv mode </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable ecc function in blanking</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable ecc function in blanking ECC function is tent to trigged in blanking area at hv mode, set `0` when in hv mode</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ECC_FIFO</name>
              <description>Note bit3 0 enable 1 disable </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_GCTL_REG</name>
          <description>TCON global control register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xC0000000</resetMask>
          <fields>
            <field>
              <name>TCON_EN</name>
              <description>0: disable 
1: enable When it`s disabled, the module will be reset to idle state. </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable When it`s disabled, the module will be reset to idle state.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON_GAMMA_EN</name>
              <description>0: disable 
1: enable </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_GINT0_REG</name>
          <description>TCON global interrupt register0</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xAC00AE00</resetMask>
          <fields>
            <field>
              <name>TCON0_VB_INT_EN</name>
              <description>0: disable 
1: enable </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_LINE_INT_EN</name>
              <description>0: disable 
1: enable </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_TRI_FINISH_INT_EN</name>
              <description>0: disable 
1: enable </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_TRI_COUNTER_INT_EN</name>
              <description>0: disable 
1: enable </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TCON0_VB_INT_FLAG</name>
              <description>Asserted during vertical no-display period every frame. Write 0 to clear it. </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_LINE_INT_FLAG</name>
              <description>trigger when SY0 match the current TCON0 scan line Write 0 to clear it. </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_TRI_FINISH_INT_FLAG</name>
              <description>trigger when cpu trigger mode finish Write 0 to clear it. </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_TRI_COUNTER_INT_FLAG</name>
              <description>trigger when tri counter reache this value Write 0 to clear it. </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TCON0_TRI_UNDERFLOW_FLAG</name>
              <description>only used in dsi video mode, tri when sync by dsi but not finish Write 0 to clear it. </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_GINT1_REG</name>
          <description>TCON global interrupt register1</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFFF0000</resetMask>
          <fields>
            <field>
              <name>TCON0_LINE_INT_NUM</name>
              <description>Scan line for TCON0 line trigger(including inactive lines) Setting it for the specified line for trigger0. Note: SY0 is writable only when LINE_TRG0 disable. </description>
              <bitRange>[27:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TCON_SAFE_PERIOD_REG</name>
          <description>TCON safe period register</description>
          <addressOffset>0x1F0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1FFF0003</resetMask>
          <fields>
            <field>
              <name>SAFE_PERIOD_FIFO_NUM</name>
              <description></description>
              <bitRange>[28:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SAFE_PERIOD_MODE</name>
              <description>0: unsafe 
1: safe 
2: safe at ecc_fifo_curr_num &gt; safe_period_fifo_num 
3: safe at 2 and safe at sync active </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>TWI0</name>
      <description>TWI0</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C2AC00</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>TWI_ADDR</name>
          <description>TWI Slave address</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>SLA</name>
              <description>Slave address 7-bit addressing SLA6, SLA5, SLA4, SLA3, SLA2, SLA1, SLA0 10-bit addressing 1, 1, 1, 1, 0, SLAX[9:8] </description>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>GCE</name>
              <description>General call address enable 
0: Disable 
1: Enable  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_CCR</name>
          <description>TWI Clock control register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>CLK_M</name>
              <description></description>
              <bitRange>[6:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLK_N</name>
              <description>The TWI bus is sampled by the TWI at the frequency defined by F0: Fsamp = F 0 = Fin / 2^CLK_N The TWI OSCL output frequency, in master mode, is F1 / 10: F1 = F0 / (CLK_M + 1) Foscl = F1 / 10 = Fin / (2^CLK_N * (CLK_M + 1)*10) For Example  Fin = 48Mhz (APB clock input) For 400kHz full speed 2Wire, CLK_N = 2, CLK_M=2 F0 = 48M/2^2=12Mhz, F1= F0/(10*(2+1)) = 0.4Mhz For 100Khz standard speed 2Wire, CLK_N=2, CLK_M=11 F0=48M/2^2=12Mhz, F1=F0/(10*(11+1)) = 0.1Mhz </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_CNTR</name>
          <description>TWI Control register</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>INT_EN</name>
              <description>Interrupt Enable 1`b0: The interrupt line always low 1`b1: The interrupt line will go high when INT_FLAG is set. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BUS_EN</name>
              <description>TWI Bus Enable 1`b0: The TWI bus inputs ISDA/ISCL are ignored and the TWI Controller will not respond to any address on the bus 1`b1: The TWI will respond to calls to its slave address - and to the general call address if the GCE bit in the ADDR register is set. Notes: In master operation mode, this bit should be set to `1` </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>M_STA</name>
              <description>Master Mode Start When M_STA is set to `1`, TWI Controller enters master mode and will transmit a START condition on the bus when the bus is free. If the M_STA bit is set to `1` when the TWI Controller is already in master mode and one or more bytes have been transmitted, then a repeated START condition will be sent. If the M_STA bit is set to `1` when the TWI is being accessed in slave mode, the TWI will complete the data transfer in slave mode then enter master mode when the bus has been released. The M_STA bit is cleared automatically after a START condition has been sent: writing a `0` to this bit has no effect. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>M_STP</name>
              <description>Master Mode Stop If M_STP is set to `1` in master mode, a STOP condition is transmitted on the TWI bus. If the M_STP bit is set to `1` in slave mode, the TWI will behave as if a STOP condition has been received, but no STOP condition will be transmitted on the TWI bus. If both M_STA and M_STP bits are set, the TWI will first transmit the STOP condition (if in master mode) then transmit the START condition. The M_STP bit is cleared automatically: writing a `0` to this bit has no effect. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INT_FLAG</name>
              <description>Interrupt Flag INT_FLAG is automatically set to `1` when any of 28 (out of the possible 29) states is entered (see `STAT Register` below). The only state that does not set INT_FLAG is state F8h. If the INT_EN bit is set, the interrupt line goes high when IFLG is set to `1`. If the TWI is operating in slave mode, data transfer is suspended when INT_FLAG is set and the low period of the TWI bus clock line (SCL) is stretched until `1` is written to INT_FLAG. The TWI clock line is then released and the interrupt line goes low. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>A_ACK</name>
              <description>Assert Acknowledge When A_ACK is set to `1`, an Acknowledge (low level on SDA) will be sent during the acknowledge clock pulse on the TWI bus if: 1. Either the whole of a matching 7-bit slave address or the first or the second byte of a matching 10-bit slave address has been received. 2. The general call address has been received and the GCE bit in the ADDR register is set to `1`. 3. A data byte has been received in master or slave mode. When A_ACK is `0`, a Not Acknowledge (high level on SDA) will be sent when a data byte is received in master or slave mode. If A_ACK is cleared to `0` in slave transmitter mode, the byte in the DATA register is assumed to be the `last byte`. After this byte has been transmitted, the TWI will enter state C8h then return to the idle state (status code F8h) when INT_FLAG is cleared. The TWI will not respond as a slave unless A_ACK is set. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_DATA</name>
          <description>TWI Data byte</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>TWI_DATA</name>
              <description>Data byte for transmitting or received </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_DVFSCR</name>
          <description>TWI_DVFSCR</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>MS_PRIORITY</name>
              <description>CPU and DVFS BUSY set priority select  
0: CPU has higher priority  
1: DVFS has higher priority </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CPU</name>
                  <description>CPU has higher priority</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DVFS</name>
                  <description>DVFS has higher priority</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CPU_BUSY_SET</name>
              <description>CPU Busy set </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DVFC_BUSY_SET</name>
              <description>DVFS Busy set </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_EFR</name>
          <description>TWI Enhance Feature register</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <field>
              <name>DBN</name>
              <description>Data Byte number follow Read Command Control 0- No Data Byte to be written after read command 1- Only 1 byte data to be written after read command 2- 2 bytes data can be written after read command 3- 3 bytes data can be written after read command </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_LCR</name>
          <description>TWI Line Control register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x3A</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <field>
              <name>SCL_STATE</name>
              <description>Current state of TWI_SCL 0 - low 1 - high </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SDA_STATE</name>
              <description>Current state of TWI_SDA 0 - low 1 - high </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SCL_CTL</name>
              <description>TWI_SCL line state control bit When line control mode is enabled (bit[2] set), value of this bit decide the output level of TWI_SCL 0 - output low level 1 - output high level </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SCL_CTL_EN</name>
              <description>TWI_SCL line state control enable When this bit is set, the state of TWI_SCL is control by the value of bit[3]. 0-disable TWI_SCL line control mode 1-enable TWI_SCL line control mode </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDA_CTL</name>
              <description>TWI_SDA line state control bit When line control mode is enabled (bit[0] set), value of this bit decide the output level of TWI_SDA 0 - output low level 1 - output high level </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDA_CTL_EN</name>
              <description>TWI_SDA line state control enable When this bit is set, the state of TWI_SDA is control by the value of bit[1]. 0-disable TWI_SDA line control mode 1-enable TWI_SDA line control mode </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_SRST</name>
          <description>TWI Software reset</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>SOFT_RST</name>
              <description>Soft Reset Write `1` to this bit to reset the TWI and clear to `0` when completing Soft Reset operation. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_STAT</name>
          <description>TWI Status register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0xF8</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>STA</name>
              <description>Status Information Byte Code Status 
0x00: Bus error 
0x08: START condition transmitted 
0x10: Repeated START condition transmitted 
0x18: Address + Write bit transmitted, ACK received 
0x20: Address + Write bit transmitted, ACK not received 
0x28: Data byte transmitted in master mode, ACK received 
0x30: Data byte transmitted in master mode, ACK not received 
0x38: Arbitration lost in address or data byte 
0x40: Address + Read bit transmitted, ACK received 
0x48: Address + Read bit transmitted, ACK not received 
0x50: Data byte received in master mode, ACK transmitted 
0x58: Data byte received in master mode, not ACK transmitted 
0x60: Slave address + Write bit received, ACK transmitted 
0x68: Arbitration lost in address as master, slave address + Write bit received, ACK transmitted 
0x70: General Call address received, ACK transmitted 
0x78: Arbitration lost in address as master, General Call address received, ACK transmitted 
0x80: Data byte received after slave address received, ACK transmitted 
0x88: Data byte received after slave address received, not ACK transmitted 
0x90: Data byte received after General Call received, ACK transmitted 
0x98: Data byte received after General Call received, not ACK transmitted 
0xA0: STOP or repeated START condition received in slave mode 
0xA8: Slave address + Read bit received, ACK transmitted 
0xB0: Arbitration lost in address as master, slave address + Read bit received, ACK transmitted 
0xB8: Data byte transmitted in slave mode, ACK received 
0xC0: Data byte transmitted in slave mode, ACK not received 
0xC8: Last byte transmitted in slave mode, ACK received 
0xD0: Second Address byte + Write bit transmitted, ACK received 
0xD8: Second Address byte + Write bit transmitted, ACK not received 
0xF8: No relevant status information, INT_FLAG=0 Others: Reserved </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TWI_XADDR</name>
          <description>TWI Extended slave address</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>SLAX</name>
              <description>Extend Slave Address SLAX[7:0] </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral derivedFrom="TWI0">
      <name>TWI1</name>
      <description>TWI1</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C2B000</baseAddress>
      <access>read-write</access>
    </peripheral>
    <peripheral>
      <name>UART0</name>
      <description>UART0</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C28000</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>UART_DLH</name>
          <description>UART Divisor Latch High Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLH</name>
              <description>Divisor Latch High Upper 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest UART clock should be allowed to pass before transmitting or receiving data. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_DLL</name>
          <description>UART Divisor Latch Low Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLL</name>
              <description>Divisor Latch Low Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest UART clock should be allowed to pass before transmitting or receiving data. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_FCR</name>
          <description>UART FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>RT</name>
              <description>RCVR Trigger This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. 
00: 1 character in the FIFO 
01: FIFO 25% full 
10: FIFO 50% full 
11: FIFO-2 less than full </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1_character</name>
                  <description>1 character in the FIFO</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_25_percent__full</name>
                  <description>FIFO 25% full</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_50_percent__full</name>
                  <description>FIFO 50% full</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_minus_2_less</name>
                  <description>FIFO-2 less than full</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFT</name>
              <description>TX Empty Trigger Writes have no effect when THRE_MODE_USER = Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. 
00: FIFO empty 
01: 2 characters in the FIFO 
10: FIFO 25% full 
11: FIFO 50% full </description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_empty</name>
                  <description>FIFO empty</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2_characters</name>
                  <description>2 characters in the FIFO</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_25_percent__full</name>
                  <description>FIFO 25% full</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_50_percent__full</name>
                  <description>FIFO 50% full</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMAM</name>
              <description>DMA Mode 
0: Mode 0 
1: Mode 1 </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode_0</name>
                  <description>Mode 0</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode_1</name>
                  <description>Mode 1</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>XFIFOR</name>
              <description>XMIT FIFO Reset This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request.  It is 'self-clearing'. It is not necessary to clear this bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RFIFOR</name>
              <description>RCVR FIFO Reset This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request. It is 'self-clearing'. It is not necessary to clear this bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>FIFOE</name>
              <description>Enable FIFOs This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset. </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_HALT</name>
          <description>UART Halt TX Register</description>
          <addressOffset>0xA4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x37</resetMask>
          <fields>
            <field>
              <name>SIR_RX_INVERT</name>
              <description>SIR Receiver Pulse Polarity Invert 0:Not invert receiver signal 1:Invert receiver signal </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SIR_TX_INVERT</name>
              <description>SIR Transmit Pulse Polarity Invert 0:Not invert transmit pulse 1:Invert transmit pulse </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CHANGE_UPDATE</name>
              <description>After the user using HALT[1] to change the baudrate or LCR configuration, write 1 to update the configuration and waiting this bit self clear to 0 to finish update process. Write 0 to this bit has no effect. 
1: Update trigger, Self clear to 0 when finish update. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Update</name>
                  <description>Update trigger, Self clear to 0 when finish update.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CHCFG_AT_BUSY</name>
              <description>This is an enable bit for the user to change LCR register configuration (except for the DLAB bit) and baudrate register (DLH and DLL) when the UART is busy (USB[0] is 1). 
1: Enable change when busy   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable change when busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HALT_TX</name>
              <description>Halt TX This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 : Halt TX disabled 1 : Halt TX enabled Note: If FIFOs are not enabled, the setting of the halt TX register has no effect on operation. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_IER</name>
          <description>UART Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <field>
              <name>PTIME</name>
              <description>Programmable THRE Interrupt Mode Enable This is used to enable/disable the generation of THRE Interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EDSSI</name>
              <description>Enable Modem Status Interrupt This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ELSI</name>
              <description>Enable Receiver Line Status Interrupt This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ETBEI</name>
              <description>Enable Transmit Holding Register Empty Interrupt This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ERBFI</name>
              <description>Enable Received Data Available Interrupt This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_IIR</name>
          <description>UART Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0xCF</resetMask>
          <fields>
            <field>
              <name>FEFLAG</name>
              <description>FIFOs Enable Flag This is used to indicate whether the FIFOs are enabled or disabled. 
00: Disable 
11: Enable </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IID</name>
              <description>Interrupt ID This indicates the highest priority pending interrupt which can be one of the following types: 
0000: modem status 
0001: no interrupt pending 
0010: THR empty 
0100: received data available 
0110: receiver line status 
0111: busy detect 
1100: character timeout Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>modem_status</name>
                  <description>modem status</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>no_interrupt</name>
                  <description>no interrupt pending</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>THR_empty</name>
                  <description>THR empty</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>received_data</name>
                  <description>received data available</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>receiver_line</name>
                  <description>receiver line status</description>
                  <value>0b0110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>busy_detect</name>
                  <description>busy detect</description>
                  <value>0b0111</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>character_timeout</name>
                  <description>character timeout Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
                  <value>0b1100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_LCR</name>
          <description>UART Line Control Register</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLAB</name>
              <description>Divisor Latch Access Bit It is writeable only when UART is not busy (USR[0] is zero) and always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers. 
0: Select RX Buffer Register (RBR) / TX Holding Register(THR) and Interrupt Enable Register (IER) 
1: Select Divisor Latch LS Register (DLL) and Divisor Latch MS Register (DLM) </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Select_RX</name>
                  <description>Select RX Buffer Register (RBR) / TX Holding Register(THR) and Interrupt Enable Register (IER)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Select_Divisor</name>
                  <description>Select Divisor Latch LS Register (DLL) and Divisor Latch MS Register (DLM)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BC</name>
              <description>Break Control Bit This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE = Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EPS</name>
              <description>Even Parity Select It is writeable only when UART is not busy (USR[0] is zero) and always writable readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). Setting the LCR[5] is to reverse the LCR[4].  
00: Odd Parity 
01: Even Parity 
1X: Reverse LCR[4] </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Odd</name>
                  <description>Odd Parity</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Even</name>
                  <description>Even Parity</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reverse</name>
                  <description>Reverse LCR[4]</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PEN</name>
              <description>Parity Enable It is writeable only when UART is not busy (USR[0] is zero) and always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 
0: parity disabled 
1: parity enabled </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>parity_disabled</name>
                  <description>parity disabled</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>parity_enabled</name>
                  <description>parity enabled</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>STOP</name>
              <description>Number of stop bits It is writeable only when UART is not busy (USR[0] is zero) and always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 
0: 1 stop bit 
1: 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1</name>
                  <description>1 stop bit</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_5</name>
                  <description>1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DLS</name>
              <description>Data Length Select It is writeable only when UART is not busy (USR[0] is zero) and always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 
00: 5 bits 
01: 6 bits 
10: 7 bits 
11: 8 bits </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_5_bits</name>
                  <description>5 bits</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_6_bits</name>
                  <description>6 bits</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_7_bits</name>
                  <description>7 bits</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8_bits</name>
                  <description>8 bits</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_LSR</name>
          <description>UART Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x60</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>FIFOERR</name>
              <description>RX Data Error in FIFO When FIFOs are disabled, this bit is always 0. When FIFOs are enabled, this bit is set to 1 when there is at least one PE, FE, or BI in the RX FIFO. It is cleared by a read from the LSR register provided there are no subsequent errors in the FIFO. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TEMT</name>
              <description>Transmitter Empty If the FIFOs are disabled, this bit is set to "1" whenever the TX Holding Register and the TX Shift Register are empty. If the FIFOs are enabled, this bit is set whenever the TX FIFO and the TX Shift Register are empty. In both cases, this bit is cleared when a byte is written to the TX data channel. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>THRE</name>
              <description>TX Holding Register Empty If the FIFOs are disabled, this bit is set to "1" whenever the TX Holding Register is empty and ready to accept new data and it is cleared when the CPU writes to the TX Holding Register. If the FIFOs are enabled, this bit is set to "1" whenever the TX FIFO is empty and it is cleared when at least one byte is written to the TX FIFO. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>BI</name>
              <description>Break Interrupt This is used to indicate the detection of a break sequence on the serial input data.  It is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FE</name>
              <description>Framing Error This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 
0: no framing error 1:framing error Reading the LSR clears the FE bit. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_framing</name>
                  <description>no framing error 1:framing error Reading the LSR clears the FE bit.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE</name>
              <description>Parity Error This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 
0: no parity error 
1: parity error Reading the LSR clears the PE bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_parity</name>
                  <description>no parity error</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>parity</name>
                  <description>parity error Reading the LSR clears the PE bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OE</name>
              <description>Overrun Error This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 
0: no overrun error 
1: overrun error Reading the LSR clears the OE bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_overrun</name>
                  <description>no overrun error</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>overrun</name>
                  <description>overrun error Reading the LSR clears the OE bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DR</name>
              <description>Data Ready This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 
0: no data ready 
1: data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_data</name>
                  <description>no data ready</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>data</name>
                  <description>data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_MCR</name>
          <description>UART Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x73</resetMask>
          <fields>
            <field>
              <name>SIRE</name>
              <description>SIR Mode Enable 0:IrDA SIR Mode disabled 1:IrDA SIR Mode enabled </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AFCE</name>
              <description>Auto Flow Control Enable When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled. 
0: Auto Flow Control Mode disabled 
1: Auto Flow Control Mode enabled </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Auto Flow Control Mode disabled</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Auto Flow Control Mode enabled</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOOP</name>
              <description>Loop Back Mode 
0: Normal Mode 
1: Loop Back Mode This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Loop</name>
                  <description>Loop Back Mode This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS</name>
              <description>Request to Send This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. 
0: rts_n de-asserted (logic 1) 
1: rts_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>n_deasserted</name>
                  <description>rts_n de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>n_asserted</name>
                  <description>rts_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DTR</name>
              <description>Data Terminal Ready This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n. 0 dtr_n de-asserted (logic 1) 1 dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_MSR</name>
          <description>UART Modem Status Register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DCD</name>
              <description>Line State of Data Carrier Detect This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 
0: dcd_n input is de-asserted (logic 1) 
1: dcd_n input is asserted (logic 0) </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>dcd_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>dcd_n input is asserted (logic 0)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RI</name>
              <description>Line State of Ring Indicator This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 
0: ri_n input is de-asserted (logic 1) 
1: ri_n input is asserted (logic 0) </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>ri_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>ri_n input is asserted (logic 0)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DSR</name>
              <description>Line State of Data Set Ready This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with UART. 
0: dsr_n input is de-asserted (logic 1) 
1: dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR). </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>dsr_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS</name>
              <description>Line State of Clear To Send This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with UART. 
0: cts_n input is de-asserted (logic 1) 
1: cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS). </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>cts_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS).</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DDCD</name>
              <description>Delta Data Carrier Detect This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 
0: no change on dcd_n since last read of MSR 
1: change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. Note: Ff the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on dcd_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. Note: Ff the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TERI</name>
              <description>Trailing Edge Ring Indicator This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 
0: no change on ri_n since last read of MSR 
1: change on ri_n since last read of MSR Reading the MSR clears the TERI bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on ri_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on ri_n since last read of MSR Reading the MSR clears the TERI bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DDSR</name>
              <description>Delta Data Set Ready This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 
0: no change on dsr_n since last read of MSR 
1: change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR).  Note: If the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on dsr_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR).  Note: If the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DCTS</name>
              <description>Delta Clear to Send This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 
0: no change on ctsdsr_n since last read of MSR 
1: change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note: If the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset isremoved if the cts_n signal remains asserted. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on ctsdsr_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note: If the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset isremoved if the cts_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_RBR</name>
          <description>UART Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>RBR</name>
              <description>Receiver Buffer Register Data byte received on the serial input port . The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in FIFO mode and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an overrun error occurs. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_RFL</name>
          <description>UART_RFL</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>RFL</name>
              <description>Receive FIFO Level This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_SCH</name>
          <description>UART Scratch Register</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>SCRATCH_REG</name>
              <description>Scratch Register This register is for programmers to use as a temporary storage space. It has no defined purpose in the UART.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_TFL</name>
          <description>UART Transmit FIFO Level</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>TFL</name>
              <description>Transmit FIFO Level This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_THR</name>
          <description>UART Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>THR</name>
              <description>Transmit Holding Register Data to be transmitted on the serial output port . Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set.  If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, 16 number of characters of data may be written to the THR before the FIFO is full. Any attempt to write data when the FIFO is full results in the write data being lost. </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_USR</name>
          <description>UART Status Register</description>
          <addressOffset>0x7C</addressOffset>
          <resetValue>0x6</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <field>
              <name>RFF</name>
              <description>Receive FIFO Full This is used to indicate that the receive FIFO is completely full. 
0: Receive FIFO not full 
1: Receive FIFO Full This bit is cleared when the RX FIFO is no longer full. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive_FIFO_not_full</name>
                  <description>Receive FIFO not full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RFNE</name>
              <description>Receive FIFO Not Empty This is used to indicate that the receive FIFO contains one or more entries. 
0: Receive FIFO is empty 
1: Receive FIFO is not empty This bit is cleared when the RX FIFO is empty. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>not_empty</name>
                  <description>Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFE</name>
              <description>Transmit FIFO Empty This is used to indicate that the transmit FIFO is completely empty. 
0: Transmit FIFO is not empty 
1: Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>empty</name>
                  <description>Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFNF</name>
              <description>Transmit FIFO Not Full This is used to indicate that the transmit FIFO in not full. 
0: Transmit FIFO is full 
1: Transmit FIFO is not full This bit is cleared when the TX FIFO is full. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>not_full</name>
                  <description>Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BUSY</name>
              <description>UART Busy Bit 
0: Idle or inactive 
1: Busy </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle or inactive</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>UART1</name>
      <description>UART1</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C28400</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>UART_DLH</name>
          <description>UART Divisor Latch High Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLH</name>
              <description>Divisor Latch High Upper 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest UART clock should be allowed to pass before transmitting or receiving data. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_DLL</name>
          <description>UART Divisor Latch Low Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLL</name>
              <description>Divisor Latch Low Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest UART clock should be allowed to pass before transmitting or receiving data. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_FCR</name>
          <description>UART FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>RT</name>
              <description>RCVR Trigger This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. 
00: 1 character in the FIFO 
01: FIFO 25% full 
10: FIFO 50% full 
11: FIFO-2 less than full </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1_character</name>
                  <description>1 character in the FIFO</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_25_percent__full</name>
                  <description>FIFO 25% full</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_50_percent__full</name>
                  <description>FIFO 50% full</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_minus_2_less</name>
                  <description>FIFO-2 less than full</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFT</name>
              <description>TX Empty Trigger Writes have no effect when THRE_MODE_USER = Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. 
00: FIFO empty 
01: 2 characters in the FIFO 
10: FIFO 25% full 
11: FIFO 50% full </description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_empty</name>
                  <description>FIFO empty</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2_characters</name>
                  <description>2 characters in the FIFO</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_25_percent__full</name>
                  <description>FIFO 25% full</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_50_percent__full</name>
                  <description>FIFO 50% full</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMAM</name>
              <description>DMA Mode 
0: Mode 0 
1: Mode 1 </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode_0</name>
                  <description>Mode 0</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode_1</name>
                  <description>Mode 1</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>XFIFOR</name>
              <description>XMIT FIFO Reset This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request.  It is 'self-clearing'. It is not necessary to clear this bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RFIFOR</name>
              <description>RCVR FIFO Reset This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request. It is 'self-clearing'. It is not necessary to clear this bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>FIFOE</name>
              <description>Enable FIFOs This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset. </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_HALT</name>
          <description>UART Halt TX Register</description>
          <addressOffset>0xA4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x37</resetMask>
          <fields>
            <field>
              <name>SIR_RX_INVERT</name>
              <description>SIR Receiver Pulse Polarity Invert 0:Not invert receiver signal 1:Invert receiver signal </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SIR_TX_INVERT</name>
              <description>SIR Transmit Pulse Polarity Invert 0:Not invert transmit pulse 1:Invert transmit pulse </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CHANGE_UPDATE</name>
              <description>After the user using HALT[1] to change the baudrate or LCR configuration, write 1 to update the configuration and waiting this bit self clear to 0 to finish update process. Write 0 to this bit has no effect. 
1: Update trigger, Self clear to 0 when finish update. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Update</name>
                  <description>Update trigger, Self clear to 0 when finish update.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CHCFG_AT_BUSY</name>
              <description>This is an enable bit for the user to change LCR register configuration (except for the DLAB bit) and baudrate register (DLH and DLL) when the UART is busy (USB[0] is 1). 
1: Enable change when busy   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable change when busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HALT_TX</name>
              <description>Halt TX This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 : Halt TX disabled 1 : Halt TX enabled Note: If FIFOs are not enabled, the setting of the halt TX register has no effect on operation. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_IER</name>
          <description>UART Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <field>
              <name>PTIME</name>
              <description>Programmable THRE Interrupt Mode Enable This is used to enable/disable the generation of THRE Interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EDSSI</name>
              <description>Enable Modem Status Interrupt This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ELSI</name>
              <description>Enable Receiver Line Status Interrupt This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ETBEI</name>
              <description>Enable Transmit Holding Register Empty Interrupt This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ERBFI</name>
              <description>Enable Received Data Available Interrupt This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_IIR</name>
          <description>UART Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0xCF</resetMask>
          <fields>
            <field>
              <name>FEFLAG</name>
              <description>FIFOs Enable Flag This is used to indicate whether the FIFOs are enabled or disabled. 
00: Disable 
11: Enable </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IID</name>
              <description>Interrupt ID This indicates the highest priority pending interrupt which can be one of the following types: 
0000: modem status 
0001: no interrupt pending 
0010: THR empty 
0100: received data available 
0110: receiver line status 
0111: busy detect 
1100: character timeout Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>modem_status</name>
                  <description>modem status</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>no_interrupt</name>
                  <description>no interrupt pending</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>THR_empty</name>
                  <description>THR empty</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>received_data</name>
                  <description>received data available</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>receiver_line</name>
                  <description>receiver line status</description>
                  <value>0b0110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>busy_detect</name>
                  <description>busy detect</description>
                  <value>0b0111</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>character_timeout</name>
                  <description>character timeout Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
                  <value>0b1100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_LCR</name>
          <description>UART Line Control Register</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLAB</name>
              <description>Divisor Latch Access Bit It is writeable only when UART is not busy (USR[0] is zero) and always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers. 
0: Select RX Buffer Register (RBR) / TX Holding Register(THR) and Interrupt Enable Register (IER) 
1: Select Divisor Latch LS Register (DLL) and Divisor Latch MS Register (DLM) </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Select_RX</name>
                  <description>Select RX Buffer Register (RBR) / TX Holding Register(THR) and Interrupt Enable Register (IER)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Select_Divisor</name>
                  <description>Select Divisor Latch LS Register (DLL) and Divisor Latch MS Register (DLM)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BC</name>
              <description>Break Control Bit This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE = Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EPS</name>
              <description>Even Parity Select It is writeable only when UART is not busy (USR[0] is zero) and always writable readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). Setting the LCR[5] is to reverse the LCR[4].  
00: Odd Parity 
01: Even Parity 
1X: Reverse LCR[4] </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Odd</name>
                  <description>Odd Parity</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Even</name>
                  <description>Even Parity</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reverse</name>
                  <description>Reverse LCR[4]</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PEN</name>
              <description>Parity Enable It is writeable only when UART is not busy (USR[0] is zero) and always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 
0: parity disabled 
1: parity enabled </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>parity_disabled</name>
                  <description>parity disabled</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>parity_enabled</name>
                  <description>parity enabled</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>STOP</name>
              <description>Number of stop bits It is writeable only when UART is not busy (USR[0] is zero) and always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 
0: 1 stop bit 
1: 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1</name>
                  <description>1 stop bit</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_5</name>
                  <description>1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DLS</name>
              <description>Data Length Select It is writeable only when UART is not busy (USR[0] is zero) and always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 
00: 5 bits 
01: 6 bits 
10: 7 bits 
11: 8 bits </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_5_bits</name>
                  <description>5 bits</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_6_bits</name>
                  <description>6 bits</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_7_bits</name>
                  <description>7 bits</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8_bits</name>
                  <description>8 bits</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_LSR</name>
          <description>UART Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x60</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>FIFOERR</name>
              <description>RX Data Error in FIFO When FIFOs are disabled, this bit is always 0. When FIFOs are enabled, this bit is set to 1 when there is at least one PE, FE, or BI in the RX FIFO. It is cleared by a read from the LSR register provided there are no subsequent errors in the FIFO. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TEMT</name>
              <description>Transmitter Empty If the FIFOs are disabled, this bit is set to "1" whenever the TX Holding Register and the TX Shift Register are empty. If the FIFOs are enabled, this bit is set whenever the TX FIFO and the TX Shift Register are empty. In both cases, this bit is cleared when a byte is written to the TX data channel. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>THRE</name>
              <description>TX Holding Register Empty If the FIFOs are disabled, this bit is set to "1" whenever the TX Holding Register is empty and ready to accept new data and it is cleared when the CPU writes to the TX Holding Register. If the FIFOs are enabled, this bit is set to "1" whenever the TX FIFO is empty and it is cleared when at least one byte is written to the TX FIFO. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>BI</name>
              <description>Break Interrupt This is used to indicate the detection of a break sequence on the serial input data.  It is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FE</name>
              <description>Framing Error This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 
0: no framing error 1:framing error Reading the LSR clears the FE bit. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_framing</name>
                  <description>no framing error 1:framing error Reading the LSR clears the FE bit.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE</name>
              <description>Parity Error This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 
0: no parity error 
1: parity error Reading the LSR clears the PE bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_parity</name>
                  <description>no parity error</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>parity</name>
                  <description>parity error Reading the LSR clears the PE bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OE</name>
              <description>Overrun Error This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 
0: no overrun error 
1: overrun error Reading the LSR clears the OE bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_overrun</name>
                  <description>no overrun error</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>overrun</name>
                  <description>overrun error Reading the LSR clears the OE bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DR</name>
              <description>Data Ready This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 
0: no data ready 
1: data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_data</name>
                  <description>no data ready</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>data</name>
                  <description>data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_MCR</name>
          <description>UART Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x73</resetMask>
          <fields>
            <field>
              <name>SIRE</name>
              <description>SIR Mode Enable 0:IrDA SIR Mode disabled 1:IrDA SIR Mode enabled </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AFCE</name>
              <description>Auto Flow Control Enable When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled. 
0: Auto Flow Control Mode disabled 
1: Auto Flow Control Mode enabled </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Auto Flow Control Mode disabled</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Auto Flow Control Mode enabled</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOOP</name>
              <description>Loop Back Mode 
0: Normal Mode 
1: Loop Back Mode This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Loop</name>
                  <description>Loop Back Mode This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS</name>
              <description>Request to Send This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. 
0: rts_n de-asserted (logic 1) 
1: rts_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>n_deasserted</name>
                  <description>rts_n de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>n_asserted</name>
                  <description>rts_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DTR</name>
              <description>Data Terminal Ready This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n. 0 dtr_n de-asserted (logic 1) 1 dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_MSR</name>
          <description>UART Modem Status Register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DCD</name>
              <description>Line State of Data Carrier Detect This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 
0: dcd_n input is de-asserted (logic 1) 
1: dcd_n input is asserted (logic 0) </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>dcd_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>dcd_n input is asserted (logic 0)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RI</name>
              <description>Line State of Ring Indicator This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 
0: ri_n input is de-asserted (logic 1) 
1: ri_n input is asserted (logic 0) </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>ri_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>ri_n input is asserted (logic 0)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DSR</name>
              <description>Line State of Data Set Ready This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with UART. 
0: dsr_n input is de-asserted (logic 1) 
1: dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR). </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>dsr_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS</name>
              <description>Line State of Clear To Send This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with UART. 
0: cts_n input is de-asserted (logic 1) 
1: cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS). </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>cts_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS).</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DDCD</name>
              <description>Delta Data Carrier Detect This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 
0: no change on dcd_n since last read of MSR 
1: change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. Note: Ff the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on dcd_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. Note: Ff the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TERI</name>
              <description>Trailing Edge Ring Indicator This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 
0: no change on ri_n since last read of MSR 
1: change on ri_n since last read of MSR Reading the MSR clears the TERI bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on ri_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on ri_n since last read of MSR Reading the MSR clears the TERI bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DDSR</name>
              <description>Delta Data Set Ready This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 
0: no change on dsr_n since last read of MSR 
1: change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR).  Note: If the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on dsr_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR).  Note: If the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DCTS</name>
              <description>Delta Clear to Send This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 
0: no change on ctsdsr_n since last read of MSR 
1: change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note: If the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset isremoved if the cts_n signal remains asserted. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on ctsdsr_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note: If the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset isremoved if the cts_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_RBR</name>
          <description>UART Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>RBR</name>
              <description>Receiver Buffer Register Data byte received on the serial input port . The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in FIFO mode and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an overrun error occurs. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_RFL</name>
          <description>UART_RFL</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>RFL</name>
              <description>Receive FIFO Level This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_SCH</name>
          <description>UART Scratch Register</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>SCRATCH_REG</name>
              <description>Scratch Register This register is for programmers to use as a temporary storage space. It has no defined purpose in the UART.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_TFL</name>
          <description>UART Transmit FIFO Level</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>TFL</name>
              <description>Transmit FIFO Level This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_THR</name>
          <description>UART Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>THR</name>
              <description>Transmit Holding Register Data to be transmitted on the serial output port . Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set.  If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, 16 number of characters of data may be written to the THR before the FIFO is full. Any attempt to write data when the FIFO is full results in the write data being lost. </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_USR</name>
          <description>UART Status Register</description>
          <addressOffset>0x7C</addressOffset>
          <resetValue>0x6</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <field>
              <name>RFF</name>
              <description>Receive FIFO Full This is used to indicate that the receive FIFO is completely full. 
0: Receive FIFO not full 
1: Receive FIFO Full This bit is cleared when the RX FIFO is no longer full. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive_FIFO_not_full</name>
                  <description>Receive FIFO not full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RFNE</name>
              <description>Receive FIFO Not Empty This is used to indicate that the receive FIFO contains one or more entries. 
0: Receive FIFO is empty 
1: Receive FIFO is not empty This bit is cleared when the RX FIFO is empty. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>not_empty</name>
                  <description>Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFE</name>
              <description>Transmit FIFO Empty This is used to indicate that the transmit FIFO is completely empty. 
0: Transmit FIFO is not empty 
1: Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>empty</name>
                  <description>Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFNF</name>
              <description>Transmit FIFO Not Full This is used to indicate that the transmit FIFO in not full. 
0: Transmit FIFO is full 
1: Transmit FIFO is not full This bit is cleared when the TX FIFO is full. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>not_full</name>
                  <description>Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BUSY</name>
              <description>UART Busy Bit 
0: Idle or inactive 
1: Busy </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle or inactive</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>UART2</name>
      <description>UART2</description>
      <groupName>generic</groupName>
      <baseAddress>0x1C28800</baseAddress>
      <access>read-write</access>
      <registers>
        <register>
          <name>UART_DLH</name>
          <description>UART Divisor Latch High Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLH</name>
              <description>Divisor Latch High Upper 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLH is set, at least 8 clock cycles of the slowest UART clock should be allowed to pass before transmitting or receiving data. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_DLL</name>
          <description>UART Divisor Latch Low Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLL</name>
              <description>Divisor Latch Low Lower 8 bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. This register may only be accessed when the DLAB bit (LCR[7]) is set and the UART is not busy (USR[0] is zero). The output baud rate is equal to the serial clock (sclk) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor). Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications occur. Also, once the DLL is set, at least 8 clock cycles of the slowest UART clock should be allowed to pass before transmitting or receiving data. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_FCR</name>
          <description>UART FIFO Control Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>RT</name>
              <description>RCVR Trigger This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt is generated. In auto flow control mode it is used to determine when the rts_n signal is de-asserted. It also determines when the dma_rx_req_n signal is asserted in certain modes of operation. 
00: 1 character in the FIFO 
01: FIFO 25% full 
10: FIFO 50% full 
11: FIFO-2 less than full </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1_character</name>
                  <description>1 character in the FIFO</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_25_percent__full</name>
                  <description>FIFO 25% full</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_50_percent__full</name>
                  <description>FIFO 50% full</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_minus_2_less</name>
                  <description>FIFO-2 less than full</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFT</name>
              <description>TX Empty Trigger Writes have no effect when THRE_MODE_USER = Disabled. This is used to select the empty threshold level at which the THRE Interrupts are generated when the mode is active. It also determines when the dma_tx_req_n signal is asserted when in certain modes of operation. 
00: FIFO empty 
01: 2 characters in the FIFO 
10: FIFO 25% full 
11: FIFO 50% full </description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_empty</name>
                  <description>FIFO empty</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_2_characters</name>
                  <description>2 characters in the FIFO</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_25_percent__full</name>
                  <description>FIFO 25% full</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_50_percent__full</name>
                  <description>FIFO 50% full</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMAM</name>
              <description>DMA Mode 
0: Mode 0 
1: Mode 1 </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode_0</name>
                  <description>Mode 0</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode_1</name>
                  <description>Mode 1</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>XFIFOR</name>
              <description>XMIT FIFO Reset This resets the control portion of the transmit FIFO and treats the FIFO as empty. This also de-asserts the DMA TX request.  It is 'self-clearing'. It is not necessary to clear this bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RFIFOR</name>
              <description>RCVR FIFO Reset This resets the control portion of the receive FIFO and treats the FIFO as empty. This also de-asserts the DMA RX request. It is 'self-clearing'. It is not necessary to clear this bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>FIFOE</name>
              <description>Enable FIFOs This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset. </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_HALT</name>
          <description>UART Halt TX Register</description>
          <addressOffset>0xA4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x37</resetMask>
          <fields>
            <field>
              <name>SIR_RX_INVERT</name>
              <description>SIR Receiver Pulse Polarity Invert 0:Not invert receiver signal 1:Invert receiver signal </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SIR_TX_INVERT</name>
              <description>SIR Transmit Pulse Polarity Invert 0:Not invert transmit pulse 1:Invert transmit pulse </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CHANGE_UPDATE</name>
              <description>After the user using HALT[1] to change the baudrate or LCR configuration, write 1 to update the configuration and waiting this bit self clear to 0 to finish update process. Write 0 to this bit has no effect. 
1: Update trigger, Self clear to 0 when finish update. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Update</name>
                  <description>Update trigger, Self clear to 0 when finish update.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CHCFG_AT_BUSY</name>
              <description>This is an enable bit for the user to change LCR register configuration (except for the DLAB bit) and baudrate register (DLH and DLL) when the UART is busy (USB[0] is 1). 
1: Enable change when busy   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable change when busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>HALT_TX</name>
              <description>Halt TX This register is use to halt transmissions for testing, so that the transmit FIFO can be filled by the master when FIFOs are implemented and enabled. 0 : Halt TX disabled 1 : Halt TX enabled Note: If FIFOs are not enabled, the setting of the halt TX register has no effect on operation. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_IER</name>
          <description>UART Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <field>
              <name>PTIME</name>
              <description>Programmable THRE Interrupt Mode Enable This is used to enable/disable the generation of THRE Interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EDSSI</name>
              <description>Enable Modem Status Interrupt This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ELSI</name>
              <description>Enable Receiver Line Status Interrupt This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ETBEI</name>
              <description>Enable Transmit Holding Register Empty Interrupt This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt. 
0: Disable 
1: Enable </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ERBFI</name>
              <description>Enable Received Data Available Interrupt This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFOs enabled). These are the second highest priority interrupts. 
0: Disable 
1: Enable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_IIR</name>
          <description>UART Interrupt Identity Register</description>
          <addressOffset>0x8</addressOffset>
          <resetValue>0x1</resetValue>
          <resetMask>0xCF</resetMask>
          <fields>
            <field>
              <name>FEFLAG</name>
              <description>FIFOs Enable Flag This is used to indicate whether the FIFOs are enabled or disabled. 
00: Disable 
11: Enable </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IID</name>
              <description>Interrupt ID This indicates the highest priority pending interrupt which can be one of the following types: 
0000: modem status 
0001: no interrupt pending 
0010: THR empty 
0100: received data available 
0110: receiver line status 
0111: busy detect 
1100: character timeout Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>modem_status</name>
                  <description>modem status</description>
                  <value>0b0000</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>no_interrupt</name>
                  <description>no interrupt pending</description>
                  <value>0b0001</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>THR_empty</name>
                  <description>THR empty</description>
                  <value>0b0010</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>received_data</name>
                  <description>received data available</description>
                  <value>0b0100</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>receiver_line</name>
                  <description>receiver line status</description>
                  <value>0b0110</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>busy_detect</name>
                  <description>busy detect</description>
                  <value>0b0111</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>character_timeout</name>
                  <description>character timeout Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</description>
                  <value>0b1100</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_LCR</name>
          <description>UART Line Control Register</description>
          <addressOffset>0xC</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DLAB</name>
              <description>Divisor Latch Access Bit It is writeable only when UART is not busy (USR[0] is zero) and always readable. This bit is used to enable reading and writing of the Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after initial baud rate setup in order to access other registers. 
0: Select RX Buffer Register (RBR) / TX Holding Register(THR) and Interrupt Enable Register (IER) 
1: Select Divisor Latch LS Register (DLL) and Divisor Latch MS Register (DLM) </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Select_RX</name>
                  <description>Select RX Buffer Register (RBR) / TX Holding Register(THR) and Interrupt Enable Register (IER)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Select_Divisor</name>
                  <description>Select Divisor Latch LS Register (DLL) and Divisor Latch MS Register (DLM)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BC</name>
              <description>Break Control Bit This is used to cause a break condition to be transmitted to the receiving device. If set to one the serial output is forced to the spacing (logic 0) state. When not in Loopback Mode, as determined by MCR[4], the sout line is forced low until the Break bit is cleared. If SIR_MODE = Enabled and active (MCR[6] set to one) the sir_out_n line is continuously pulsed. When in Loopback Mode, the break condition is internally looped back to the receiver and the sir_out_n line is forced low. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EPS</name>
              <description>Even Parity Select It is writeable only when UART is not busy (USR[0] is zero) and always writable readable. This is used to select between even and odd parity, when parity is enabled (PEN set to one). Setting the LCR[5] is to reverse the LCR[4].  
00: Odd Parity 
01: Even Parity 
1X: Reverse LCR[4] </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Odd</name>
                  <description>Odd Parity</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Even</name>
                  <description>Even Parity</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reverse</name>
                  <description>Reverse LCR[4]</description>
                  <value>0b10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PEN</name>
              <description>Parity Enable It is writeable only when UART is not busy (USR[0] is zero) and always readable. This bit is used to enable and disable parity generation and detection in transmitted and received serial character respectively. 
0: parity disabled 
1: parity enabled </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>parity_disabled</name>
                  <description>parity disabled</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>parity_enabled</name>
                  <description>parity enabled</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>STOP</name>
              <description>Number of stop bits It is writeable only when UART is not busy (USR[0] is zero) and always readable. This is used to select the number of stop bits per character that the peripheral transmits and receives. If set to zero, one stop bit is transmitted in the serial data. If set to one and the data bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted. Otherwise, two stop bits are transmitted. Note that regardless of the number of stop bits selected, the receiver checks only the first stop bit. 
0: 1 stop bit 
1: 1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_1</name>
                  <description>1 stop bit</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_1_point_5</name>
                  <description>1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DLS</name>
              <description>Data Length Select It is writeable only when UART is not busy (USR[0] is zero) and always readable. This is used to select the number of data bits per character that the peripheral transmits and receives. The number of bit that may be selected areas follows: 
00: 5 bits 
01: 6 bits 
10: 7 bits 
11: 8 bits </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>_5_bits</name>
                  <description>5 bits</description>
                  <value>0b00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_6_bits</name>
                  <description>6 bits</description>
                  <value>0b01</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_7_bits</name>
                  <description>7 bits</description>
                  <value>0b10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>_8_bits</name>
                  <description>8 bits</description>
                  <value>0b11</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_LSR</name>
          <description>UART Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x60</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>FIFOERR</name>
              <description>RX Data Error in FIFO When FIFOs are disabled, this bit is always 0. When FIFOs are enabled, this bit is set to 1 when there is at least one PE, FE, or BI in the RX FIFO. It is cleared by a read from the LSR register provided there are no subsequent errors in the FIFO. </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TEMT</name>
              <description>Transmitter Empty If the FIFOs are disabled, this bit is set to "1" whenever the TX Holding Register and the TX Shift Register are empty. If the FIFOs are enabled, this bit is set whenever the TX FIFO and the TX Shift Register are empty. In both cases, this bit is cleared when a byte is written to the TX data channel. </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>THRE</name>
              <description>TX Holding Register Empty If the FIFOs are disabled, this bit is set to "1" whenever the TX Holding Register is empty and ready to accept new data and it is cleared when the CPU writes to the TX Holding Register. If the FIFOs are enabled, this bit is set to "1" whenever the TX FIFO is empty and it is cleared when at least one byte is written to the TX FIFO. </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>BI</name>
              <description>Break Interrupt This is used to indicate the detection of a break sequence on the serial input data.  It is set whenever the serial input, sin, is held in a logic '0' state for longer than the sum of start time + data bits + parity + stop bits. In the FIFO mode, the character associated with the break condition is carried through the FIFO and is revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is read. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FE</name>
              <description>Framing Error This is used to indicate the occurrence of a framing error in the receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received data. In the FIFO mode, since the framing error is associated with a character received, it is revealed when the character with the framing error is at the top of the FIFO. When a framing error occurs, the UART tries to resynchronize. It does this by assuming that the error was due to the start bit of the next character and then continues receiving the other bit i.e. data, and/or parity and stop. It should be noted that the Framing Error (FE) bit (LSR[3]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 
0: no framing error 1:framing error Reading the LSR clears the FE bit. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_framing</name>
                  <description>no framing error 1:framing error Reading the LSR clears the FE bit.</description>
                  <value>0b0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PE</name>
              <description>Parity Error This is used to indicate the occurrence of a parity error in the receiver if the Parity Enable (PEN) bit (LCR[3]) is set. In the FIFO mode, since the parity error is associated with a character received, it is revealed when the character with the parity error arrives at the top of the FIFO. It should be noted that the Parity Error (PE) bit (LSR[2]) is set if a break interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). 
0: no parity error 
1: parity error Reading the LSR clears the PE bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_parity</name>
                  <description>no parity error</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>parity</name>
                  <description>parity error Reading the LSR clears the PE bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OE</name>
              <description>Overrun Error This occurs if a new data character was received before the previous data was read. In the non-FIFO mode, the OE bit is set when a new character arrives in the receiver before the previous character was read from the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is retained and the data in the receive shift register is lost. 
0: no overrun error 
1: overrun error Reading the LSR clears the OE bit. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_overrun</name>
                  <description>no overrun error</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>overrun</name>
                  <description>overrun error Reading the LSR clears the OE bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DR</name>
              <description>Data Ready This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO. 
0: no data ready 
1: data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_data</name>
                  <description>no data ready</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>data</name>
                  <description>data ready This bit is cleared when the RBR is read in non-FIFO mode, or when the receiver FIFO is empty, in FIFO mode.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_MCR</name>
          <description>UART Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x73</resetMask>
          <fields>
            <field>
              <name>SIRE</name>
              <description>SIR Mode Enable 0:IrDA SIR Mode disabled 1:IrDA SIR Mode enabled </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AFCE</name>
              <description>Auto Flow Control Enable When FIFOs are enabled and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are enabled. 
0: Auto Flow Control Mode disabled 
1: Auto Flow Control Mode enabled </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Auto Flow Control Mode disabled</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Auto Flow Control Mode enabled</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LOOP</name>
              <description>Loop Back Mode 
0: Normal Mode 
1: Loop Back Mode This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal</name>
                  <description>Normal Mode</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Loop</name>
                  <description>Loop Back Mode This is used to put the UART into a diagnostic mode for test purposes. If operating in UART mode (SIR_MODE != Enabled or not active, MCR[6] set to zero), data on the sout line is held high, while serial data output is looped back to the sin line, internally. In this mode all the interrupts are fully functional. Also, in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped back to the inputs, internally. If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one), data on the sir_out_n line is held low, while serial data output is inverted and looped back to the sir_in line.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS</name>
              <description>Request to Send This is used to directly control the Request to Send (rts_n) output. The Request To Send (rts_n) output is used to inform the modem or data set that the UART is ready to exchange data. When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal is set low by programming MCR[1] (RTS) to a high.In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and FIFOs enable (FCR[0] set to one), the rts_n output is controlled in the same way, but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The rts_n signal is de-asserted when MCR[1] is set low. 
0: rts_n de-asserted (logic 1) 
1: rts_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>n_deasserted</name>
                  <description>rts_n de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>n_asserted</name>
                  <description>rts_n asserted (logic 0) Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive high while the value of this location is internally looped back to an input.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DTR</name>
              <description>Data Terminal Ready This is used to directly control the Data Terminal Ready (dtr_n) output. The value written to this location is inverted and driven out on dtr_n. 0 dtr_n de-asserted (logic 1) 1 dtr_n asserted (logic 0) The Data Terminal Ready output is used to inform the modem or data set that the UART is ready to establish communications. Note that in Loopback mode (MCR[4] set to one), the dtr_n output is held inactive high while the value of this location is internally looped back to an input. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_MSR</name>
          <description>UART Modem Status Register</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>DCD</name>
              <description>Line State of Data Carrier Detect This is used to indicate the current state of the modem control line dcd_n. This bit is the complement of dcd_n. When the Data Carrier Detect input (dcd_n) is asserted it is an indication that the carrier has been detected by the modem or data set. 
0: dcd_n input is de-asserted (logic 1) 
1: dcd_n input is asserted (logic 0) </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>dcd_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>dcd_n input is asserted (logic 0)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RI</name>
              <description>Line State of Ring Indicator This is used to indicate the current state of the modem control line ri_n. This bit is the complement of ri_n. When the Ring Indicator input (ri_n) is asserted it is an indication that a telephone ringing signal has been received by the modem or data set. 
0: ri_n input is de-asserted (logic 1) 
1: ri_n input is asserted (logic 0) </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>ri_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>ri_n input is asserted (logic 0)</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DSR</name>
              <description>Line State of Data Set Ready This is used to indicate the current state of the modem control line dsr_n. This bit is the complement of dsr_n. When the Data Set Ready input (dsr_n) is asserted it is an indication that the modem or data set is ready to establish communications with UART. 
0: dsr_n input is de-asserted (logic 1) 
1: dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR). </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>dsr_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>dsr_n input is asserted (logic 0) In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS</name>
              <description>Line State of Clear To Send This is used to indicate the current state of the modem control line cts_n. This bit is the complement of cts_n. When the Clear to Send input (cts_n) is asserted it is an indication that the modem or data set is ready to exchange data with UART. 
0: cts_n input is de-asserted (logic 1) 
1: cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS). </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>deasserted</name>
                  <description>cts_n input is de-asserted (logic 1)</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>asserted</name>
                  <description>cts_n input is asserted (logic 0) In Loopback Mode (MCR[4] = 1), CTS is the same as MCR[1] (RTS).</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DDCD</name>
              <description>Delta Data Carrier Detect This is used to indicate that the modem control line dcd_n has changed since the last time the MSR was read. 
0: no change on dcd_n since last read of MSR 
1: change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. Note: Ff the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on dcd_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on dcd_n since last read of MSR Reading the MSR clears the DDCD bit. Note: Ff the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDCD bit is set when the reset is removed if the dcd_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TERI</name>
              <description>Trailing Edge Ring Indicator This is used to indicate that a change on the input ri_n (from an active-low to an inactive-high state) has occurred since the last time the MSR was read. 
0: no change on ri_n since last read of MSR 
1: change on ri_n since last read of MSR Reading the MSR clears the TERI bit. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on ri_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on ri_n since last read of MSR Reading the MSR clears the TERI bit.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DDSR</name>
              <description>Delta Data Set Ready This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read. 
0: no change on dsr_n since last read of MSR 
1: change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR).  Note: If the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on dsr_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on dsr_n since last read of MSR Reading the MSR clears the DDSR bit. In Loopback Mode (MCR[4] = 1), DDSR reflects changes on MCR[0] (DTR).  Note: If the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset occurs (software or otherwise), then the DDSR bit is set when the reset is removed if the dsr_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DCTS</name>
              <description>Delta Clear to Send This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read. 
0: no change on ctsdsr_n since last read of MSR 
1: change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note: If the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset isremoved if the cts_n signal remains asserted. </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>no_change</name>
                  <description>no change on ctsdsr_n since last read of MSR</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>change</name>
                  <description>change on ctsdsr_n since last read of MSR Reading the MSR clears the DCTS bit. In Loopback Mode (MCR[4] = 1), DCTS reflects changes on MCR[1] (RTS). Note: If the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software or otherwise), then the DCTS bit is set when the reset isremoved if the cts_n signal remains asserted.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_RBR</name>
          <description>UART Receive Buffer Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>RBR</name>
              <description>Receiver Buffer Register Data byte received on the serial input port . The data in this register is valid only if the Data Ready (DR) bit in the Line Status Register (LCR) is set. If in FIFO mode and FIFOs are enabled (FCR[0] set to one), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO is preserved, but any incoming data are lost and an overrun error occurs. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_RFL</name>
          <description>UART_RFL</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>RFL</name>
              <description>Receive FIFO Level This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_SCH</name>
          <description>UART Scratch Register</description>
          <addressOffset>0x1C</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>SCRATCH_REG</name>
              <description>Scratch Register This register is for programmers to use as a temporary storage space. It has no defined purpose in the UART.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_TFL</name>
          <description>UART Transmit FIFO Level</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <field>
              <name>TFL</name>
              <description>Transmit FIFO Level This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_THR</name>
          <description>UART Transmit Holding Register</description>
          <addressOffset>0x0</addressOffset>
          <resetValue>0x0</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <field>
              <name>THR</name>
              <description>Transmit Holding Register Data to be transmitted on the serial output port . Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set.  If in FIFO mode and FIFOs are enabled (FCR[0] = 1) and THRE is set, 16 number of characters of data may be written to the THR before the FIFO is full. Any attempt to write data when the FIFO is full results in the write data being lost. </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>UART_USR</name>
          <description>UART Status Register</description>
          <addressOffset>0x7C</addressOffset>
          <resetValue>0x6</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <field>
              <name>RFF</name>
              <description>Receive FIFO Full This is used to indicate that the receive FIFO is completely full. 
0: Receive FIFO not full 
1: Receive FIFO Full This bit is cleared when the RX FIFO is no longer full. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive_FIFO_not_full</name>
                  <description>Receive FIFO not full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO Full This bit is cleared when the RX FIFO is no longer full.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RFNE</name>
              <description>Receive FIFO Not Empty This is used to indicate that the receive FIFO contains one or more entries. 
0: Receive FIFO is empty 
1: Receive FIFO is not empty This bit is cleared when the RX FIFO is empty. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>not_empty</name>
                  <description>Receive FIFO is not empty This bit is cleared when the RX FIFO is empty.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFE</name>
              <description>Transmit FIFO Empty This is used to indicate that the transmit FIFO is completely empty. 
0: Transmit FIFO is not empty 
1: Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty. </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>not_empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>empty</name>
                  <description>Transmit FIFO is empty This bit is cleared when the TX FIFO is no longer empty.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TFNF</name>
              <description>Transmit FIFO Not Full This is used to indicate that the transmit FIFO in not full. 
0: Transmit FIFO is full 
1: Transmit FIFO is not full This bit is cleared when the TX FIFO is full. </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>not_full</name>
                  <description>Transmit FIFO is not full This bit is cleared when the TX FIFO is full.</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BUSY</name>
              <description>UART Busy Bit 
0: Idle or inactive 
1: Busy </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>Idle or inactive</description>
                  <value>0b0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy</name>
                  <description>Busy</description>
                  <value>0b1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
  </peripherals>
</device>
